
PlutonGroundStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000937c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08009550  08009550  00019550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b8c  08009b8c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b94  08009b94  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b98  08009b98  00019b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e8  08009d84  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08009d84  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd84  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263c  00000000  00000000  0002ff9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00033190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027047  00000000  00000000  00033c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcaf  00000000  00000000  0005ac77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eafae  00000000  00000000  0006a926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001558d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  00155924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009534 	.word	0x08009534

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009534 	.word	0x08009534

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <newLoRa>:
										  	|    spreading factor = 7			   |
											|           bandwidth = 125 KHz        |
											| 		  coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000eec:	b4b0      	push	{r4, r5, r7}
 8000eee:	b08f      	sub	sp, #60	; 0x3c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000ef4:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000efa:	2307      	movs	r3, #7
 8000efc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000f00:	2307      	movs	r3, #7
 8000f02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000f0c:	23ff      	movs	r3, #255	; 0xff
 8000f0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	461d      	mov	r5, r3
 8000f20:	f107 040c 	add.w	r4, r7, #12
 8000f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	373c      	adds	r7, #60	; 0x3c
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bcb0      	pop	{r4, r5, r7}
 8000f3c:	4770      	bx	lr

08000f3e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6898      	ldr	r0, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	899b      	ldrh	r3, [r3, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	f002 f859 	bl	8003008 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	//delay_ms(1);
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6898      	ldr	r0, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	899b      	ldrh	r3, [r3, #12]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4619      	mov	r1, r3
 8000f62:	f002 f851 	bl	8003008 <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_ms(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f001 f94e 	bl	8002208 <delay_ms>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f9a2 	bl	80012ca <LoRa_read>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d107      	bne.n	8000fa4 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	f023 0307 	bic.w	r3, r3, #7
 8000f9a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
 8000fa2:	e03e      	b.n	8001022 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10c      	bne.n	8000fc4 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fae:	f023 0307 	bic.w	r3, r3, #7
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
 8000fc2:	e02e      	b.n	8001022 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d10c      	bne.n	8000fe4 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fce:	f023 0307 	bic.w	r3, r3, #7
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f043 0303 	orr.w	r3, r3, #3
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	61da      	str	r2, [r3, #28]
 8000fe2:	e01e      	b.n	8001022 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	d10c      	bne.n	8001004 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fee:	f023 0307 	bic.w	r3, r3, #7
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	f043 0305 	orr.w	r3, r3, #5
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2205      	movs	r2, #5
 8001000:	61da      	str	r2, [r3, #28]
 8001002:	e00e      	b.n	8001022 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b06      	cmp	r3, #6
 8001008:	d10b      	bne.n	8001022 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800100a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800100e:	f023 0307 	bic.w	r3, r3, #7
 8001012:	b25b      	sxtb	r3, r3
 8001014:	f043 0306 	orr.w	r3, r3, #6
 8001018:	b25b      	sxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2206      	movs	r2, #6
 8001020:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	461a      	mov	r2, r3
 8001026:	2101      	movs	r1, #1
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f96b 	bl	8001304 <LoRa_write>
	//HAL_Delay(10);
	delay_ms(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f001 f8ea 	bl	8002208 <delay_ms>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	889b      	ldrh	r3, [r3, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	f001 ffd6 	bl	8003008 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6998      	ldr	r0, [r3, #24]
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	f003 f965 	bl	8004336 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800106c:	bf00      	nop
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fe10 	bl	8004c98 <HAL_SPI_GetState>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d1f7      	bne.n	800106e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6998      	ldr	r0, [r3, #24]
 8001082:	8b3a      	ldrh	r2, [r7, #24]
 8001084:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	f003 fac2 	bl	8004612 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800108e:	bf00      	nop
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fdff 	bl	8004c98 <HAL_SPI_GetState>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d1f7      	bne.n	8001090 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	f001 ffac 	bl	8003008 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	889b      	ldrh	r3, [r3, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	f001 ff98 	bl	8003008 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6998      	ldr	r0, [r3, #24]
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	f003 f927 	bl	8004336 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010e8:	bf00      	nop
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fdd2 	bl	8004c98 <HAL_SPI_GetState>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d1f7      	bne.n	80010ea <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6998      	ldr	r0, [r3, #24]
 80010fe:	8b3a      	ldrh	r2, [r7, #24]
 8001100:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	f003 f916 	bl	8004336 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800110a:	bf00      	nop
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fdc1 	bl	8004c98 <HAL_SPI_GetState>
 8001116:	4603      	mov	r3, r0
 8001118:	2b01      	cmp	r3, #1
 800111a:	d1f7      	bne.n	800110c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	889b      	ldrh	r3, [r3, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	f001 ff6e 	bl	8003008 <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	04db      	lsls	r3, r3, #19
 8001142:	115b      	asrs	r3, r3, #5
 8001144:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	461a      	mov	r2, r3
 8001150:	2106      	movs	r1, #6
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f8d6 	bl	8001304 <LoRa_write>
	//HAL_Delay(5);
	delay_ms(5);
 8001158:	2005      	movs	r0, #5
 800115a:	f001 f855 	bl	8002208 <delay_ms>

	// write Mid:
	data = F >> 8;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	461a      	mov	r2, r3
 8001168:	2107      	movs	r1, #7
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f8ca 	bl	8001304 <LoRa_write>
	//HAL_Delay(5);
	delay_ms(5);
 8001170:	2005      	movs	r0, #5
 8001172:	f001 f849 	bl	8002208 <delay_ms>

	// write Lsb:
	data = F >> 0;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	461a      	mov	r2, r3
 800117e:	2108      	movs	r1, #8
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f8bf 	bl	8001304 <LoRa_write>
	//HAL_Delay(5);
	delay_ms(5);
 8001186:	2005      	movs	r0, #5
 8001188:	f001 f83e 	bl	8002208 <delay_ms>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	dd01      	ble.n	80011a8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80011a4:	230c      	movs	r3, #12
 80011a6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	dc01      	bgt.n	80011b2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011b2:	211e      	movs	r1, #30
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f888 	bl	80012ca <LoRa_read>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
	//HAL_Delay(10);
	delay_ms(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f001 f822 	bl	8002208 <delay_ms>
	data = (SF << 4) + (read & 0x0F);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	461a      	mov	r2, r3
 80011dc:	211e      	movs	r1, #30
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f890 	bl	8001304 <LoRa_write>
	//HAL_Delay(10);
	delay_ms(10);
 80011e4:	200a      	movs	r0, #10
 80011e6:	f001 f80f 	bl	8002208 <delay_ms>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	461a      	mov	r2, r3
 8001202:	2109      	movs	r1, #9
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f87d 	bl	8001304 <LoRa_write>
	//HAL_Delay(10);
	delay_ms(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f000 fffc 	bl	8002208 <delay_ms>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2b2c      	cmp	r3, #44	; 0x2c
 800122c:	d801      	bhi.n	8001232 <LoRa_setOCP+0x1a>
		current = 45;
 800122e:	232d      	movs	r3, #45	; 0x2d
 8001230:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	2bf0      	cmp	r3, #240	; 0xf0
 8001236:	d901      	bls.n	800123c <LoRa_setOCP+0x24>
		current = 240;
 8001238:	23f0      	movs	r3, #240	; 0xf0
 800123a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b78      	cmp	r3, #120	; 0x78
 8001240:	d809      	bhi.n	8001256 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	3b2d      	subs	r3, #45	; 0x2d
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <LoRa_setOCP+0x78>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1052      	asrs	r2, r2, #1
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e00b      	b.n	800126e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	2bf0      	cmp	r3, #240	; 0xf0
 800125a:	d808      	bhi.n	800126e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	331e      	adds	r3, #30
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoRa_setOCP+0x78>)
 8001262:	fb82 1203 	smull	r1, r2, r2, r3
 8001266:	1092      	asrs	r2, r2, #2
 8001268:	17db      	asrs	r3, r3, #31
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	3320      	adds	r3, #32
 8001272:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	461a      	mov	r2, r3
 8001278:	210b      	movs	r1, #11
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f842 	bl	8001304 <LoRa_write>
	//HAL_Delay(10);
	delay_ms(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f000 ffc1 	bl	8002208 <delay_ms>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	66666667 	.word	0x66666667

08001294 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800129c:	211e      	movs	r1, #30
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f813 	bl	80012ca <LoRa_read>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	f043 0307 	orr.w	r3, r3, #7
 80012ae:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80012b0:	7bbb      	ldrb	r3, [r7, #14]
 80012b2:	461a      	mov	r2, r3
 80012b4:	211e      	movs	r1, #30
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f824 	bl	8001304 <LoRa_write>
	//HAL_Delay(10);
	delay_ms(10);
 80012bc:	200a      	movs	r0, #10
 80012be:	f000 ffa3 	bl	8002208 <delay_ms>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af02      	add	r7, sp, #8
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80012e0:	f107 030f 	add.w	r3, r7, #15
 80012e4:	f107 010e 	add.w	r1, r7, #14
 80012e8:	2201      	movs	r2, #1
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fea4 	bl	800103c <LoRa_readReg>
	//HAL_Delay(5);
	delay_ms(5);
 80012f4:	2005      	movs	r0, #5
 80012f6:	f000 ff87 	bl	8002208 <delay_ms>
	return read_data;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
 8001310:	4613      	mov	r3, r2
 8001312:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73bb      	strb	r3, [r7, #14]
	data = value;
 800131e:	78bb      	ldrb	r3, [r7, #2]
 8001320:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001322:	f107 030f 	add.w	r3, r7, #15
 8001326:	f107 010e 	add.w	r1, r7, #14
 800132a:	2201      	movs	r2, #1
 800132c:	9200      	str	r2, [sp, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fec1 	bl	80010b8 <LoRa_writeReg>
	//HAL_Delay(5);
	delay_ms(5);
 8001336:	2005      	movs	r0, #5
 8001338:	f000 ff66 	bl	8002208 <delay_ms>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	460b      	mov	r3, r1
 8001352:	72fb      	strb	r3, [r7, #11]
 8001354:	4613      	mov	r3, r2
 8001356:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800135e:	b2db      	uxtb	r3, r3
 8001360:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	889b      	ldrh	r3, [r3, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	f001 fe4b 	bl	8003008 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6998      	ldr	r0, [r3, #24]
 8001376:	f107 0117 	add.w	r1, r7, #23
 800137a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800137e:	2201      	movs	r2, #1
 8001380:	f002 ffd9 	bl	8004336 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001384:	bf00      	nop
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fc84 	bl	8004c98 <HAL_SPI_GetState>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d1f7      	bne.n	8001386 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6998      	ldr	r0, [r3, #24]
 800139a:	7abb      	ldrb	r3, [r7, #10]
 800139c:	b29a      	uxth	r2, r3
 800139e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f002 ffc7 	bl	8004336 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80013a8:	bf00      	nop
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fc72 	bl	8004c98 <HAL_SPI_GetState>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1f7      	bne.n	80013aa <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	delay_ms(5);
 80013ba:	2005      	movs	r0, #5
 80013bc:	f000 ff24 	bl	8002208 <delay_ms>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	889b      	ldrh	r3, [r3, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	f001 fe1c 	bl	8003008 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

	return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	4611      	mov	r1, r2
 80013fa:	461a      	mov	r2, r3
 80013fc:	460b      	mov	r3, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	80bb      	strh	r3, [r7, #4]
	uint8_t read;
	int mode = _LoRa->current_mode;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800140a:	2101      	movs	r1, #1
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff fdb1 	bl	8000f74 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001412:	210e      	movs	r1, #14
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff ff58 	bl	80012ca <LoRa_read>
 800141a:	4603      	mov	r3, r0
 800141c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	461a      	mov	r2, r3
 8001422:	210d      	movs	r1, #13
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff ff6d 	bl	8001304 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	461a      	mov	r2, r3
 800142e:	2122      	movs	r1, #34	; 0x22
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff ff67 	bl	8001304 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	2100      	movs	r1, #0
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff ff81 	bl	8001344 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001442:	2103      	movs	r1, #3
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff fd95 	bl	8000f74 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800144a:	2112      	movs	r1, #18
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff ff3c 	bl	80012ca <LoRa_read>
 8001452:	4603      	mov	r3, r0
 8001454:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001460:	22ff      	movs	r2, #255	; 0xff
 8001462:	2112      	movs	r1, #18
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff ff4d 	bl	8001304 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800146a:	6979      	ldr	r1, [r7, #20]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fd81 	bl	8000f74 <LoRa_gotoMode>
			return 1;
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	3b01      	subs	r3, #1
 800147a:	80bb      	strh	r3, [r7, #4]
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001482:	6979      	ldr	r1, [r7, #20]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fd75 	bl	8000f74 <LoRa_gotoMode>
				return 0;
 800148a:	2300      	movs	r3, #0
 800148c:	e003      	b.n	8001496 <LoRa_transmit+0xa8>
			}
		}
		delay_ms(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f000 feba 	bl	8002208 <delay_ms>
	while(1){
 8001494:	e7d9      	b.n	800144a <LoRa_transmit+0x5c>
	}
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014a6:	2105      	movs	r1, #5
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fd63 	bl	8000f74 <LoRa_gotoMode>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80014b6:	b590      	push	{r4, r7, lr}
 80014b8:	b089      	sub	sp, #36	; 0x24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	e007      	b.n	80014de <LoRa_receive+0x28>
		data[i]=0;
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf3      	blt.n	80014ce <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014e6:	2101      	movs	r1, #1
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff fd43 	bl	8000f74 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80014ee:	2112      	movs	r1, #18
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff feea 	bl	80012ca <LoRa_read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80014fa:	7cfb      	ldrb	r3, [r7, #19]
 80014fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02f      	beq.n	8001564 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001504:	22ff      	movs	r2, #255	; 0xff
 8001506:	2112      	movs	r1, #18
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fefb 	bl	8001304 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800150e:	2113      	movs	r1, #19
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff feda 	bl	80012ca <LoRa_read>
 8001516:	4603      	mov	r3, r0
 8001518:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800151a:	2110      	movs	r1, #16
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7ff fed4 	bl	80012ca <LoRa_read>
 8001522:	4603      	mov	r3, r0
 8001524:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001526:	7cfb      	ldrb	r3, [r7, #19]
 8001528:	461a      	mov	r2, r3
 800152a:	210d      	movs	r1, #13
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fee9 	bl	8001304 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001532:	7cba      	ldrb	r2, [r7, #18]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4293      	cmp	r3, r2
 8001538:	bf28      	it	cs
 800153a:	4613      	movcs	r3, r2
 800153c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e00b      	b.n	800155c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	18d4      	adds	r4, r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f7ff febc 	bl	80012ca <LoRa_read>
 8001552:	4603      	mov	r3, r0
 8001554:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	7ffb      	ldrb	r3, [r7, #31]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbef      	blt.n	8001544 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001564:	2105      	movs	r1, #5
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fd04 	bl	8000f74 <LoRa_gotoMode>
	return min;
 800156c:	7ffb      	ldrb	r3, [r7, #31]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}

08001576 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff2a 	bl	80013d8 <LoRa_isvalid>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8090 	beq.w	80016ac <LoRa_init+0x136>
		// goto sleep mode:
		LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fcf0 	bl	8000f74 <LoRa_gotoMode>
		//HAL_Delay(10);
		delay_ms(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fe37 	bl	8002208 <delay_ms>
		// turn on LoRa mode:
		read = LoRa_read(_LoRa, RegOpMode);
 800159a:	2101      	movs	r1, #1
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe94 	bl	80012ca <LoRa_read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]
		//HAL_Delay(10);
		delay_ms(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	f000 fe2e 	bl	8002208 <delay_ms>
		data = read | 0x80;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015b2:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegOpMode, data);
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	461a      	mov	r2, r3
 80015b8:	2101      	movs	r1, #1
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fea2 	bl	8001304 <LoRa_write>
		//HAL_Delay(100);
		delay_ms(100);
 80015c0:	2064      	movs	r0, #100	; 0x64
 80015c2:	f000 fe21 	bl	8002208 <delay_ms>

		// set frequency:
		LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fdb1 	bl	8001134 <LoRa_setFrequency>

		// set output power gain:
		LoRa_setPower(_LoRa, _LoRa->power);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fe09 	bl	80011f2 <LoRa_setPower>

		// set over current protection:
		LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fe15 	bl	8001218 <LoRa_setOCP>

		// set LNA gain:
		LoRa_write(_LoRa, RegLna, 0x23);
 80015ee:	2223      	movs	r2, #35	; 0x23
 80015f0:	210c      	movs	r1, #12
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fe86 	bl	8001304 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
		LoRa_setTOMsb_setCRCon(_LoRa);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fe4b 	bl	8001294 <LoRa_setTOMsb_setCRCon>
		LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fdc4 	bl	8001194 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
		LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	211f      	movs	r1, #31
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fe77 	bl	8001304 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
		// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
		//       bits represent --> |   bandwidth   |     CR    |I/E|
		data = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73bb      	strb	r3, [r7, #14]
		data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4413      	add	r3, r2
 8001630:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig1, data);
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	461a      	mov	r2, r3
 8001636:	211d      	movs	r1, #29
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fe63 	bl	8001304 <LoRa_write>

		// set preamble:
		LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	b29b      	uxth	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	2120      	movs	r1, #32
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fe59 	bl	8001304 <LoRa_write>
		LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	2121      	movs	r1, #33	; 0x21
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fe51 	bl	8001304 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
		read = LoRa_read(_LoRa, RegDioMapping1);
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fe30 	bl	80012ca <LoRa_read>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
		data = read | 0x3F;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001674:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegDioMapping1, data);
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	461a      	mov	r2, r3
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fe41 	bl	8001304 <LoRa_write>

		// goto standby mode:
		LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001682:	2101      	movs	r1, #1
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fc75 	bl	8000f74 <LoRa_gotoMode>
		_LoRa->current_mode = STNBY_MODE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	61da      	str	r2, [r3, #28]
		//HAL_Delay(10);
		//delay_ms(10);

		read = LoRa_read(_LoRa, RegVersion);
 8001690:	2142      	movs	r1, #66	; 0x42
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fe19 	bl	80012ca <LoRa_read>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
		if(read == 0x12)
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d101      	bne.n	80016a6 <LoRa_init+0x130>
			return LORA_OK;
 80016a2:	23c8      	movs	r3, #200	; 0xc8
 80016a4:	e004      	b.n	80016b0 <LoRa_init+0x13a>
		else
			return LORA_NOT_FOUND;
 80016a6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80016aa:	e001      	b.n	80016b0 <LoRa_init+0x13a>
	}
	else {
		return LORA_UNAVAILABLE;
 80016ac:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <onInterrupt>:
 *
 * @param   None
 *
 * @return  None
 */
void onInterrupt(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	if (!interruptEnabled) {
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <onInterrupt+0x38>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f083 0301 	eor.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <onInterrupt+0x32>
		return;
	}
	transmissionReceived = 1;
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <onInterrupt+0x3c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
	Time2 = HAL_GetTick();
 80016d0:	f001 f93e 	bl	8002950 <HAL_GetTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <onInterrupt+0x40>)
 80016d8:	6013      	str	r3, [r2, #0]
	timeElapsed2 = Time2 - Time1;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <onInterrupt+0x40>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <onInterrupt+0x44>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <onInterrupt+0x48>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e000      	b.n	80016ec <onInterrupt+0x34>
		return;
 80016ea:	bf00      	nop
	HAL_UART_Transmit(&huart5, (uint8_t*)timeElapsedStr, strlen(timeElapsedStr), 100);
	snprintf(timeElapsedStr, sizeof(timeElapsedStr), "%lu", timeElapsed2);
	HAL_UART_Transmit(&huart5, (uint8_t*)" Time2: ", strlen(" Time2: "), 100);
	HAL_UART_Transmit(&huart5, (uint8_t*)timeElapsedStr, strlen(timeElapsedStr), 100);*/

}
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000000b 	.word	0x2000000b
 80016f4:	200002b2 	.word	0x200002b2
 80016f8:	200002bc 	.word	0x200002bc
 80016fc:	200002b8 	.word	0x200002b8
 8001700:	200002c4 	.word	0x200002c4

08001704 <sendFrame_Default>:
 * @param   functionId  The function ID to be included in the LoRa frame.
 *
 * @return  transmissionSucces 1: success 0: failed
 */

void sendFrame_Default(uint8_t functionId){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	// build frame
	uint8_t len = PCP_Get_Frame_Length_Default(callsign);
 800170e:	4817      	ldr	r0, [pc, #92]	; (800176c <sendFrame_Default+0x68>)
 8001710:	f000 fbcb 	bl	8001eaa <PCP_Get_Frame_Length_Default>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
	uint8_t* frame = (uint8_t*)malloc(len * sizeof(uint8_t));
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4618      	mov	r0, r3
 800171c:	f004 ffd4 	bl	80066c8 <malloc>
 8001720:	4603      	mov	r3, r0
 8001722:	60bb      	str	r3, [r7, #8]
	PCP_Encode_Default(frame, callsign, functionId);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	461a      	mov	r2, r3
 8001728:	4910      	ldr	r1, [pc, #64]	; (800176c <sendFrame_Default+0x68>)
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f000 fcc9 	bl	80020c2 <PCP_Encode_Default>
	// send data and check transmission success
	if (LoRa_transmit(&myLoRa, frame, len, 100) == 1) {
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <sendFrame_Default+0x6c>)
 8001738:	f7ff fe59 	bl	80013ee <LoRa_transmit>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <sendFrame_Default+0x4c>
		HAL_UART_Transmit(&huart5, (uint8_t*)"sent successfully!\r\n", strlen("sent successfully!\r\n"), 100);
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	2214      	movs	r2, #20
 8001746:	490b      	ldr	r1, [pc, #44]	; (8001774 <sendFrame_Default+0x70>)
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <sendFrame_Default+0x74>)
 800174a:	f003 fd05 	bl	8005158 <HAL_UART_Transmit>
 800174e:	e005      	b.n	800175c <sendFrame_Default+0x58>
	} else {
		HAL_UART_Transmit(&huart5, (uint8_t*)"failed\r\n", strlen("failed\r\n"), 100);
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	2208      	movs	r2, #8
 8001754:	4909      	ldr	r1, [pc, #36]	; (800177c <sendFrame_Default+0x78>)
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <sendFrame_Default+0x74>)
 8001758:	f003 fcfe 	bl	8005158 <HAL_UART_Transmit>
	}
	free(frame);
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f004 ffbb 	bl	80066d8 <free>
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	20000204 	.word	0x20000204
 8001774:	08009550 	.word	0x08009550
 8001778:	20000330 	.word	0x20000330
 800177c:	08009568 	.word	0x08009568

08001780 <printControls>:
 *
 * @param   None
 *
 * @return  None
 */
void printControls(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5, (uint8_t*)"------------- Controls -------------\r\n", strlen("------------- Controls -------------\r\n"), 100);
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	2226      	movs	r2, #38	; 0x26
 8001788:	490b      	ldr	r1, [pc, #44]	; (80017b8 <printControls+0x38>)
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <printControls+0x3c>)
 800178c:	f003 fce4 	bl	8005158 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"p - send ping frame\r\n", strlen("p - send ping frame\r\n"), 100);
 8001790:	2364      	movs	r3, #100	; 0x64
 8001792:	2215      	movs	r2, #21
 8001794:	490a      	ldr	r1, [pc, #40]	; (80017c0 <printControls+0x40>)
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <printControls+0x3c>)
 8001798:	f003 fcde 	bl	8005158 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"l - request last packet info\r\n", strlen("l - request last packet info\r\n"), 100);
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	221e      	movs	r2, #30
 80017a0:	4908      	ldr	r1, [pc, #32]	; (80017c4 <printControls+0x44>)
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <printControls+0x3c>)
 80017a4:	f003 fcd8 	bl	8005158 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"------------------------------------\r\n", strlen("------------------------------------\r\n"), 100);
 80017a8:	2364      	movs	r3, #100	; 0x64
 80017aa:	2226      	movs	r2, #38	; 0x26
 80017ac:	4906      	ldr	r1, [pc, #24]	; (80017c8 <printControls+0x48>)
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <printControls+0x3c>)
 80017b0:	f003 fcd2 	bl	8005158 <HAL_UART_Transmit>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	08009574 	.word	0x08009574
 80017bc:	20000330 	.word	0x20000330
 80017c0:	0800959c 	.word	0x0800959c
 80017c4:	080095b4 	.word	0x080095b4
 80017c8:	080095d4 	.word	0x080095d4

080017cc <decode>:
 * @param   respFrame   A pointer to the received LoRa frame.
 * @param   respLen     The length of the received LoRa frame.
 *
 * @return  None
 */
void decode(uint8_t* respFrame, uint8_t respLen) {
 80017cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d0:	b095      	sub	sp, #84	; 0x54
 80017d2:	af02      	add	r7, sp, #8
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	70fb      	strb	r3, [r7, #3]
	// print raw data
	HAL_UART_Transmit(&huart5, (uint8_t*)"Received ", strlen("Received "), 100);
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	2209      	movs	r2, #9
 80017de:	494c      	ldr	r1, [pc, #304]	; (8001910 <decode+0x144>)
 80017e0:	484c      	ldr	r0, [pc, #304]	; (8001914 <decode+0x148>)
 80017e2:	f003 fcb9 	bl	8005158 <HAL_UART_Transmit>
	char respLenStr[4];
	sprintf(respLenStr, "%d", respLen);
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	494a      	ldr	r1, [pc, #296]	; (8001918 <decode+0x14c>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 fd2e 	bl	8007250 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*)respLenStr, strlen(respLenStr), 100);
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd09 	bl	8000210 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	4842      	ldr	r0, [pc, #264]	; (8001914 <decode+0x148>)
 800180a:	f003 fca5 	bl	8005158 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)" bytes:\r\n", strlen(" bytes:\r\n"), 100);
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	2209      	movs	r2, #9
 8001812:	4942      	ldr	r1, [pc, #264]	; (800191c <decode+0x150>)
 8001814:	483f      	ldr	r0, [pc, #252]	; (8001914 <decode+0x148>)
 8001816:	f003 fc9f 	bl	8005158 <HAL_UART_Transmit>

	// get function ID
	uint8_t functionId = PCP_Get_FunctionID(callsign, respFrame, respLen);
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	461a      	mov	r2, r3
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	483f      	ldr	r0, [pc, #252]	; (8001920 <decode+0x154>)
 8001822:	f000 fb97 	bl	8001f54 <PCP_Get_FunctionID>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


	// check optional data
	uint8_t* respOptData = NULL;
 800182c:	2300      	movs	r3, #0
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t respOptDataLen = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	// public frame
	respOptDataLen = PCP_Get_OptData_Length(callsign, respFrame, respLen);
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	461a      	mov	r2, r3
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4838      	ldr	r0, [pc, #224]	; (8001920 <decode+0x154>)
 800183e:	f000 fb41 	bl	8001ec4 <PCP_Get_OptData_Length>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit(&huart5, (uint8_t*)"Optional data (", strlen("Optional data ("), 100);
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	220f      	movs	r2, #15
 800184c:	4935      	ldr	r1, [pc, #212]	; (8001924 <decode+0x158>)
 800184e:	4831      	ldr	r0, [pc, #196]	; (8001914 <decode+0x148>)
 8001850:	f003 fc82 	bl	8005158 <HAL_UART_Transmit>
	char respOptDataLenStr[4];
	sprintf(respOptDataLenStr, "%d", respOptDataLen);
 8001854:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001858:	f107 0320 	add.w	r3, r7, #32
 800185c:	492e      	ldr	r1, [pc, #184]	; (8001918 <decode+0x14c>)
 800185e:	4618      	mov	r0, r3
 8001860:	f005 fcf6 	bl	8007250 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*)respOptDataLenStr, strlen(respOptDataLenStr), 100);
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcd1 	bl	8000210 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	f107 0120 	add.w	r1, r7, #32
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	4826      	ldr	r0, [pc, #152]	; (8001914 <decode+0x148>)
 800187a:	f003 fc6d 	bl	8005158 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)" bytes):\r\n", strlen(" bytes):\r\n"), 100);
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	220a      	movs	r2, #10
 8001882:	4929      	ldr	r1, [pc, #164]	; (8001928 <decode+0x15c>)
 8001884:	4823      	ldr	r0, [pc, #140]	; (8001914 <decode+0x148>)
 8001886:	f003 fc67 	bl	8005158 <HAL_UART_Transmit>

	if (respOptDataLen > 0) {
 800188a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800188e:	2b00      	cmp	r3, #0
 8001890:	d030      	beq.n	80018f4 <decode+0x128>
 8001892:	466b      	mov	r3, sp
 8001894:	461e      	mov	r6, r3
		// read optional data
		uint8_t respOptData[respOptDataLen];
 8001896:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800189a:	460b      	mov	r3, r1
 800189c:	3b01      	subs	r3, #1
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a0:	b2cb      	uxtb	r3, r1
 80018a2:	2200      	movs	r2, #0
 80018a4:	4698      	mov	r8, r3
 80018a6:	4691      	mov	r9, r2
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018bc:	b2cb      	uxtb	r3, r1
 80018be:	2200      	movs	r2, #0
 80018c0:	461c      	mov	r4, r3
 80018c2:	4615      	mov	r5, r2
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	00eb      	lsls	r3, r5, #3
 80018ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d2:	00e2      	lsls	r2, r4, #3
 80018d4:	460b      	mov	r3, r1
 80018d6:	3307      	adds	r3, #7
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	ebad 0d03 	sub.w	sp, sp, r3
 80018e0:	ab02      	add	r3, sp, #8
 80018e2:	3300      	adds	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
		// public frame
		PCP_Get_OptData(callsign, respFrame, respLen, respOptData);
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <decode+0x154>)
 80018ee:	f000 fb5b 	bl	8001fa8 <PCP_Get_OptData>
 80018f2:	46b5      	mov	sp, r6
	}

	// process received frame
	switch (functionId) {
 80018f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018f8:	2b20      	cmp	r3, #32
 80018fa:	d002      	beq.n	8001902 <decode+0x136>
 80018fc:	2b24      	cmp	r3, #36	; 0x24
 80018fe:	d017      	beq.n	8001930 <decode+0x164>
 8001900:	e11b      	b.n	8001b3a <decode+0x36e>
	case RESP_PONG:
		HAL_UART_Transmit(&huart5, (uint8_t*)"Pong!\r\n", strlen("Pong!\r\n"), 100);
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	2207      	movs	r2, #7
 8001906:	4909      	ldr	r1, [pc, #36]	; (800192c <decode+0x160>)
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <decode+0x148>)
 800190a:	f003 fc25 	bl	8005158 <HAL_UART_Transmit>
		break;
 800190e:	e11b      	b.n	8001b48 <decode+0x37c>
 8001910:	080095fc 	.word	0x080095fc
 8001914:	20000330 	.word	0x20000330
 8001918:	08009608 	.word	0x08009608
 800191c:	0800960c 	.word	0x0800960c
 8001920:	20000000 	.word	0x20000000
 8001924:	08009618 	.word	0x08009618
 8001928:	08009628 	.word	0x08009628
 800192c:	08009634 	.word	0x08009634

	case RESP_PACKET_INFO: {
		HAL_UART_Transmit(&huart5, (uint8_t*)"Packet info:\r\n", strlen("Packet info:\r\n"), 100);
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	220e      	movs	r2, #14
 8001934:	498a      	ldr	r1, [pc, #552]	; (8001b60 <decode+0x394>)
 8001936:	488b      	ldr	r0, [pc, #556]	; (8001b64 <decode+0x398>)
 8001938:	f003 fc0e 	bl	8005158 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"SNR = ", strlen("SNR = "), 100);
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	2206      	movs	r2, #6
 8001940:	4989      	ldr	r1, [pc, #548]	; (8001b68 <decode+0x39c>)
 8001942:	4888      	ldr	r0, [pc, #544]	; (8001b64 <decode+0x398>)
 8001944:	f003 fc08 	bl	8005158 <HAL_UART_Transmit>
		char respOptDataStr[10];
		double calculatedValue = respOptData[0] / 4.0;
 8001948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe09 	bl	8000564 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b85      	ldr	r3, [pc, #532]	; (8001b6c <decode+0x3a0>)
 8001958:	f7fe ff98 	bl	800088c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		snprintf(respOptDataStr, sizeof(respOptDataStr), "%.2f", calculatedValue);
 8001964:	f107 0014 	add.w	r0, r7, #20
 8001968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800196c:	e9cd 2300 	strd	r2, r3, [sp]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <decode+0x3a4>)
 8001972:	210a      	movs	r1, #10
 8001974:	f005 fc38 	bl	80071e8 <sniprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)respOptDataStr, strlen(respOptDataStr), 100);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc47 	bl	8000210 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0114 	add.w	r1, r7, #20
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	4875      	ldr	r0, [pc, #468]	; (8001b64 <decode+0x398>)
 800198e:	f003 fbe3 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)" dB\r\n", strlen(" dB\r\n"), 100);
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2205      	movs	r2, #5
 8001996:	4977      	ldr	r1, [pc, #476]	; (8001b74 <decode+0x3a8>)
 8001998:	4872      	ldr	r0, [pc, #456]	; (8001b64 <decode+0x398>)
 800199a:	f003 fbdd 	bl	8005158 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"RSSI = ", strlen("RSSI = "), 100);
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	2207      	movs	r2, #7
 80019a2:	4975      	ldr	r1, [pc, #468]	; (8001b78 <decode+0x3ac>)
 80019a4:	486f      	ldr	r0, [pc, #444]	; (8001b64 <decode+0x398>)
 80019a6:	f003 fbd7 	bl	8005158 <HAL_UART_Transmit>
		calculatedValue = respOptData[1]/ -2.0;
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	3301      	adds	r3, #1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd7 	bl	8000564 <__aeabi_i2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019be:	f7fe ff65 	bl	800088c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		snprintf(respOptDataStr, sizeof(respOptDataStr), "%.2f", calculatedValue);
 80019ca:	f107 0014 	add.w	r0, r7, #20
 80019ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d2:	e9cd 2300 	strd	r2, r3, [sp]
 80019d6:	4a66      	ldr	r2, [pc, #408]	; (8001b70 <decode+0x3a4>)
 80019d8:	210a      	movs	r1, #10
 80019da:	f005 fc05 	bl	80071e8 <sniprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)respOptDataStr, strlen(respOptDataStr), 100);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fc14 	bl	8000210 <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f107 0114 	add.w	r1, r7, #20
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	485c      	ldr	r0, [pc, #368]	; (8001b64 <decode+0x398>)
 80019f4:	f003 fbb0 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)" dBm\r\n", strlen(" dBm\r\n"), 100);
 80019f8:	2364      	movs	r3, #100	; 0x64
 80019fa:	2206      	movs	r2, #6
 80019fc:	495f      	ldr	r1, [pc, #380]	; (8001b7c <decode+0x3b0>)
 80019fe:	4859      	ldr	r0, [pc, #356]	; (8001b64 <decode+0x398>)
 8001a00:	f003 fbaa 	bl	8005158 <HAL_UART_Transmit>

		uint16_t counter = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	827b      	strh	r3, [r7, #18]
		HAL_UART_Transmit(&huart5, (uint8_t*)"valid LoRa frames = ", strlen("valid LoRa frames = "), 100);
 8001a08:	2364      	movs	r3, #100	; 0x64
 8001a0a:	2214      	movs	r2, #20
 8001a0c:	495c      	ldr	r1, [pc, #368]	; (8001b80 <decode+0x3b4>)
 8001a0e:	4855      	ldr	r0, [pc, #340]	; (8001b64 <decode+0x398>)
 8001a10:	f003 fba2 	bl	8005158 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 2, sizeof(uint16_t));
 8001a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a16:	3302      	adds	r3, #2
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	827b      	strh	r3, [r7, #18]
		char counterStr[10];
		sprintf(counterStr, "%d", counter);
 8001a1e:	8a7b      	ldrh	r3, [r7, #18]
 8001a20:	461a      	mov	r2, r3
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4957      	ldr	r1, [pc, #348]	; (8001b84 <decode+0x3b8>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 fc11 	bl	8007250 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fbec 	bl	8000210 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f107 0108 	add.w	r1, r7, #8
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	4848      	ldr	r0, [pc, #288]	; (8001b64 <decode+0x398>)
 8001a44:	f003 fb88 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001a48:	2364      	movs	r3, #100	; 0x64
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	494e      	ldr	r1, [pc, #312]	; (8001b88 <decode+0x3bc>)
 8001a4e:	4845      	ldr	r0, [pc, #276]	; (8001b64 <decode+0x398>)
 8001a50:	f003 fb82 	bl	8005158 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"invalid LoRa frames = ", strlen("invalid LoRa frames = "), 100);
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	2216      	movs	r2, #22
 8001a58:	494c      	ldr	r1, [pc, #304]	; (8001b8c <decode+0x3c0>)
 8001a5a:	4842      	ldr	r0, [pc, #264]	; (8001b64 <decode+0x398>)
 8001a5c:	f003 fb7c 	bl	8005158 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 4, sizeof(uint16_t));
 8001a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a62:	3304      	adds	r3, #4
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	827b      	strh	r3, [r7, #18]
		sprintf(counterStr, "%d", counter);
 8001a6a:	8a7b      	ldrh	r3, [r7, #18]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4944      	ldr	r1, [pc, #272]	; (8001b84 <decode+0x3b8>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fbeb 	bl	8007250 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fbc6 	bl	8000210 <strlen>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f107 0108 	add.w	r1, r7, #8
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	4835      	ldr	r0, [pc, #212]	; (8001b64 <decode+0x398>)
 8001a90:	f003 fb62 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	2202      	movs	r2, #2
 8001a98:	493b      	ldr	r1, [pc, #236]	; (8001b88 <decode+0x3bc>)
 8001a9a:	4832      	ldr	r0, [pc, #200]	; (8001b64 <decode+0x398>)
 8001a9c:	f003 fb5c 	bl	8005158 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"valid FSK frames = ", strlen("valid FSK frames = "), 100);
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	2213      	movs	r2, #19
 8001aa4:	493a      	ldr	r1, [pc, #232]	; (8001b90 <decode+0x3c4>)
 8001aa6:	482f      	ldr	r0, [pc, #188]	; (8001b64 <decode+0x398>)
 8001aa8:	f003 fb56 	bl	8005158 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 6, sizeof(uint16_t));
 8001aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aae:	3306      	adds	r3, #6
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	827b      	strh	r3, [r7, #18]
		sprintf(counterStr, "%d", counter);
 8001ab6:	8a7b      	ldrh	r3, [r7, #18]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4931      	ldr	r1, [pc, #196]	; (8001b84 <decode+0x3b8>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fbc5 	bl	8007250 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fba0 	bl	8000210 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f107 0108 	add.w	r1, r7, #8
 8001ad8:	2364      	movs	r3, #100	; 0x64
 8001ada:	4822      	ldr	r0, [pc, #136]	; (8001b64 <decode+0x398>)
 8001adc:	f003 fb3c 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001ae0:	2364      	movs	r3, #100	; 0x64
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4928      	ldr	r1, [pc, #160]	; (8001b88 <decode+0x3bc>)
 8001ae6:	481f      	ldr	r0, [pc, #124]	; (8001b64 <decode+0x398>)
 8001ae8:	f003 fb36 	bl	8005158 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"invalid FSK frames = ", strlen("invalid FSK frames = "), 100);
 8001aec:	2364      	movs	r3, #100	; 0x64
 8001aee:	2215      	movs	r2, #21
 8001af0:	4928      	ldr	r1, [pc, #160]	; (8001b94 <decode+0x3c8>)
 8001af2:	481c      	ldr	r0, [pc, #112]	; (8001b64 <decode+0x398>)
 8001af4:	f003 fb30 	bl	8005158 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 8, sizeof(uint16_t));
 8001af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afa:	3308      	adds	r3, #8
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	827b      	strh	r3, [r7, #18]
		sprintf(counterStr, "%d", counter);
 8001b02:	8a7b      	ldrh	r3, [r7, #18]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	491e      	ldr	r1, [pc, #120]	; (8001b84 <decode+0x3b8>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f005 fb9f 	bl	8007250 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb7a 	bl	8000210 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f107 0108 	add.w	r1, r7, #8
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	480f      	ldr	r0, [pc, #60]	; (8001b64 <decode+0x398>)
 8001b28:	f003 fb16 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001b2c:	2364      	movs	r3, #100	; 0x64
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4915      	ldr	r1, [pc, #84]	; (8001b88 <decode+0x3bc>)
 8001b32:	480c      	ldr	r0, [pc, #48]	; (8001b64 <decode+0x398>)
 8001b34:	f003 fb10 	bl	8005158 <HAL_UART_Transmit>
	} break;
 8001b38:	e006      	b.n	8001b48 <decode+0x37c>

	default:
		HAL_UART_Transmit(&huart5, (uint8_t*)"Unknown function ID!\r\n", strlen("Unknown function ID!\r\n"), 100);
 8001b3a:	2364      	movs	r3, #100	; 0x64
 8001b3c:	2216      	movs	r2, #22
 8001b3e:	4916      	ldr	r1, [pc, #88]	; (8001b98 <decode+0x3cc>)
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <decode+0x398>)
 8001b42:	f003 fb09 	bl	8005158 <HAL_UART_Transmit>
		break;
 8001b46:	bf00      	nop
	}

	if (respOptDataLen > 0) {
 8001b48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <decode+0x38a>
		free(respOptData);
 8001b50:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b52:	f004 fdc1 	bl	80066d8 <free>
	}
}
 8001b56:	bf00      	nop
 8001b58:	374c      	adds	r7, #76	; 0x4c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b60:	0800963c 	.word	0x0800963c
 8001b64:	20000330 	.word	0x20000330
 8001b68:	0800964c 	.word	0x0800964c
 8001b6c:	40100000 	.word	0x40100000
 8001b70:	08009654 	.word	0x08009654
 8001b74:	0800965c 	.word	0x0800965c
 8001b78:	08009664 	.word	0x08009664
 8001b7c:	0800966c 	.word	0x0800966c
 8001b80:	08009674 	.word	0x08009674
 8001b84:	08009608 	.word	0x08009608
 8001b88:	0800968c 	.word	0x0800968c
 8001b8c:	08009690 	.word	0x08009690
 8001b90:	080096a8 	.word	0x080096a8
 8001b94:	080096bc 	.word	0x080096bc
 8001b98:	080096d4 	.word	0x080096d4

08001b9c <sendPing>:
 *
 * @param   None
 *
 * @return  transmissionSucces 1: success 0: failed
 */
void sendPing() {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5, (uint8_t*)"Sending ping frame ... ", strlen("Sending ping frame ... "), 100);
 8001ba0:	2364      	movs	r3, #100	; 0x64
 8001ba2:	2217      	movs	r2, #23
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <sendPing+0x1c>)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <sendPing+0x20>)
 8001ba8:	f003 fad6 	bl	8005158 <HAL_UART_Transmit>

	// send the frame
	sendFrame_Default(CMD_PING);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fda9 	bl	8001704 <sendFrame_Default>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	080096ec 	.word	0x080096ec
 8001bbc:	20000330 	.word	0x20000330

08001bc0 <requestPacketInfo>:
 *
 * @param   None
 *
 * @return  transmissionSucces 1: success 0: failed
 */
void requestPacketInfo() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5, (uint8_t*)"Requesting last packet info ... ", strlen("Requesting last packet info ... "), 100);
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <requestPacketInfo+0x1c>)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <requestPacketInfo+0x20>)
 8001bcc:	f003 fac4 	bl	8005158 <HAL_UART_Transmit>

	// send the frame
	sendFrame_Default(CMD_GET_PACKET_INFO);
 8001bd0:	2004      	movs	r0, #4
 8001bd2:	f7ff fd97 	bl	8001704 <sendFrame_Default>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08009704 	.word	0x08009704
 8001be0:	20000330 	.word	0x20000330

08001be4 <setLoRa>:
 *
 * @return  An int16_t status code indicating the initialization status of the LoRa module:
 *          - LORA_OK: Initialization successful.
 *          - LORA_ERROR: Failed to initialize the LoRa module.
 */
uint8_t setLoRa(){
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8001bea:	4c26      	ldr	r4, [pc, #152]	; (8001c84 <setLoRa+0xa0>)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f97c 	bl	8000eec <newLoRa>
 8001bf4:	4625      	mov	r5, r4
 8001bf6:	463c      	mov	r4, r7
 8001bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port         = NSS_GPIO_Port;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <setLoRa+0xa0>)
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <setLoRa+0xa4>)
 8001c0c:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = NSS_Pin;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <setLoRa+0xa0>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = RST_GPIO_Port;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <setLoRa+0xa0>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <setLoRa+0xa4>)
 8001c18:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = RST_Pin;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <setLoRa+0xa0>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <setLoRa+0xa0>)
 8001c22:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <setLoRa+0xa4>)
 8001c24:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = DIO0_Pin;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <setLoRa+0xa0>)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <setLoRa+0xa0>)
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <setLoRa+0xa8>)
 8001c30:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = LORA_FREQUENCY;             	// default = 433 MHz
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <setLoRa+0xa0>)
 8001c34:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001c38:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SPREADING_FACTOR;            	// default = SF_7
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <setLoRa+0xa0>)
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth             = BANDWIDTH;       	// default = BW_125KHz
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <setLoRa+0xa0>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate               = CODING_RATE;          	// default = CR_4_5
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <setLoRa+0xa0>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power                 = OUTPUT_POWER;      	// default = 20db
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <setLoRa+0xa0>)
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = CURRENT_LIMIT;             	// default = 100 mA
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <setLoRa+0xa0>)
 8001c5c:	2282      	movs	r2, #130	; 0x82
 8001c5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble              = LORA_PREAMBLE_LEN;              	// default = 8;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <setLoRa+0xa0>)
 8001c64:	2208      	movs	r2, #8
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28

	// set up radio module
	LoRa_reset(&myLoRa);
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <setLoRa+0xa0>)
 8001c6a:	f7ff f968 	bl	8000f3e <LoRa_reset>
	int16_t LoRa_stat = LoRa_init(&myLoRa);
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <setLoRa+0xa0>)
 8001c70:	f7ff fc81 	bl	8001576 <LoRa_init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	86fb      	strh	r3, [r7, #54]	; 0x36
	return LoRa_stat;
 8001c78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c7a:	b2db      	uxtb	r3, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3738      	adds	r7, #56	; 0x38
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	20000204 	.word	0x20000204
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	200002c8 	.word	0x200002c8

08001c90 <LoraApp_init>:
 *
 * @param   None
 *
 * @return  None
 */
void LoraApp_init(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	// Iniciar la recepción UART en modo interrupción
	HAL_UART_Receive_IT(&huart5, (uint8_t *)&uartRxBuffer[uartRxIndex], 1);
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <LoraApp_init+0x64>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <LoraApp_init+0x68>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4815      	ldr	r0, [pc, #84]	; (8001cfc <LoraApp_init+0x6c>)
 8001ca8:	f003 fad9 	bl	800525e <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart5, (uint8_t*)"PLUTON-UPV Ground Station Demo Code\r\n", strlen("PLUTON-UPV Ground Station Demo Code\r\n"), 100);
 8001cac:	2364      	movs	r3, #100	; 0x64
 8001cae:	2225      	movs	r2, #37	; 0x25
 8001cb0:	4913      	ldr	r1, [pc, #76]	; (8001d00 <LoraApp_init+0x70>)
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <LoraApp_init+0x6c>)
 8001cb4:	f003 fa50 	bl	8005158 <HAL_UART_Transmit>

	// initialize the radio
	int state = setLoRa();
 8001cb8:	f7ff ff94 	bl	8001be4 <setLoRa>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	607b      	str	r3, [r7, #4]


	if (state == LORA_OK) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2bc8      	cmp	r3, #200	; 0xc8
 8001cc4:	d106      	bne.n	8001cd4 <LoraApp_init+0x44>
		HAL_UART_Transmit(&huart5, (uint8_t*)"Initialization successful!\r\n", strlen("Initialization successful!\r\n"), 100);
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	221c      	movs	r2, #28
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <LoraApp_init+0x74>)
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <LoraApp_init+0x6c>)
 8001cce:	f003 fa43 	bl	8005158 <HAL_UART_Transmit>
 8001cd2:	e006      	b.n	8001ce2 <LoraApp_init+0x52>
	} else {
		HAL_UART_Transmit(&huart5, (uint8_t*)"Failed to initialize\r\n", strlen("Failed to initialize\r\n"), 100);
 8001cd4:	2364      	movs	r3, #100	; 0x64
 8001cd6:	2216      	movs	r2, #22
 8001cd8:	490b      	ldr	r1, [pc, #44]	; (8001d08 <LoraApp_init+0x78>)
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <LoraApp_init+0x6c>)
 8001cdc:	f003 fa3c 	bl	8005158 <HAL_UART_Transmit>
		while (1);
 8001ce0:	e7fe      	b.n	8001ce0 <LoraApp_init+0x50>
	}

	// begin listening for packets
	LoRa_startReceiving(&myLoRa);
 8001ce2:	480a      	ldr	r0, [pc, #40]	; (8001d0c <LoraApp_init+0x7c>)
 8001ce4:	f7ff fbdb 	bl	800149e <LoRa_startReceiving>
	printControls();
 8001ce8:	f7ff fd4a 	bl	8001780 <printControls>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200002b0 	.word	0x200002b0
 8001cf8:	20000230 	.word	0x20000230
 8001cfc:	20000330 	.word	0x20000330
 8001d00:	08009728 	.word	0x08009728
 8001d04:	08009750 	.word	0x08009750
 8001d08:	08009770 	.word	0x08009770
 8001d0c:	20000204 	.word	0x20000204

08001d10 <LoraApp_loopSerial>:
 *
 * @param   None
 *
 * @return  None
 */
void LoraApp_loopSerial(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	// disable reception interrupt
	interruptEnabled = 0;
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <LoraApp_loopSerial+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
	// Carácter recibido en la UART5
	SerialCmd = uartRxBuffer[uartRxIndex]; // Almacena el carácter en la variable global
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <LoraApp_loopSerial+0xa8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <LoraApp_loopSerial+0xac>)
 8001d24:	5c9a      	ldrb	r2, [r3, r2]
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <LoraApp_loopSerial+0xb0>)
 8001d28:	701a      	strb	r2, [r3, #0]
	// process serial command
	switch (SerialCmd) {
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <LoraApp_loopSerial+0xb0>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b6c      	cmp	r3, #108	; 0x6c
 8001d30:	d004      	beq.n	8001d3c <LoraApp_loopSerial+0x2c>
 8001d32:	2b70      	cmp	r3, #112	; 0x70
 8001d34:	d105      	bne.n	8001d42 <LoraApp_loopSerial+0x32>
	case 'p':
		sendPing();
 8001d36:	f7ff ff31 	bl	8001b9c <sendPing>
		break;
 8001d3a:	e015      	b.n	8001d68 <LoraApp_loopSerial+0x58>
	case 'l':
		requestPacketInfo();
 8001d3c:	f7ff ff40 	bl	8001bc0 <requestPacketInfo>
		break;
 8001d40:	e012      	b.n	8001d68 <LoraApp_loopSerial+0x58>
	default:
		HAL_UART_Transmit(&huart5, (uint8_t*)"Unknown command: ", strlen("Unknown command: "), 100);
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	2211      	movs	r2, #17
 8001d46:	491f      	ldr	r1, [pc, #124]	; (8001dc4 <LoraApp_loopSerial+0xb4>)
 8001d48:	481f      	ldr	r0, [pc, #124]	; (8001dc8 <LoraApp_loopSerial+0xb8>)
 8001d4a:	f003 fa05 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)&SerialCmd, sizeof(SerialCmd), 100);
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	2201      	movs	r2, #1
 8001d52:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <LoraApp_loopSerial+0xb0>)
 8001d54:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <LoraApp_loopSerial+0xb8>)
 8001d56:	f003 f9ff 	bl	8005158 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <LoraApp_loopSerial+0xbc>)
 8001d60:	4819      	ldr	r0, [pc, #100]	; (8001dc8 <LoraApp_loopSerial+0xb8>)
 8001d62:	f003 f9f9 	bl	8005158 <HAL_UART_Transmit>
		break;
 8001d66:	bf00      	nop
	}
	LoRa_startReceiving(&myLoRa);
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <LoraApp_loopSerial+0xc0>)
 8001d6a:	f7ff fb98 	bl	800149e <LoRa_startReceiving>
	Time0 = HAL_GetTick();
 8001d6e:	f000 fdef 	bl	8002950 <HAL_GetTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <LoraApp_loopSerial+0xc4>)
 8001d76:	6013      	str	r3, [r2, #0]
	// Incrementar el índice y evitar desbordamiento
	uartRxIndex = (uartRxIndex + 1) % UART_RX_BUFFER_SIZE;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <LoraApp_loopSerial+0xa8>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	425a      	negs	r2, r3
 8001d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d8a:	bf58      	it	pl
 8001d8c:	4253      	negpl	r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <LoraApp_loopSerial+0xa8>)
 8001d92:	701a      	strb	r2, [r3, #0]

	// Reiniciar la recepción para esperar el próximo carácter
	HAL_UART_Receive_IT(&huart5, (uint8_t *)&uartRxBuffer[uartRxIndex], 1);
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <LoraApp_loopSerial+0xa8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <LoraApp_loopSerial+0xac>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <LoraApp_loopSerial+0xb8>)
 8001da6:	f003 fa5a 	bl	800525e <HAL_UART_Receive_IT>

	interruptEnabled = 1;
 8001daa:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <LoraApp_loopSerial+0xa4>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000000b 	.word	0x2000000b
 8001db8:	200002b0 	.word	0x200002b0
 8001dbc:	20000230 	.word	0x20000230
 8001dc0:	200002b1 	.word	0x200002b1
 8001dc4:	08009788 	.word	0x08009788
 8001dc8:	20000330 	.word	0x20000330
 8001dcc:	0800968c 	.word	0x0800968c
 8001dd0:	20000204 	.word	0x20000204
 8001dd4:	200002b4 	.word	0x200002b4

08001dd8 <LoraApp_loopReceive>:
 *
 * @param   None
 *
 * @return  None
 */
void LoraApp_loopReceive(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
		// check if new data were received
		if (transmissionReceived) {
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <LoraApp_loopReceive+0x70>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d02c      	beq.n	8001e40 <LoraApp_loopReceive+0x68>
			// disable reception interrupt
			interruptEnabled = 0;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <LoraApp_loopReceive+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
			transmissionReceived = 0;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <LoraApp_loopReceive+0x70>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

			// read received data
			uint8_t* respFrame = (uint8_t*)malloc(20 * sizeof(uint8_t));
 8001df2:	2014      	movs	r0, #20
 8001df4:	f004 fc68 	bl	80066c8 <malloc>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	607b      	str	r3, [r7, #4]
			size_t respLen = LoRa_receive(&myLoRa, respFrame, 11);
 8001dfc:	220b      	movs	r2, #11
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <LoraApp_loopReceive+0x78>)
 8001e02:	f7ff fb58 	bl	80014b6 <LoRa_receive>
 8001e06:	4603      	mov	r3, r0
 8001e08:	603b      	str	r3, [r7, #0]
			Time1 = HAL_GetTick();
 8001e0a:	f000 fda1 	bl	8002950 <HAL_GetTick>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <LoraApp_loopReceive+0x7c>)
 8001e12:	6013      	str	r3, [r2, #0]
			timeElapsed1 = Time1 - Time0;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <LoraApp_loopReceive+0x7c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <LoraApp_loopReceive+0x80>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <LoraApp_loopReceive+0x84>)
 8001e20:	6013      	str	r3, [r2, #0]


			// check reception success
			decode(respFrame, respLen);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fccf 	bl	80017cc <decode>
			    } else {
			      Serial.println(F("Reception failed, code "));
			      Serial.println(state);

			    }*/
			free(respFrame);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f004 fc52 	bl	80066d8 <free>
			// enable reception interrupt
			LoRa_startReceiving(&myLoRa);
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <LoraApp_loopReceive+0x78>)
 8001e36:	f7ff fb32 	bl	800149e <LoRa_startReceiving>
			interruptEnabled = 1;
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <LoraApp_loopReceive+0x74>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
		}


}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200002b2 	.word	0x200002b2
 8001e4c:	2000000b 	.word	0x2000000b
 8001e50:	20000204 	.word	0x20000204
 8001e54:	200002b8 	.word	0x200002b8
 8001e58:	200002b4 	.word	0x200002b4
 8001e5c:	200002c0 	.word	0x200002c0

08001e60 <PCP_Get_Frame_Length>:
 * @param   optDataLen  The length of optional data (0 if not present).
 *
 * @return  The calculated length of the PCP frame, or an error code if invalid input.
 *          - ERR_CALLSIGN_INVALID: The callsign pointer is NULL.
 */
int16_t PCP_Get_Frame_Length(char* callsign, uint8_t optDataLen) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	// check callsign
	if(callsign == NULL) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <PCP_Get_Frame_Length+0x18>
		return(ERR_CALLSIGN_INVALID);
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e014      	b.n	8001ea2 <PCP_Get_Frame_Length+0x42>
	}

	// callsign and function ID fields are always present
	int16_t frameLen = strlen(callsign) + 1;
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe f9c9 	bl	8000210 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	81fb      	strh	r3, [r7, #14]

	// optDataLen and optData might be present
	if(optDataLen > 0) {
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <PCP_Get_Frame_Length+0x3e>
		frameLen += 1 + optDataLen;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	4413      	add	r3, r2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	81fb      	strh	r3, [r7, #14]
	}

	return(frameLen);
 8001e9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <PCP_Get_Frame_Length_Default>:
 *
 * @return  The calculated length of the PCP frame with no optional data, or an error code
 *          if invalid input.
 *          - ERR_CALLSIGN_INVALID: The callsign pointer is NULL.
 */
int16_t PCP_Get_Frame_Length_Default(char* callsign) {
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	return PCP_Get_Frame_Length(callsign,0);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffd3 	bl	8001e60 <PCP_Get_Frame_Length>
 8001eba:	4603      	mov	r3, r0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <PCP_Get_OptData_Length>:
 * @return  The length of optional data within the PCP frame, or an error code if the input is invalid.
 *          - ERR_CALLSIGN_INVALID: The callsign pointer is NULL.
 *          - ERR_FRAME_INVALID: The frame buffer or its length is invalid.
 *          - ERR_LENGTH_MISMATCH: The length of optional data in the frame doesn't match the expected length.
 */
int16_t PCP_Get_OptData_Length(char* callsign, uint8_t* frame, uint8_t frameLen) {
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	71fb      	strb	r3, [r7, #7]
	// check callsign
	if(callsign == NULL) {
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <PCP_Get_OptData_Length+0x1a>
		return(ERR_CALLSIGN_INVALID);
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	e036      	b.n	8001f4c <PCP_Get_OptData_Length+0x88>
	}

	// check frame buffer
	if(frame == NULL) {
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <PCP_Get_OptData_Length+0x26>
		return(ERR_FRAME_INVALID);
 8001ee4:	f06f 0301 	mvn.w	r3, #1
 8001ee8:	e030      	b.n	8001f4c <PCP_Get_OptData_Length+0x88>
	}

	// check frame length
	if(frameLen < strlen(callsign) + 1) {
 8001eea:	79fc      	ldrb	r4, [r7, #7]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7fe f98f 	bl	8000210 <strlen>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	429c      	cmp	r4, r3
 8001ef8:	d202      	bcs.n	8001f00 <PCP_Get_OptData_Length+0x3c>
		return(ERR_FRAME_INVALID);
 8001efa:	f06f 0301 	mvn.w	r3, #1
 8001efe:	e025      	b.n	8001f4c <PCP_Get_OptData_Length+0x88>
	} else if(frameLen == strlen(callsign) + 1) {
 8001f00:	79fc      	ldrb	r4, [r7, #7]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7fe f984 	bl	8000210 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	d101      	bne.n	8001f14 <PCP_Get_OptData_Length+0x50>
		return(0);
 8001f10:	2300      	movs	r3, #0
 8001f12:	e01b      	b.n	8001f4c <PCP_Get_OptData_Length+0x88>
	}

	// unencrypted frame
	int16_t optDataLen = frame[strlen(callsign) + 1];
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7fe f97b 	bl	8000210 <strlen>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	82fb      	strh	r3, [r7, #22]

	// check if optDataLen field matches the expected length
	if(optDataLen != (uint8_t)(frameLen - strlen(callsign) - 2)) {
 8001f26:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7fe f970 	bl	8000210 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3b02      	subs	r3, #2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	429c      	cmp	r4, r3
 8001f40:	d002      	beq.n	8001f48 <PCP_Get_OptData_Length+0x84>
		// length mismatch
		return(ERR_LENGTH_MISMATCH);
 8001f42:	f06f 0303 	mvn.w	r3, #3
 8001f46:	e001      	b.n	8001f4c <PCP_Get_OptData_Length+0x88>
	}

	return(optDataLen);
 8001f48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <PCP_Get_FunctionID>:
 *
 * @return  The extracted Function ID from the PCP frame, or an error code if the input is invalid.
 *          - ERR_CALLSIGN_INVALID: The callsign pointer is NULL.
 *          - ERR_FRAME_INVALID: The frame buffer or its length is invalid.
 */
int16_t PCP_Get_FunctionID(char* callsign, uint8_t* frame, uint8_t frameLen) {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	71fb      	strb	r3, [r7, #7]
	// check callsign
	if(callsign == NULL) {
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <PCP_Get_FunctionID+0x1a>
		return(ERR_CALLSIGN_INVALID);
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	e018      	b.n	8001fa0 <PCP_Get_FunctionID+0x4c>
	}

	// check frame buffer
	if(frame == NULL) {
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <PCP_Get_FunctionID+0x26>
		return(ERR_FRAME_INVALID);
 8001f74:	f06f 0301 	mvn.w	r3, #1
 8001f78:	e012      	b.n	8001fa0 <PCP_Get_FunctionID+0x4c>
	}

	// check frame length
	if(frameLen < strlen(callsign) + 1) {
 8001f7a:	79fc      	ldrb	r4, [r7, #7]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f7fe f947 	bl	8000210 <strlen>
 8001f82:	4603      	mov	r3, r0
 8001f84:	3301      	adds	r3, #1
 8001f86:	429c      	cmp	r4, r3
 8001f88:	d202      	bcs.n	8001f90 <PCP_Get_FunctionID+0x3c>
		return(ERR_FRAME_INVALID);
 8001f8a:	f06f 0301 	mvn.w	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <PCP_Get_FunctionID+0x4c>
	}

	return((int16_t)frame[strlen(callsign)]);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7fe f93d 	bl	8000210 <strlen>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b21b      	sxth	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <PCP_Get_OptData>:
 * @return  An error code indicating the result of the extraction:
 *          - ERR_CALLSIGN_INVALID: The callsign pointer is NULL or doesn't match the frame.
 *          - ERR_FRAME_INVALID: The frame buffer or its length is invalid.
 *          - ERR_NONE: Optional data successfully extracted (or no optional data present).
 */
int16_t PCP_Get_OptData(char* callsign, uint8_t* frame, uint8_t frameLen, uint8_t* optData) {
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71fb      	strb	r3, [r7, #7]
	// check callsign
	if(callsign == NULL) {
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <PCP_Get_OptData+0x1c>
		return(ERR_CALLSIGN_INVALID);
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e03f      	b.n	8002044 <PCP_Get_OptData+0x9c>
	}

	// check frame
	if(frame == NULL) {
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <PCP_Get_OptData+0x28>
		return(ERR_FRAME_INVALID);
 8001fca:	f06f 0301 	mvn.w	r3, #1
 8001fce:	e039      	b.n	8002044 <PCP_Get_OptData+0x9c>
	}

	// get frame pointer
	uint8_t* framePtr = frame;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	617b      	str	r3, [r7, #20]

	// check callsign
	if(memcmp(framePtr, callsign, strlen(callsign)) != 0) {
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7fe f91b 	bl	8000210 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68f9      	ldr	r1, [r7, #12]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f004 fb81 	bl	80066e8 <memcmp>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <PCP_Get_OptData+0x4a>
		// incorrect callsign
		return(ERR_CALLSIGN_INVALID);
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	e028      	b.n	8002044 <PCP_Get_OptData+0x9c>
	}
	framePtr += strlen(callsign);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7fe f90c 	bl	8000210 <strlen>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

	// skip function ID
	framePtr += 1;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
	// get optional data (if present)
	if(frameLen > strlen(callsign) + 1) {
 8002006:	79fc      	ldrb	r4, [r7, #7]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7fe f901 	bl	8000210 <strlen>
 800200e:	4603      	mov	r3, r0
 8002010:	3301      	adds	r3, #1
 8002012:	429c      	cmp	r4, r3
 8002014:	d915      	bls.n	8002042 <PCP_Get_OptData+0x9a>
		if(optData == NULL) {
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <PCP_Get_OptData+0x7a>
			return(ERR_FRAME_INVALID);
 800201c:	f06f 0301 	mvn.w	r3, #1
 8002020:	e010      	b.n	8002044 <PCP_Get_OptData+0x9c>
		}

		// get option data length
		uint8_t optDataLen = *framePtr;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	74fb      	strb	r3, [r7, #19]
		framePtr += 1;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]

		// get optional data
		memcpy(optData, framePtr, optDataLen);
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	461a      	mov	r2, r3
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	6838      	ldr	r0, [r7, #0]
 8002036:	f004 fb67 	bl	8006708 <memcpy>
		framePtr += optDataLen;
 800203a:	7cfb      	ldrb	r3, [r7, #19]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
	}

	return(ERR_NONE);
 8002042:	2300      	movs	r3, #0

}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}

0800204c <PCP_Encode>:
 * @param   optData     A pointer to the optional data to be encoded (ignored if optDataLen is 0).
 *
 * @return  An error code indicating the result of the encoding:
 *          - ERR_NONE: Data successfully encoded into the frame.
 */
int16_t PCP_Encode(uint8_t* frame, char* callsign, uint8_t functionId, uint8_t optDataLen, uint8_t* optData) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	460b      	mov	r3, r1
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	4613      	mov	r3, r2
 8002060:	71bb      	strb	r3, [r7, #6]
	// get frame pointer
	uint8_t* framePtr = frame;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	617b      	str	r3, [r7, #20]

	// set callsign
	memcpy(framePtr, callsign, strlen(callsign));
 8002066:	68b8      	ldr	r0, [r7, #8]
 8002068:	f7fe f8d2 	bl	8000210 <strlen>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f004 fb48 	bl	8006708 <memcpy>
	framePtr += strlen(callsign);
 8002078:	68b8      	ldr	r0, [r7, #8]
 800207a:	f7fe f8c9 	bl	8000210 <strlen>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

	// set function ID
	*framePtr = functionId;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	701a      	strb	r2, [r3, #0]
	framePtr += 1;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
	if(optDataLen > 0) {
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00f      	beq.n	80020b8 <PCP_Encode+0x6c>
		// set optional data length
		*framePtr = optDataLen;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	79ba      	ldrb	r2, [r7, #6]
 800209c:	701a      	strb	r2, [r3, #0]
		framePtr += 1;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]

		// set optional data
		memcpy(framePtr, optData, optDataLen);
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	461a      	mov	r2, r3
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f004 fb2c 	bl	8006708 <memcpy>
		framePtr += optDataLen;
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4413      	add	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
	}


	return(ERR_NONE);
 80020b8:	2300      	movs	r3, #0

}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <PCP_Encode_Default>:
 * @param   functionId  The function ID to be encoded into the frame.
 *
 * @return  An error code indicating the result of the encoding:
 *          - ERR_NONE: Data successfully encoded into the frame.
 */
int16_t PCP_Encode_Default(uint8_t* frame, char* callsign, uint8_t functionId) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af02      	add	r7, sp, #8
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
	return PCP_Encode(frame, callsign, functionId, 0, NULL);
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff ffb6 	bl	800204c <PCP_Encode>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <MX_GPIO_Init+0x110>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <MX_GPIO_Init+0x110>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <MX_GPIO_Init+0x110>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <MX_GPIO_Init+0x110>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a37      	ldr	r2, [pc, #220]	; (80021fc <MX_GPIO_Init+0x110>)
 8002120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b35      	ldr	r3, [pc, #212]	; (80021fc <MX_GPIO_Init+0x110>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <MX_GPIO_Init+0x110>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a31      	ldr	r2, [pc, #196]	; (80021fc <MX_GPIO_Init+0x110>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <MX_GPIO_Init+0x110>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <MX_GPIO_Init+0x110>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <MX_GPIO_Init+0x110>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <MX_GPIO_Init+0x110>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <MX_GPIO_Init+0x110>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <MX_GPIO_Init+0x110>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <MX_GPIO_Init+0x110>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2103      	movs	r1, #3
 800217e:	4820      	ldr	r0, [pc, #128]	; (8002200 <MX_GPIO_Init+0x114>)
 8002180:	f000 ff42 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800218a:	481d      	ldr	r0, [pc, #116]	; (8002200 <MX_GPIO_Init+0x114>)
 800218c:	f000 ff3c 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4817      	ldr	r0, [pc, #92]	; (8002204 <MX_GPIO_Init+0x118>)
 80021a6:	f000 fd83 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|LED3_Pin|LED2_Pin;
 80021aa:	f244 0383 	movw	r3, #16515	; 0x4083
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	480f      	ldr	r0, [pc, #60]	; (8002200 <MX_GPIO_Init+0x114>)
 80021c4:	f000 fd74 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80021c8:	2304      	movs	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <MX_GPIO_Init+0x114>)
 80021de:	f000 fd67 	bl	8002cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2101      	movs	r1, #1
 80021e6:	2008      	movs	r0, #8
 80021e8:	f000 fc99 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021ec:	2008      	movs	r0, #8
 80021ee:	f000 fcb2 	bl	8002b56 <HAL_NVIC_EnableIRQ>

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800

08002208 <delay_ms>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_ms(uint32_t ms) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick(); // Obtiene el tiempo inicial
 8002210:	f000 fb9e 	bl	8002950 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]
	while ((HAL_GetTick() - start) < ms);
 8002216:	bf00      	nop
 8002218:	f000 fb9a 	bl	8002950 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d8f7      	bhi.n	8002218 <delay_ms+0x10>
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002236:	f000 fb3a 	bl	80028ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800223a:	f000 f80b 	bl	8002254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223e:	f7ff ff55 	bl	80020ec <MX_GPIO_Init>
  MX_UART5_Init();
 8002242:	f000 fa51 	bl	80026e8 <MX_UART5_Init>
  MX_SPI1_Init();
 8002246:	f000 f895 	bl	8002374 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	//------------MAIN APP INIT-----------------
	LoraApp_init();
 800224a:	f7ff fd21 	bl	8001c90 <LoraApp_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//------------MAIN APP LOOP-----------------
		LoraApp_loopReceive();
 800224e:	f7ff fdc3 	bl	8001dd8 <LoraApp_loopReceive>
	{
 8002252:	e7fc      	b.n	800224e <main+0x1c>

08002254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b094      	sub	sp, #80	; 0x50
 8002258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	2230      	movs	r2, #48	; 0x30
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fa5e 	bl	8006724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <SystemClock_Config+0xc8>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <SystemClock_Config+0xc8>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <SystemClock_Config+0xc8>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <SystemClock_Config+0xcc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <SystemClock_Config+0xcc>)
 800229a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <SystemClock_Config+0xcc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b6:	2302      	movs	r3, #2
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022c0:	2304      	movs	r3, #4
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80022c4:	2348      	movs	r3, #72	; 0x48
 80022c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022cc:	2302      	movs	r3, #2
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d0:	f107 0320 	add.w	r3, r7, #32
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fec9 	bl	800306c <HAL_RCC_OscConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80022e0:	f000 f842 	bl	8002368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e4:	230f      	movs	r3, #15
 80022e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e8:	2302      	movs	r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f001 f956 	bl	80035b4 <HAL_RCC_ClockConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800230e:	f000 f82b 	bl	8002368 <Error_Handler>
  }
}
 8002312:	bf00      	nop
 8002314:	3750      	adds	r7, #80	; 0x50
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000

08002324 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//---------------------UART INTERRUPTION----------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_UART_RxCpltCallback+0x24>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d105      	bne.n	8002340 <HAL_UART_RxCpltCallback+0x1c>
		LoraApp_loopSerial();
 8002334:	f7ff fcec 	bl	8001d10 <LoraApp_loopSerial>
		delay_ms(1000);
 8002338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233c:	f7ff ff64 	bl	8002208 <delay_ms>
	}
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000330 	.word	0x20000330

0800234c <HAL_GPIO_EXTI_Callback>:
//------------------------------------------------------------------------
//---------------------DIO0 INTERRUPTION----------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin){
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d101      	bne.n	8002360 <HAL_GPIO_EXTI_Callback+0x14>
		//Se ha producido una interupcion en la recepcion
		onInterrupt();
 800235c:	f7ff f9ac 	bl	80016b8 <onInterrupt>
	}
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800236c:	b672      	cpsid	i
}
 800236e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002370:	e7fe      	b.n	8002370 <Error_Handler+0x8>
	...

08002374 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_SPI1_Init+0x74>)
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <MX_SPI1_Init+0x78>)
 800237c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_SPI1_Init+0x74>)
 8002380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_SPI1_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_SPI1_Init+0x74>)
 800238e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002392:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_SPI1_Init+0x74>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_SPI1_Init+0x74>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023aa:	2208      	movs	r2, #8
 80023ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023c2:	2207      	movs	r2, #7
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023ce:	2208      	movs	r2, #8
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_SPI1_Init+0x74>)
 80023d4:	f001 ff04 	bl	80041e0 <HAL_SPI_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023de:	f7ff ffc3 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200002c8 	.word	0x200002c8
 80023ec:	40013000 	.word	0x40013000

080023f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_SPI_MspInit+0x7c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d127      	bne.n	8002462 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_SPI_MspInit+0x80>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_SPI_MspInit+0x80>)
 8002418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_SPI_MspInit+0x80>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_SPI_MspInit+0x80>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_SPI_MspInit+0x80>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_SPI_MspInit+0x80>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002442:	23e0      	movs	r3, #224	; 0xe0
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002452:	2305      	movs	r3, #5
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <HAL_SPI_MspInit+0x84>)
 800245e:	f000 fc27 	bl	8002cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40013000 	.word	0x40013000
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_MspInit+0x44>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_MspInit+0x44>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_MspInit+0x44>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_MspInit+0x44>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_MspInit+0x44>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x44>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80024ae:	2005      	movs	r0, #5
 80024b0:	f000 fb2a 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <NMI_Handler+0x4>

080024c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler+0x4>

080024cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <MemManage_Handler+0x4>

080024d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <UsageFault_Handler+0x4>

080024de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250c:	f000 fa0c 	bl	8002928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002518:	2004      	movs	r0, #4
 800251a:	f000 fd8f 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <UART5_IRQHandler+0x10>)
 800252a:	f002 fedd 	bl	80052e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000330 	.word	0x20000330

08002538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return 1;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_kill>:

int _kill(int pid, int sig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002552:	f004 f88f 	bl	8006674 <__errno>
 8002556:	4603      	mov	r3, r0
 8002558:	2216      	movs	r2, #22
 800255a:	601a      	str	r2, [r3, #0]
  return -1;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_exit>:

void _exit (int status)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ffe7 	bl	8002548 <_kill>
  while (1) {}    /* Make sure we hang here */
 800257a:	e7fe      	b.n	800257a <_exit+0x12>

0800257c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e00a      	b.n	80025a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800258e:	f3af 8000 	nop.w
 8002592:	4601      	mov	r1, r0
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	b2ca      	uxtb	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dbf0      	blt.n	800258e <_read+0x12>
  }

  return len;
 80025ac:	687b      	ldr	r3, [r7, #4]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e009      	b.n	80025dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbf1      	blt.n	80025c8 <_write+0x12>
  }
  return len;
 80025e4:	687b      	ldr	r3, [r7, #4]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_close>:

int _close(int file)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002616:	605a      	str	r2, [r3, #4]
  return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_isatty>:

int _isatty(int file)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <_sbrk+0x5c>)
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <_sbrk+0x60>)
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <_sbrk+0x64>)
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <_sbrk+0x68>)
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	429a      	cmp	r2, r3
 8002686:	d207      	bcs.n	8002698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002688:	f003 fff4 	bl	8006674 <__errno>
 800268c:	4603      	mov	r3, r0
 800268e:	220c      	movs	r2, #12
 8002690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	e009      	b.n	80026ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <_sbrk+0x64>)
 80026a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20050000 	.word	0x20050000
 80026b8:	00000400 	.word	0x00000400
 80026bc:	2000032c 	.word	0x2000032c
 80026c0:	200003d0 	.word	0x200003d0

080026c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <SystemInit+0x20>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <SystemInit+0x20>)
 80026d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <MX_UART5_Init+0x58>)
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <MX_UART5_Init+0x5c>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_UART5_Init+0x58>)
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <MX_UART5_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <MX_UART5_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_UART5_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <MX_UART5_Init+0x58>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <MX_UART5_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <MX_UART5_Init+0x58>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <MX_UART5_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_UART5_Init+0x58>)
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_UART5_Init+0x58>)
 800272c:	f002 fcc6 	bl	80050bc <HAL_UART_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002736:	f7ff fe17 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000330 	.word	0x20000330
 8002744:	40005000 	.word	0x40005000

08002748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0ac      	sub	sp, #176	; 0xb0
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002760:	f107 0318 	add.w	r3, r7, #24
 8002764:	2284      	movs	r2, #132	; 0x84
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f003 ffdb 	bl	8006724 <memset>
  if(uartHandle->Instance==UART5)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_UART_MspInit+0x104>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d165      	bne.n	8002844 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800277e:	2300      	movs	r3, #0
 8002780:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002782:	f107 0318 	add.w	r3, r7, #24
 8002786:	4618      	mov	r0, r3
 8002788:	f001 f93a 	bl	8003a00 <HAL_RCCEx_PeriphCLKConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002792:	f7ff fde9 	bl	8002368 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_UART_MspInit+0x108>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <HAL_UART_MspInit+0x108>)
 800279c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_UART_MspInit+0x108>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027f8:	2308      	movs	r3, #8
 80027fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002802:	4619      	mov	r1, r3
 8002804:	4813      	ldr	r0, [pc, #76]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002806:	f000 fa53 	bl	8002cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800280a:	2304      	movs	r3, #4
 800280c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002822:	2308      	movs	r3, #8
 8002824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800282c:	4619      	mov	r1, r3
 800282e:	480a      	ldr	r0, [pc, #40]	; (8002858 <HAL_UART_MspInit+0x110>)
 8002830:	f000 fa3e 	bl	8002cb0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 1, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2101      	movs	r1, #1
 8002838:	2035      	movs	r0, #53	; 0x35
 800283a:	f000 f970 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800283e:	2035      	movs	r0, #53	; 0x35
 8002840:	f000 f989 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002844:	bf00      	nop
 8002846:	37b0      	adds	r7, #176	; 0xb0
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40005000 	.word	0x40005000
 8002850:	40023800 	.word	0x40023800
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002862:	490e      	ldr	r1, [pc, #56]	; (800289c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002878:	4c0b      	ldr	r4, [pc, #44]	; (80028a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002886:	f7ff ff1d 	bl	80026c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f003 fef9 	bl	8006680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7ff fcd0 	bl	8002232 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002894:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80028a0:	08009b9c 	.word	0x08009b9c
  ldr r2, =_sbss
 80028a4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80028a8:	200003cc 	.word	0x200003cc

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>

080028ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b2:	2003      	movs	r0, #3
 80028b4:	f000 f928 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f000 f805 	bl	80028c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028be:	f7ff fddb 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_InitTick+0x54>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_InitTick+0x58>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028de:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f943 	bl	8002b72 <HAL_SYSTICK_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00e      	b.n	8002914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d80a      	bhi.n	8002912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fc:	2200      	movs	r2, #0
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f000 f90b 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <HAL_InitTick+0x5c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000000c 	.word	0x2000000c
 8002920:	20000014 	.word	0x20000014
 8002924:	20000010 	.word	0x20000010

08002928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_IncTick+0x20>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_IncTick+0x24>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4413      	add	r3, r2
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <HAL_IncTick+0x24>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000014 	.word	0x20000014
 800294c:	200003b8 	.word	0x200003b8

08002950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return uwTick;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_GetTick+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	200003b8 	.word	0x200003b8

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	05fa0000 	.word	0x05fa0000

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff3e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff31 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffa2 	bl	8002ac4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff feda 	bl	8002950 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d008      	beq.n	8002bbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e052      	b.n	8002c62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0216 	bic.w	r2, r2, #22
 8002bca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <HAL_DMA_Abort+0x62>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0208 	bic.w	r2, r2, #8
 8002bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0c:	e013      	b.n	8002c36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0e:	f7ff fe9f 	bl	8002950 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d90c      	bls.n	8002c36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e015      	b.n	8002c62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e4      	bne.n	8002c0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	223f      	movs	r2, #63	; 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e00c      	b.n	8002ca2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e175      	b.n	8002fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f040 8164 	bne.w	8002fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d005      	beq.n	8002d06 <HAL_GPIO_Init+0x56>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d130      	bne.n	8002d68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0201 	and.w	r2, r3, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d017      	beq.n	8002da4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d123      	bne.n	8002df8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3208      	adds	r2, #8
 8002db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	08da      	lsrs	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80be 	beq.w	8002fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <HAL_GPIO_Init+0x324>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a65      	ldr	r2, [pc, #404]	; (8002fd4 <HAL_GPIO_Init+0x324>)
 8002e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_GPIO_Init+0x324>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e52:	4a61      	ldr	r2, [pc, #388]	; (8002fd8 <HAL_GPIO_Init+0x328>)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a58      	ldr	r2, [pc, #352]	; (8002fdc <HAL_GPIO_Init+0x32c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d037      	beq.n	8002eee <HAL_GPIO_Init+0x23e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_GPIO_Init+0x330>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <HAL_GPIO_Init+0x23a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_GPIO_Init+0x334>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02b      	beq.n	8002ee6 <HAL_GPIO_Init+0x236>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a55      	ldr	r2, [pc, #340]	; (8002fe8 <HAL_GPIO_Init+0x338>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d025      	beq.n	8002ee2 <HAL_GPIO_Init+0x232>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a54      	ldr	r2, [pc, #336]	; (8002fec <HAL_GPIO_Init+0x33c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01f      	beq.n	8002ede <HAL_GPIO_Init+0x22e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a53      	ldr	r2, [pc, #332]	; (8002ff0 <HAL_GPIO_Init+0x340>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d019      	beq.n	8002eda <HAL_GPIO_Init+0x22a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_GPIO_Init+0x344>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_GPIO_Init+0x226>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a51      	ldr	r2, [pc, #324]	; (8002ff8 <HAL_GPIO_Init+0x348>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_GPIO_Init+0x222>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a50      	ldr	r2, [pc, #320]	; (8002ffc <HAL_GPIO_Init+0x34c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x21e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4f      	ldr	r2, [pc, #316]	; (8003000 <HAL_GPIO_Init+0x350>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d101      	bne.n	8002eca <HAL_GPIO_Init+0x21a>
 8002ec6:	2309      	movs	r3, #9
 8002ec8:	e012      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002eca:	230a      	movs	r3, #10
 8002ecc:	e010      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002ece:	2308      	movs	r3, #8
 8002ed0:	e00e      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x240>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x328>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a34      	ldr	r2, [pc, #208]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b32      	ldr	r3, [pc, #200]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a29      	ldr	r2, [pc, #164]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f86:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <HAL_GPIO_Init+0x354>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f ae86 	bls.w	8002cd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40021400 	.word	0x40021400
 8002ff4:	40021800 	.word	0x40021800
 8002ff8:	40021c00 	.word	0x40021c00
 8002ffc:	40022000 	.word	0x40022000
 8003000:	40022400 	.word	0x40022400
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
 8003014:	4613      	mov	r3, r2
 8003016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003024:	e003      	b.n	800302e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f976 	bl	800234c <HAL_GPIO_EXTI_Callback>
  }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40013c00 	.word	0x40013c00

0800306c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e291      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8087 	beq.w	800319e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003090:	4b96      	ldr	r3, [pc, #600]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b04      	cmp	r3, #4
 800309a:	d00c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309c:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d112      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
 80030a8:	4b90      	ldr	r3, [pc, #576]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b4:	d10b      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d06c      	beq.n	800319c <HAL_RCC_OscConfig+0x130>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d168      	bne.n	800319c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e26b      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x7a>
 80030d8:	4b84      	ldr	r3, [pc, #528]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a83      	ldr	r2, [pc, #524]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e02e      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x9c>
 80030ee:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7e      	ldr	r2, [pc, #504]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7b      	ldr	r2, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0xc0>
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a75      	ldr	r2, [pc, #468]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a72      	ldr	r2, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 800312c:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6b      	ldr	r2, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7ff fc00 	bl	8002950 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7ff fbfc 	bl	8002950 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e21f      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7ff fbec 	bl	8002950 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7ff fbe8 	bl	8002950 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e20b      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b57      	ldr	r3, [pc, #348]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x110>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d069      	beq.n	800327e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031aa:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x190>
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1df      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	493d      	ldr	r1, [pc, #244]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e040      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d023      	beq.n	800324c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7ff fb9e 	bl	8002950 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7ff fb9a 	bl	8002950 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1bd      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4929      	ldr	r1, [pc, #164]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
 800324a:	e018      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a26      	ldr	r2, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7ff fb7a 	bl	8002950 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7ff fb76 	bl	8002950 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e199      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d038      	beq.n	80032fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7ff fb57 	bl	8002950 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a6:	f7ff fb53 	bl	8002950 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e176      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x23a>
 80032c4:	e01a      	b.n	80032fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7ff fb3d 	bl	8002950 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032da:	f7ff fb39 	bl	8002950 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d903      	bls.n	80032f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e15c      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
 80032ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b91      	ldr	r3, [pc, #580]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a4 	beq.w	8003452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8b      	ldr	r3, [pc, #556]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7ff fb01 	bl	8002950 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7ff fafd 	bl	8002950 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	; 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e120      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b75      	ldr	r3, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x31a>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x33c>
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b67      	ldr	r3, [pc, #412]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a66      	ldr	r2, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x35e>
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a60      	ldr	r2, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b5e      	ldr	r3, [pc, #376]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7ff fab1 	bl	8002950 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7ff faad 	bl	8002950 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0ce      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x386>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7ff fa9b 	bl	8002950 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7ff fa97 	bl	8002950 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80a4 	beq.w	80035a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d06b      	beq.n	8003540 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d149      	bne.n	8003504 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a30      	ldr	r2, [pc, #192]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7ff fa68 	bl	8002950 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7ff fa64 	bl	8002950 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e087      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7ff fa38 	bl	8002950 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7ff fa34 	bl	8002950 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e057      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x478>
 8003502:	e04f      	b.n	80035a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff fa1e 	bl	8002950 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff fa1a 	bl	8002950 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e03d      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x4ac>
 8003536:	e035      	b.n	80035a4 <HAL_RCC_OscConfig+0x538>
 8003538:	40023800 	.word	0x40023800
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x544>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d121      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003576:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0d0      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	4965      	ldr	r1, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d040      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e073      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06b      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4936      	ldr	r1, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a8:	f7ff f952 	bl	8002950 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7ff f94e 	bl	8002950 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e053      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b2d      	ldr	r3, [pc, #180]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d210      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 020f 	bic.w	r2, r3, #15
 80036ee:	4922      	ldr	r1, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1cc>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1d0>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1d4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f8ae 	bl	80028c8 <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00
 800377c:	40023800 	.word	0x40023800
 8003780:	0800979c 	.word	0x0800979c
 8003784:	2000000c 	.word	0x2000000c
 8003788:	20000010 	.word	0x20000010

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b094      	sub	sp, #80	; 0x50
 8003792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	2300      	movs	r3, #0
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	2300      	movs	r3, #0
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f200 80e1 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037be:	e0db      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c4:	e0db      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCC_GetSysClockFreq+0x208>)
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ca:	e0d8      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
 80037fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4621      	mov	r1, r4
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	6139      	str	r1, [r7, #16]
 800381c:	4629      	mov	r1, r5
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	ebb2 0801 	subs.w	r8, r2, r1
 8003844:	4659      	mov	r1, fp
 8003846:	eb63 0901 	sbc.w	r9, r3, r1
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385e:	4690      	mov	r8, r2
 8003860:	4699      	mov	r9, r3
 8003862:	4623      	mov	r3, r4
 8003864:	eb18 0303 	adds.w	r3, r8, r3
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	462b      	mov	r3, r5
 800386c:	eb49 0303 	adc.w	r3, r9, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387e:	4629      	mov	r1, r5
 8003880:	024b      	lsls	r3, r1, #9
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003888:	4621      	mov	r1, r4
 800388a:	024a      	lsls	r2, r1, #9
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800389c:	f7fd f9a4 	bl	8000be8 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	e058      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	2200      	movs	r2, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	4611      	mov	r1, r2
 80038b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	f04f 0000 	mov.w	r0, #0
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	0159      	lsls	r1, r3, #5
 80038d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d6:	0150      	lsls	r0, r2, #5
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4641      	mov	r1, r8
 80038de:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e2:	4649      	mov	r1, r9
 80038e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003900:	eb63 050b 	sbc.w	r5, r3, fp
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	00eb      	lsls	r3, r5, #3
 800390e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003912:	00e2      	lsls	r2, r4, #3
 8003914:	4614      	mov	r4, r2
 8003916:	461d      	mov	r5, r3
 8003918:	4643      	mov	r3, r8
 800391a:	18e3      	adds	r3, r4, r3
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	464b      	mov	r3, r9
 8003920:	eb45 0303 	adc.w	r3, r5, r3
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003932:	4629      	mov	r1, r5
 8003934:	028b      	lsls	r3, r1, #10
 8003936:	4621      	mov	r1, r4
 8003938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800393c:	4621      	mov	r1, r4
 800393e:	028a      	lsls	r2, r1, #10
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	2200      	movs	r2, #0
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	61fa      	str	r2, [r7, #28]
 800394c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003950:	f7fd f94a 	bl	8000be8 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800396c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003980:	4618      	mov	r0, r3
 8003982:	3750      	adds	r7, #80	; 0x50
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	00f42400 	.word	0x00f42400
 8003994:	007a1200 	.word	0x007a1200

08003998 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000000c 	.word	0x2000000c

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	080097ac 	.word	0x080097ac

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	080097ac 	.word	0x080097ac

08003a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a32:	6093      	str	r3, [r2, #8]
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	4964      	ldr	r1, [pc, #400]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	4959      	ldr	r1, [pc, #356]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a96:	4b4e      	ldr	r3, [pc, #312]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	494a      	ldr	r1, [pc, #296]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 808b 	beq.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	4a39      	ldr	r2, [pc, #228]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	6413      	str	r3, [r2, #64]	; 0x40
 8003af0:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a34      	ldr	r2, [pc, #208]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b08:	f7fe ff22 	bl	8002950 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fe ff1e 	bl	8002950 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e357      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b22:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d035      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d02e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b4c:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d114      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe fee6 	bl	8002950 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe fee2 	bl	8002950 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e319      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ee      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	4901      	ldr	r1, [pc, #4]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	0ffffcff 	.word	0x0ffffcff
 8003bdc:	4baa      	ldr	r3, [pc, #680]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4aa9      	ldr	r2, [pc, #676]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003be6:	6093      	str	r3, [r2, #8]
 8003be8:	4ba7      	ldr	r3, [pc, #668]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	49a4      	ldr	r1, [pc, #656]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d010      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c06:	4ba0      	ldr	r3, [pc, #640]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0c:	4a9e      	ldr	r2, [pc, #632]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c16:	4b9c      	ldr	r3, [pc, #624]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	4999      	ldr	r1, [pc, #612]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c42:	4991      	ldr	r1, [pc, #580]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c56:	4b8c      	ldr	r3, [pc, #560]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c64:	4988      	ldr	r1, [pc, #544]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c78:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	4980      	ldr	r1, [pc, #512]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c9a:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	4977      	ldr	r1, [pc, #476]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cbc:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	496f      	ldr	r1, [pc, #444]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cde:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f023 020c 	bic.w	r2, r3, #12
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	4966      	ldr	r1, [pc, #408]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	495e      	ldr	r1, [pc, #376]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	4955      	ldr	r1, [pc, #340]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d44:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	494d      	ldr	r1, [pc, #308]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d66:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4944      	ldr	r1, [pc, #272]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	493c      	ldr	r1, [pc, #240]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	4933      	ldr	r1, [pc, #204]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	492b      	ldr	r1, [pc, #172]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfc:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3c:	4912      	ldr	r1, [pc, #72]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e60:	4909      	ldr	r1, [pc, #36]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d006      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80d9 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a01      	ldr	r2, [pc, #4]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e86:	e001      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8e:	f7fe fd5f 	bl	8002950 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e96:	f7fe fd5b 	bl	8002950 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e194      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea8:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d021      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec8:	4b64      	ldr	r3, [pc, #400]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed6:	4b61      	ldr	r3, [pc, #388]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003edc:	0e1b      	lsrs	r3, r3, #24
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	019a      	lsls	r2, r3, #6
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	071b      	lsls	r3, r3, #28
 8003efc:	4957      	ldr	r1, [pc, #348]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2e:	d129      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f30:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	0f1b      	lsrs	r3, r3, #28
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	019a      	lsls	r2, r3, #6
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	071b      	lsls	r3, r3, #28
 8003f64:	493d      	ldr	r1, [pc, #244]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f72:	f023 021f 	bic.w	r2, r3, #31
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	4937      	ldr	r1, [pc, #220]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f90:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	0e1b      	lsrs	r3, r3, #24
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa4:	0f1b      	lsrs	r3, r3, #28
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	019a      	lsls	r2, r3, #6
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	071b      	lsls	r3, r3, #28
 8003fc4:	4925      	ldr	r1, [pc, #148]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	019a      	lsls	r2, r3, #6
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	071b      	lsls	r3, r3, #28
 8003ff4:	4919      	ldr	r1, [pc, #100]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fe fca2 	bl	8002950 <HAL_GetTick>
 800400c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004010:	f7fe fc9e 	bl	8002950 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0d7      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 80cd 	bne.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fe fc85 	bl	8002950 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800404a:	f7fe fc81 	bl	8002950 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d903      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0ba      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800405c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004060:	4b5e      	ldr	r3, [pc, #376]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406c:	d0ed      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02e      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004096:	4b51      	ldr	r3, [pc, #324]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040a4:	4b4d      	ldr	r3, [pc, #308]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	0f1b      	lsrs	r3, r3, #28
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	4944      	ldr	r1, [pc, #272]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040d2:	4b42      	ldr	r3, [pc, #264]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	493d      	ldr	r1, [pc, #244]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d022      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004100:	d11d      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	0e1b      	lsrs	r3, r3, #24
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	0f1b      	lsrs	r3, r3, #28
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	019a      	lsls	r2, r3, #6
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	431a      	orrs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	4929      	ldr	r1, [pc, #164]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	0e1b      	lsrs	r3, r3, #24
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004158:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	019a      	lsls	r2, r3, #6
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	4917      	ldr	r1, [pc, #92]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	4911      	ldr	r1, [pc, #68]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fe fbd2 	bl	8002950 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b0:	f7fe fbce 	bl	8002950 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e007      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ce:	d1ef      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800

080041e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e09d      	b.n	800432e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d009      	beq.n	8004218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
 800420a:	e005      	b.n	8004218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fe f8dc 	bl	80023f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004258:	d902      	bls.n	8004260 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e002      	b.n	8004266 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004264:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800426e:	d007      	beq.n	8004280 <HAL_SPI_Init+0xa0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	ea42 0103 	orr.w	r1, r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	f003 0204 	and.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_SPI_Transmit+0x22>
 8004354:	2302      	movs	r3, #2
 8004356:	e158      	b.n	800460a <HAL_SPI_Transmit+0x2d4>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004360:	f7fe faf6 	bl	8002950 <HAL_GetTick>
 8004364:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
    goto error;
 800437a:	e13d      	b.n	80045f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_SPI_Transmit+0x52>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800438c:	e134      	b.n	80045f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d8:	d10f      	bne.n	80043fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d007      	beq.n	8004418 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004420:	d94b      	bls.n	80044ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_SPI_Transmit+0xfa>
 800442a:	8afb      	ldrh	r3, [r7, #22]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d13e      	bne.n	80044ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	1c9a      	adds	r2, r3, #2
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004454:	e02b      	b.n	80044ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d112      	bne.n	800448a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	881a      	ldrh	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	1c9a      	adds	r2, r3, #2
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004488:	e011      	b.n	80044ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448a:	f7fe fa61 	bl	8002950 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d803      	bhi.n	80044a2 <HAL_SPI_Transmit+0x16c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d102      	bne.n	80044a8 <HAL_SPI_Transmit+0x172>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044ac:	e0a4      	b.n	80045f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1ce      	bne.n	8004456 <HAL_SPI_Transmit+0x120>
 80044b8:	e07c      	b.n	80045b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Transmit+0x192>
 80044c2:	8afb      	ldrh	r3, [r7, #22]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d170      	bne.n	80045aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d912      	bls.n	80044f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	881a      	ldrh	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	1c9a      	adds	r2, r3, #2
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b02      	subs	r3, #2
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f6:	e058      	b.n	80045aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800451e:	e044      	b.n	80045aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d12b      	bne.n	8004586 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d912      	bls.n	800455e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b02      	subs	r3, #2
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455c:	e025      	b.n	80045aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004584:	e011      	b.n	80045aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004586:	f7fe f9e3 	bl	8002950 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d803      	bhi.n	800459e <HAL_SPI_Transmit+0x268>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d102      	bne.n	80045a4 <HAL_SPI_Transmit+0x26e>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045a8:	e026      	b.n	80045f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1b5      	bne.n	8004520 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fd15 	bl	8004fe8 <SPI_EndRxTxTransaction>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e000      	b.n	80045f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80045f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004608:	7ffb      	ldrb	r3, [r7, #31]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af02      	add	r7, sp, #8
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462e:	d112      	bne.n	8004656 <HAL_SPI_Receive+0x44>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10e      	bne.n	8004656 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2204      	movs	r2, #4
 800463c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f910 	bl	8004872 <HAL_SPI_TransmitReceive>
 8004652:	4603      	mov	r3, r0
 8004654:	e109      	b.n	800486a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_SPI_Receive+0x52>
 8004660:	2302      	movs	r3, #2
 8004662:	e102      	b.n	800486a <HAL_SPI_Receive+0x258>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800466c:	f7fe f970 	bl	8002950 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800467e:	2302      	movs	r3, #2
 8004680:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004682:	e0e9      	b.n	8004858 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_SPI_Receive+0x7e>
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004694:	e0e0      	b.n	8004858 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2204      	movs	r2, #4
 800469a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e0:	d908      	bls.n	80046f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	e007      	b.n	8004704 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470c:	d10f      	bne.n	800472e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800472c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d007      	beq.n	800474c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004754:	d867      	bhi.n	8004826 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004756:	e030      	b.n	80047ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d117      	bne.n	8004796 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f103 020c 	add.w	r2, r3, #12
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004794:	e011      	b.n	80047ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004796:	f7fe f8db 	bl	8002950 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d803      	bhi.n	80047ae <HAL_SPI_Receive+0x19c>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d102      	bne.n	80047b4 <HAL_SPI_Receive+0x1a2>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047b8:	e04e      	b.n	8004858 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1c8      	bne.n	8004758 <HAL_SPI_Receive+0x146>
 80047c6:	e034      	b.n	8004832 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d115      	bne.n	8004802 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	b292      	uxth	r2, r2
 80047e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	1c9a      	adds	r2, r3, #2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004800:	e011      	b.n	8004826 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004802:	f7fe f8a5 	bl	8002950 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d803      	bhi.n	800481a <HAL_SPI_Receive+0x208>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d102      	bne.n	8004820 <HAL_SPI_Receive+0x20e>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004824:	e018      	b.n	8004858 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ca      	bne.n	80047c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fb5a 	bl	8004ef0 <SPI_EndRxTransaction>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
 8004854:	e000      	b.n	8004858 <HAL_SPI_Receive+0x246>
  }

error :
 8004856:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004868:	7dfb      	ldrb	r3, [r7, #23]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	; 0x28
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x26>
 8004894:	2302      	movs	r3, #2
 8004896:	e1fb      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x41e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048a0:	f7fe f856 	bl	8002950 <HAL_GetTick>
 80048a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048bc:	7efb      	ldrb	r3, [r7, #27]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d00e      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x6e>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c8:	d106      	bne.n	80048d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_TransmitReceive+0x66>
 80048d2:	7efb      	ldrb	r3, [r7, #27]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d003      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048de:	e1cd      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x80>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x80>
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048f8:	e1c0      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b04      	cmp	r3, #4
 8004904:	d003      	beq.n	800490e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2205      	movs	r2, #5
 800490a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	887a      	ldrh	r2, [r7, #2]
 800491e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	887a      	ldrh	r2, [r7, #2]
 8004926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004950:	d802      	bhi.n	8004958 <HAL_SPI_TransmitReceive+0xe6>
 8004952:	8a3b      	ldrh	r3, [r7, #16]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d908      	bls.n	800496a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	e007      	b.n	800497a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d007      	beq.n	8004998 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049a0:	d97c      	bls.n	8004a9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x13e>
 80049aa:	8a7b      	ldrh	r3, [r7, #18]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d169      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	881a      	ldrh	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	1c9a      	adds	r2, r3, #2
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d4:	e056      	b.n	8004a84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d11b      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x1aa>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x1aa>
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d113      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d11c      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x1f2>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	b292      	uxth	r2, r2
 8004a42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a60:	2301      	movs	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a64:	f7fd ff74 	bl	8002950 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d807      	bhi.n	8004a84 <HAL_SPI_TransmitReceive+0x212>
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d003      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a82:	e0fb      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1a3      	bne.n	80049d6 <HAL_SPI_TransmitReceive+0x164>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d19d      	bne.n	80049d6 <HAL_SPI_TransmitReceive+0x164>
 8004a9a:	e0df      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x23a>
 8004aa4:	8a7b      	ldrh	r3, [r7, #18]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	f040 80cb 	bne.w	8004c42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d912      	bls.n	8004adc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b02      	subs	r3, #2
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ada:	e0b2      	b.n	8004c42 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b02:	e09e      	b.n	8004c42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d134      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x30a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d02f      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x30a>
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d12c      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d912      	bls.n	8004b52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b02      	subs	r3, #2
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b50:	e012      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d148      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x3aa>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d042      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d923      	bls.n	8004bea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	b292      	uxth	r2, r2
 8004bae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b02      	subs	r3, #2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d81f      	bhi.n	8004c18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	e016      	b.n	8004c18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f103 020c 	add.w	r2, r3, #12
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c1c:	f7fd fe98 	bl	8002950 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d803      	bhi.n	8004c34 <HAL_SPI_TransmitReceive+0x3c2>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_TransmitReceive+0x3c8>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c40:	e01c      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f47f af5b 	bne.w	8004b04 <HAL_SPI_TransmitReceive+0x292>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f47f af54 	bne.w	8004b04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f9c1 	bl	8004fe8 <SPI_EndRxTxTransaction>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
 8004c78:	e000      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ca6:	b2db      	uxtb	r3, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cc4:	f7fd fe44 	bl	8002950 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cd4:	f7fd fe3c 	bl	8002950 <HAL_GetTick>
 8004cd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	015b      	lsls	r3, r3, #5
 8004ce0:	0d1b      	lsrs	r3, r3, #20
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cea:	e054      	b.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d050      	beq.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cf4:	f7fd fe2c 	bl	8002950 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d902      	bls.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d13d      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d22:	d111      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d004      	beq.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d107      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d10f      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e017      	b.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d19b      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000000c 	.word	0x2000000c

08004dc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dd6:	f7fd fdbb 	bl	8002950 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	4413      	add	r3, r2
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004de6:	f7fd fdb3 	bl	8002950 <HAL_GetTick>
 8004dea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004df4:	4b3d      	ldr	r3, [pc, #244]	; (8004eec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00da      	lsls	r2, r3, #3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	0d1b      	lsrs	r3, r3, #20
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e0c:	e060      	b.n	8004ed0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e14:	d107      	bne.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d050      	beq.n	8004ed0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e2e:	f7fd fd8f 	bl	8002950 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d902      	bls.n	8004e44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d13d      	bne.n	8004ec0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5c:	d111      	bne.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e66:	d004      	beq.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e70:	d107      	bne.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8a:	d10f      	bne.n	8004eac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e010      	b.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d196      	bne.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	; 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c

08004ef0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f04:	d111      	bne.n	8004f2a <SPI_EndRxTransaction+0x3a>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0e:	d004      	beq.n	8004f1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f18:	d107      	bne.n	8004f2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d112      	bne.n	8004f5a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff feb8 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d021      	beq.n	8004f8e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e03d      	b.n	8004fd6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <SPI_EndRxTransaction+0xf0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <SPI_EndRxTransaction+0xf4>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0d5b      	lsrs	r3, r3, #21
 8004f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b80      	cmp	r3, #128	; 0x80
 8004f88:	d0f2      	beq.n	8004f70 <SPI_EndRxTransaction+0x80>
 8004f8a:	e000      	b.n	8004f8e <SPI_EndRxTransaction+0x9e>
        break;
 8004f8c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f96:	d11d      	bne.n	8004fd4 <SPI_EndRxTransaction+0xe4>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa0:	d004      	beq.n	8004fac <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004faa:	d113      	bne.n	8004fd4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff ff03 	bl	8004dc4 <SPI_WaitFifoStateUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e000      	b.n	8004fd6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2000000c 	.word	0x2000000c
 8004fe4:	165e9f81 	.word	0x165e9f81

08004fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff fedf 	bl	8004dc4 <SPI_WaitFifoStateUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e046      	b.n	80050aa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800501c:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <SPI_EndRxTxTransaction+0xcc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <SPI_EndRxTxTransaction+0xd0>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	0d5b      	lsrs	r3, r3, #21
 8005028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503a:	d112      	bne.n	8005062 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff fe34 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e023      	b.n	80050aa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3b01      	subs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	d0f2      	beq.n	8005062 <SPI_EndRxTxTransaction+0x7a>
 800507c:	e000      	b.n	8005080 <SPI_EndRxTxTransaction+0x98>
        break;
 800507e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fe99 	bl	8004dc4 <SPI_WaitFifoStateUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e000      	b.n	80050aa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000000c 	.word	0x2000000c
 80050b8:	165e9f81 	.word	0x165e9f81

080050bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e040      	b.n	8005150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fd fb32 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fbe6 	bl	80058cc <UART_SetConfig>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e022      	b.n	8005150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fe3e 	bl	8005d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fec5 	bl	8005ed8 <UART_CheckIdleState>
 800514e:	4603      	mov	r3, r0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516c:	2b20      	cmp	r3, #32
 800516e:	d171      	bne.n	8005254 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_UART_Transmit+0x24>
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e06a      	b.n	8005256 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2221      	movs	r2, #33	; 0x21
 800518c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518e:	f7fd fbdf 	bl	8002950 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d108      	bne.n	80051c0 <HAL_UART_Transmit+0x68>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e003      	b.n	80051c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051c8:	e02c      	b.n	8005224 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 feb6 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e038      	b.n	8005256 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3302      	adds	r3, #2
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e007      	b.n	8005212 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1cc      	bne.n	80051ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fe83 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e005      	b.n	8005256 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	e000      	b.n	8005256 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005254:	2302      	movs	r3, #2
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b08a      	sub	sp, #40	; 0x28
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005272:	2b20      	cmp	r3, #32
 8005274:	d132      	bne.n	80052dc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_UART_Receive_IT+0x24>
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e02b      	b.n	80052de <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	613b      	str	r3, [r7, #16]
   return(result);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e6      	bne.n	800529a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fefe 	bl	80060d4 <UART_Start_Receive_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	e000      	b.n	80052de <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b0ba      	sub	sp, #232	; 0xe8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800530e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005312:	f640 030f 	movw	r3, #2063	; 0x80f
 8005316:	4013      	ands	r3, r2
 8005318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800531c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d115      	bne.n	8005350 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00f      	beq.n	8005350 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8297 	beq.w	8005874 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
      }
      return;
 800534e:	e291      	b.n	8005874 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8117 	beq.w	8005588 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800535a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_UART_IRQHandler+0x298>)
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 810a 	beq.w	8005588 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d011      	beq.n	80053a4 <HAL_UART_IRQHandler+0xbc>
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2201      	movs	r2, #1
 8005392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <HAL_UART_IRQHandler+0xec>
 80053b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2202      	movs	r2, #2
 80053c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <HAL_UART_IRQHandler+0x11c>
 80053e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2204      	movs	r2, #4
 80053f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fa:	f043 0202 	orr.w	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d017      	beq.n	8005440 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800541c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00b      	beq.n	8005440 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005436:	f043 0208 	orr.w	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <HAL_UART_IRQHandler+0x18a>
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00c      	beq.n	8005472 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 81fd 	beq.w	8005878 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04f      	beq.n	800556a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fec8 	bl	8006260 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d141      	bne.n	8005562 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800550a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800550e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	4a13      	ldr	r2, [pc, #76]	; (8005584 <HAL_UART_IRQHandler+0x29c>)
 8005538:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd fb93 	bl	8002c6a <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e00f      	b.n	800557a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9a0 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	e00b      	b.n	800557a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f99c 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e007      	b.n	800557a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f998 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005578:	e17e      	b.n	8005878 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557a:	bf00      	nop
    return;
 800557c:	e17c      	b.n	8005878 <HAL_UART_IRQHandler+0x590>
 800557e:	bf00      	nop
 8005580:	04000120 	.word	0x04000120
 8005584:	08006329 	.word	0x08006329

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 814c 	bne.w	800582a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8145 	beq.w	800582a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 813e 	beq.w	800582a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2210      	movs	r2, #16
 80055b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	f040 80b6 	bne.w	8005732 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8150 	beq.w	800587c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055e6:	429a      	cmp	r2, r3
 80055e8:	f080 8148 	bcs.w	800587c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005600:	f000 8086 	beq.w	8005710 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800561c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800562e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005632:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800563a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1da      	bne.n	8005604 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800565e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005672:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005676:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800567a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e1      	bne.n	800564e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800569a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e3      	bne.n	800568a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	f023 0310 	bic.w	r3, r3, #16
 80056e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e4      	bne.n	80056d0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd fa3d 	bl	8002b8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005722:	b29b      	uxth	r3, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	b29b      	uxth	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f8c2 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005730:	e0a4      	b.n	800587c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800573e:	b29b      	uxth	r3, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8096 	beq.w	8005880 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8091 	beq.w	8005880 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005780:	647b      	str	r3, [r7, #68]	; 0x44
 8005782:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e4      	bne.n	800575e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3308      	adds	r3, #8
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	623b      	str	r3, [r7, #32]
   return(result);
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057b8:	633a      	str	r2, [r7, #48]	; 0x30
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e3      	bne.n	8005794 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	617b      	str	r3, [r7, #20]
   return(result);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e4      	bne.n	80057e0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f846 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005828:	e02a      	b.n	8005880 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01c      	beq.n	8005884 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
    }
    return;
 8005852:	e017      	b.n	8005884 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_UART_IRQHandler+0x59e>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fd71 	bl	8006354 <UART_EndTransmit_IT>
    return;
 8005872:	e008      	b.n	8005886 <HAL_UART_IRQHandler+0x59e>
      return;
 8005874:	bf00      	nop
 8005876:	e006      	b.n	8005886 <HAL_UART_IRQHandler+0x59e>
    return;
 8005878:	bf00      	nop
 800587a:	e004      	b.n	8005886 <HAL_UART_IRQHandler+0x59e>
      return;
 800587c:	bf00      	nop
 800587e:	e002      	b.n	8005886 <HAL_UART_IRQHandler+0x59e>
      return;
 8005880:	bf00      	nop
 8005882:	e000      	b.n	8005886 <HAL_UART_IRQHandler+0x59e>
    return;
 8005884:	bf00      	nop
  }

}
 8005886:	37e8      	adds	r7, #232	; 0xe8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4ba6      	ldr	r3, [pc, #664]	; (8005b90 <UART_SetConfig+0x2c4>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	6979      	ldr	r1, [r7, #20]
 8005900:	430b      	orrs	r3, r1
 8005902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a94      	ldr	r2, [pc, #592]	; (8005b94 <UART_SetConfig+0x2c8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d120      	bne.n	800598a <UART_SetConfig+0xbe>
 8005948:	4b93      	ldr	r3, [pc, #588]	; (8005b98 <UART_SetConfig+0x2cc>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b03      	cmp	r3, #3
 8005954:	d816      	bhi.n	8005984 <UART_SetConfig+0xb8>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0x90>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	0800596d 	.word	0x0800596d
 8005960:	08005979 	.word	0x08005979
 8005964:	08005973 	.word	0x08005973
 8005968:	0800597f 	.word	0x0800597f
 800596c:	2301      	movs	r3, #1
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e150      	b.n	8005c14 <UART_SetConfig+0x348>
 8005972:	2302      	movs	r3, #2
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e14d      	b.n	8005c14 <UART_SetConfig+0x348>
 8005978:	2304      	movs	r3, #4
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e14a      	b.n	8005c14 <UART_SetConfig+0x348>
 800597e:	2308      	movs	r3, #8
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e147      	b.n	8005c14 <UART_SetConfig+0x348>
 8005984:	2310      	movs	r3, #16
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e144      	b.n	8005c14 <UART_SetConfig+0x348>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a83      	ldr	r2, [pc, #524]	; (8005b9c <UART_SetConfig+0x2d0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d132      	bne.n	80059fa <UART_SetConfig+0x12e>
 8005994:	4b80      	ldr	r3, [pc, #512]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d828      	bhi.n	80059f4 <UART_SetConfig+0x128>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0xdc>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059dd 	.word	0x080059dd
 80059ac:	080059f5 	.word	0x080059f5
 80059b0:	080059f5 	.word	0x080059f5
 80059b4:	080059f5 	.word	0x080059f5
 80059b8:	080059e9 	.word	0x080059e9
 80059bc:	080059f5 	.word	0x080059f5
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	080059f5 	.word	0x080059f5
 80059c8:	080059e3 	.word	0x080059e3
 80059cc:	080059f5 	.word	0x080059f5
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059f5 	.word	0x080059f5
 80059d8:	080059ef 	.word	0x080059ef
 80059dc:	2300      	movs	r3, #0
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e118      	b.n	8005c14 <UART_SetConfig+0x348>
 80059e2:	2302      	movs	r3, #2
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	e115      	b.n	8005c14 <UART_SetConfig+0x348>
 80059e8:	2304      	movs	r3, #4
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e112      	b.n	8005c14 <UART_SetConfig+0x348>
 80059ee:	2308      	movs	r3, #8
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e10f      	b.n	8005c14 <UART_SetConfig+0x348>
 80059f4:	2310      	movs	r3, #16
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e10c      	b.n	8005c14 <UART_SetConfig+0x348>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a68      	ldr	r2, [pc, #416]	; (8005ba0 <UART_SetConfig+0x2d4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d120      	bne.n	8005a46 <UART_SetConfig+0x17a>
 8005a04:	4b64      	ldr	r3, [pc, #400]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a0e:	2b30      	cmp	r3, #48	; 0x30
 8005a10:	d013      	beq.n	8005a3a <UART_SetConfig+0x16e>
 8005a12:	2b30      	cmp	r3, #48	; 0x30
 8005a14:	d814      	bhi.n	8005a40 <UART_SetConfig+0x174>
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d009      	beq.n	8005a2e <UART_SetConfig+0x162>
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d810      	bhi.n	8005a40 <UART_SetConfig+0x174>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <UART_SetConfig+0x15c>
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d006      	beq.n	8005a34 <UART_SetConfig+0x168>
 8005a26:	e00b      	b.n	8005a40 <UART_SetConfig+0x174>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e0f2      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e0ef      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a34:	2304      	movs	r3, #4
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e0ec      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	e0e9      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a40:	2310      	movs	r3, #16
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e0e6      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a56      	ldr	r2, [pc, #344]	; (8005ba4 <UART_SetConfig+0x2d8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d120      	bne.n	8005a92 <UART_SetConfig+0x1c6>
 8005a50:	4b51      	ldr	r3, [pc, #324]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a5c:	d013      	beq.n	8005a86 <UART_SetConfig+0x1ba>
 8005a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a60:	d814      	bhi.n	8005a8c <UART_SetConfig+0x1c0>
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d009      	beq.n	8005a7a <UART_SetConfig+0x1ae>
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d810      	bhi.n	8005a8c <UART_SetConfig+0x1c0>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <UART_SetConfig+0x1a8>
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d006      	beq.n	8005a80 <UART_SetConfig+0x1b4>
 8005a72:	e00b      	b.n	8005a8c <UART_SetConfig+0x1c0>
 8005a74:	2300      	movs	r3, #0
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e0cc      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e0c9      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a80:	2304      	movs	r3, #4
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e0c6      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a86:	2308      	movs	r3, #8
 8005a88:	77fb      	strb	r3, [r7, #31]
 8005a8a:	e0c3      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e0c0      	b.n	8005c14 <UART_SetConfig+0x348>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a44      	ldr	r2, [pc, #272]	; (8005ba8 <UART_SetConfig+0x2dc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d125      	bne.n	8005ae8 <UART_SetConfig+0x21c>
 8005a9c:	4b3e      	ldr	r3, [pc, #248]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aaa:	d017      	beq.n	8005adc <UART_SetConfig+0x210>
 8005aac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab0:	d817      	bhi.n	8005ae2 <UART_SetConfig+0x216>
 8005ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab6:	d00b      	beq.n	8005ad0 <UART_SetConfig+0x204>
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005abc:	d811      	bhi.n	8005ae2 <UART_SetConfig+0x216>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <UART_SetConfig+0x1fe>
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac6:	d006      	beq.n	8005ad6 <UART_SetConfig+0x20a>
 8005ac8:	e00b      	b.n	8005ae2 <UART_SetConfig+0x216>
 8005aca:	2300      	movs	r3, #0
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e0a1      	b.n	8005c14 <UART_SetConfig+0x348>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e09e      	b.n	8005c14 <UART_SetConfig+0x348>
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e09b      	b.n	8005c14 <UART_SetConfig+0x348>
 8005adc:	2308      	movs	r3, #8
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e098      	b.n	8005c14 <UART_SetConfig+0x348>
 8005ae2:	2310      	movs	r3, #16
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e095      	b.n	8005c14 <UART_SetConfig+0x348>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <UART_SetConfig+0x2e0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d125      	bne.n	8005b3e <UART_SetConfig+0x272>
 8005af2:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005afc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b00:	d017      	beq.n	8005b32 <UART_SetConfig+0x266>
 8005b02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b06:	d817      	bhi.n	8005b38 <UART_SetConfig+0x26c>
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0c:	d00b      	beq.n	8005b26 <UART_SetConfig+0x25a>
 8005b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b12:	d811      	bhi.n	8005b38 <UART_SetConfig+0x26c>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <UART_SetConfig+0x254>
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1c:	d006      	beq.n	8005b2c <UART_SetConfig+0x260>
 8005b1e:	e00b      	b.n	8005b38 <UART_SetConfig+0x26c>
 8005b20:	2301      	movs	r3, #1
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e076      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b26:	2302      	movs	r3, #2
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e073      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e070      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b32:	2308      	movs	r3, #8
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e06d      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e06a      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <UART_SetConfig+0x2e4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d138      	bne.n	8005bba <UART_SetConfig+0x2ee>
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <UART_SetConfig+0x2cc>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b56:	d017      	beq.n	8005b88 <UART_SetConfig+0x2bc>
 8005b58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b5c:	d82a      	bhi.n	8005bb4 <UART_SetConfig+0x2e8>
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b62:	d00b      	beq.n	8005b7c <UART_SetConfig+0x2b0>
 8005b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b68:	d824      	bhi.n	8005bb4 <UART_SetConfig+0x2e8>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <UART_SetConfig+0x2aa>
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b72:	d006      	beq.n	8005b82 <UART_SetConfig+0x2b6>
 8005b74:	e01e      	b.n	8005bb4 <UART_SetConfig+0x2e8>
 8005b76:	2300      	movs	r3, #0
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e04b      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e048      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b82:	2304      	movs	r3, #4
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e045      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e042      	b.n	8005c14 <UART_SetConfig+0x348>
 8005b8e:	bf00      	nop
 8005b90:	efff69f3 	.word	0xefff69f3
 8005b94:	40011000 	.word	0x40011000
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	40004400 	.word	0x40004400
 8005ba0:	40004800 	.word	0x40004800
 8005ba4:	40004c00 	.word	0x40004c00
 8005ba8:	40005000 	.word	0x40005000
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	40007800 	.word	0x40007800
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e02c      	b.n	8005c14 <UART_SetConfig+0x348>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a72      	ldr	r2, [pc, #456]	; (8005d88 <UART_SetConfig+0x4bc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d125      	bne.n	8005c10 <UART_SetConfig+0x344>
 8005bc4:	4b71      	ldr	r3, [pc, #452]	; (8005d8c <UART_SetConfig+0x4c0>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bd2:	d017      	beq.n	8005c04 <UART_SetConfig+0x338>
 8005bd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bd8:	d817      	bhi.n	8005c0a <UART_SetConfig+0x33e>
 8005bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bde:	d00b      	beq.n	8005bf8 <UART_SetConfig+0x32c>
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d811      	bhi.n	8005c0a <UART_SetConfig+0x33e>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <UART_SetConfig+0x326>
 8005bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bee:	d006      	beq.n	8005bfe <UART_SetConfig+0x332>
 8005bf0:	e00b      	b.n	8005c0a <UART_SetConfig+0x33e>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	77fb      	strb	r3, [r7, #31]
 8005bf6:	e00d      	b.n	8005c14 <UART_SetConfig+0x348>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e00a      	b.n	8005c14 <UART_SetConfig+0x348>
 8005bfe:	2304      	movs	r3, #4
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e007      	b.n	8005c14 <UART_SetConfig+0x348>
 8005c04:	2308      	movs	r3, #8
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e004      	b.n	8005c14 <UART_SetConfig+0x348>
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e001      	b.n	8005c14 <UART_SetConfig+0x348>
 8005c10:	2310      	movs	r3, #16
 8005c12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1c:	d15b      	bne.n	8005cd6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c1e:	7ffb      	ldrb	r3, [r7, #31]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d828      	bhi.n	8005c76 <UART_SetConfig+0x3aa>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x360>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	08005c77 	.word	0x08005c77
 8005c3c:	08005c67 	.word	0x08005c67
 8005c40:	08005c77 	.word	0x08005c77
 8005c44:	08005c77 	.word	0x08005c77
 8005c48:	08005c77 	.word	0x08005c77
 8005c4c:	08005c6f 	.word	0x08005c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fd feae 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8005c54:	61b8      	str	r0, [r7, #24]
        break;
 8005c56:	e013      	b.n	8005c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fd febe 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	61b8      	str	r0, [r7, #24]
        break;
 8005c5e:	e00f      	b.n	8005c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b4b      	ldr	r3, [pc, #300]	; (8005d90 <UART_SetConfig+0x4c4>)
 8005c62:	61bb      	str	r3, [r7, #24]
        break;
 8005c64:	e00c      	b.n	8005c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c66:	f7fd fd91 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8005c6a:	61b8      	str	r0, [r7, #24]
        break;
 8005c6c:	e008      	b.n	8005c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	61bb      	str	r3, [r7, #24]
        break;
 8005c74:	e004      	b.n	8005c80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d074      	beq.n	8005d70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	005a      	lsls	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	441a      	add	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d916      	bls.n	8005cd0 <UART_SetConfig+0x404>
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d212      	bcs.n	8005cd0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f023 030f 	bic.w	r3, r3, #15
 8005cb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	89fa      	ldrh	r2, [r7, #14]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	e04f      	b.n	8005d70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77bb      	strb	r3, [r7, #30]
 8005cd4:	e04c      	b.n	8005d70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d828      	bhi.n	8005d2e <UART_SetConfig+0x462>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0x418>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	08005d2f 	.word	0x08005d2f
 8005cf4:	08005d1f 	.word	0x08005d1f
 8005cf8:	08005d2f 	.word	0x08005d2f
 8005cfc:	08005d2f 	.word	0x08005d2f
 8005d00:	08005d2f 	.word	0x08005d2f
 8005d04:	08005d27 	.word	0x08005d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d08:	f7fd fe52 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	61b8      	str	r0, [r7, #24]
        break;
 8005d0e:	e013      	b.n	8005d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d10:	f7fd fe62 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8005d14:	61b8      	str	r0, [r7, #24]
        break;
 8005d16:	e00f      	b.n	8005d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d18:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <UART_SetConfig+0x4c4>)
 8005d1a:	61bb      	str	r3, [r7, #24]
        break;
 8005d1c:	e00c      	b.n	8005d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1e:	f7fd fd35 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8005d22:	61b8      	str	r0, [r7, #24]
        break;
 8005d24:	e008      	b.n	8005d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2a:	61bb      	str	r3, [r7, #24]
        break;
 8005d2c:	e004      	b.n	8005d38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	77bb      	strb	r3, [r7, #30]
        break;
 8005d36:	bf00      	nop
    }

    if (pclk != 0U)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d018      	beq.n	8005d70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	085a      	lsrs	r2, r3, #1
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	441a      	add	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b0f      	cmp	r3, #15
 8005d56:	d909      	bls.n	8005d6c <UART_SetConfig+0x4a0>
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5e:	d205      	bcs.n	8005d6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	e001      	b.n	8005d70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40007c00 	.word	0x40007c00
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	00f42400 	.word	0x00f42400

08005d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e92:	d10a      	bne.n	8005eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee8:	f7fc fd32 	bl	8002950 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d10e      	bne.n	8005f1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f81b 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e011      	b.n	8005f3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b09c      	sub	sp, #112	; 0x70
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	e0a7      	b.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	f000 80a3 	beq.w	80060a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fc fcf5 	bl	8002950 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d13f      	bne.n	8005ff8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e068      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d050      	beq.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006014:	d148      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800601e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
 8006040:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	613b      	str	r3, [r7, #16]
   return(result);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	66bb      	str	r3, [r7, #104]	; 0x68
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006072:	623a      	str	r2, [r7, #32]
 8006074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	69f9      	ldr	r1, [r7, #28]
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e5      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e010      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69da      	ldr	r2, [r3, #28]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	f43f af48 	beq.w	8005f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3770      	adds	r7, #112	; 0x70
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b097      	sub	sp, #92	; 0x5c
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	88fa      	ldrh	r2, [r7, #6]
 80060ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	88fa      	ldrh	r2, [r7, #6]
 80060f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d10e      	bne.n	8006126 <UART_Start_Receive_IT+0x52>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <UART_Start_Receive_IT+0x48>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006116:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800611a:	e02d      	b.n	8006178 <UART_Start_Receive_IT+0xa4>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006124:	e028      	b.n	8006178 <UART_Start_Receive_IT+0xa4>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <UART_Start_Receive_IT+0x76>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d104      	bne.n	8006140 <UART_Start_Receive_IT+0x6c>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800613e:	e01b      	b.n	8006178 <UART_Start_Receive_IT+0xa4>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	227f      	movs	r2, #127	; 0x7f
 8006144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006148:	e016      	b.n	8006178 <UART_Start_Receive_IT+0xa4>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006152:	d10d      	bne.n	8006170 <UART_Start_Receive_IT+0x9c>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <UART_Start_Receive_IT+0x92>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	227f      	movs	r2, #127	; 0x7f
 8006160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006164:	e008      	b.n	8006178 <UART_Start_Receive_IT+0xa4>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	223f      	movs	r2, #63	; 0x3f
 800616a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800616e:	e003      	b.n	8006178 <UART_Start_Receive_IT+0xa4>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2222      	movs	r2, #34	; 0x22
 8006184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3308      	adds	r3, #8
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	657b      	str	r3, [r7, #84]	; 0x54
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e5      	bne.n	8006188 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c4:	d107      	bne.n	80061d6 <UART_Start_Receive_IT+0x102>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a21      	ldr	r2, [pc, #132]	; (8006258 <UART_Start_Receive_IT+0x184>)
 80061d2:	669a      	str	r2, [r3, #104]	; 0x68
 80061d4:	e002      	b.n	80061dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a20      	ldr	r2, [pc, #128]	; (800625c <UART_Start_Receive_IT+0x188>)
 80061da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d019      	beq.n	8006218 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80061f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
 8006204:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_Start_Receive_IT+0x110>
 8006216:	e018      	b.n	800624a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	613b      	str	r3, [r7, #16]
   return(result);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f043 0320 	orr.w	r3, r3, #32
 800622c:	653b      	str	r3, [r7, #80]	; 0x50
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006236:	623b      	str	r3, [r7, #32]
 8006238:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	61bb      	str	r3, [r7, #24]
   return(result);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e6      	bne.n	8006218 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	375c      	adds	r7, #92	; 0x5c
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	0800650f 	.word	0x0800650f
 800625c:	080063a9 	.word	0x080063a9

08006260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b095      	sub	sp, #84	; 0x54
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006286:	643b      	str	r3, [r7, #64]	; 0x40
 8006288:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800628c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d118      	bne.n	8006308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0310 	bic.w	r3, r3, #16
 80062ea:	647b      	str	r3, [r7, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6979      	ldr	r1, [r7, #20]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e6      	bne.n	80062d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800631c:	bf00      	nop
 800631e:	3754      	adds	r7, #84	; 0x54
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff faaa 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	60bb      	str	r3, [r7, #8]
   return(result);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	613b      	str	r3, [r7, #16]
   return(result);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e6      	bne.n	800635c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fa76 	bl	800588c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a0:	bf00      	nop
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b096      	sub	sp, #88	; 0x58
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c0:	2b22      	cmp	r3, #34	; 0x22
 80063c2:	f040 8098 	bne.w	80064f6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	400a      	ands	r2, r1
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d17b      	bne.n	8006506 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006422:	653b      	str	r3, [r7, #80]	; 0x50
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642c:	647b      	str	r3, [r7, #68]	; 0x44
 800642e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	623b      	str	r3, [r7, #32]
   return(result);
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006460:	633a      	str	r2, [r7, #48]	; 0x30
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e5      	bne.n	8006440 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	2b01      	cmp	r3, #1
 800648e:	d12e      	bne.n	80064ee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0310 	bic.w	r3, r3, #16
 80064aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	69b9      	ldr	r1, [r7, #24]
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	617b      	str	r3, [r7, #20]
   return(result);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d103      	bne.n	80064de <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff f9e4 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064ec:	e00b      	b.n	8006506 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb ff18 	bl	8002324 <HAL_UART_RxCpltCallback>
}
 80064f4:	e007      	b.n	8006506 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0208 	orr.w	r2, r2, #8
 8006504:	619a      	str	r2, [r3, #24]
}
 8006506:	bf00      	nop
 8006508:	3758      	adds	r7, #88	; 0x58
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b096      	sub	sp, #88	; 0x58
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800651c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006526:	2b22      	cmp	r3, #34	; 0x22
 8006528:	f040 8098 	bne.w	800665c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800653c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006540:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006544:	4013      	ands	r3, r2
 8006546:	b29a      	uxth	r2, r3
 8006548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006550:	1c9a      	adds	r2, r3, #2
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d17b      	bne.n	800666c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006592:	643b      	str	r3, [r7, #64]	; 0x40
 8006594:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d12e      	bne.n	8006654 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	60bb      	str	r3, [r7, #8]
   return(result);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0310 	bic.w	r3, r3, #16
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	613b      	str	r3, [r7, #16]
   return(result);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e6      	bne.n	80065fc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b10      	cmp	r3, #16
 800663a:	d103      	bne.n	8006644 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2210      	movs	r2, #16
 8006642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff f931 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006652:	e00b      	b.n	800666c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fb fe65 	bl	8002324 <HAL_UART_RxCpltCallback>
}
 800665a:	e007      	b.n	800666c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0208 	orr.w	r2, r2, #8
 800666a:	619a      	str	r2, [r3, #24]
}
 800666c:	bf00      	nop
 800666e:	3758      	adds	r7, #88	; 0x58
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <__errno>:
 8006674:	4b01      	ldr	r3, [pc, #4]	; (800667c <__errno+0x8>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000018 	.word	0x20000018

08006680 <__libc_init_array>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4d0d      	ldr	r5, [pc, #52]	; (80066b8 <__libc_init_array+0x38>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	; (80066bc <__libc_init_array+0x3c>)
 8006686:	1b64      	subs	r4, r4, r5
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	2600      	movs	r6, #0
 800668c:	42a6      	cmp	r6, r4
 800668e:	d109      	bne.n	80066a4 <__libc_init_array+0x24>
 8006690:	4d0b      	ldr	r5, [pc, #44]	; (80066c0 <__libc_init_array+0x40>)
 8006692:	4c0c      	ldr	r4, [pc, #48]	; (80066c4 <__libc_init_array+0x44>)
 8006694:	f002 ff4e 	bl	8009534 <_init>
 8006698:	1b64      	subs	r4, r4, r5
 800669a:	10a4      	asrs	r4, r4, #2
 800669c:	2600      	movs	r6, #0
 800669e:	42a6      	cmp	r6, r4
 80066a0:	d105      	bne.n	80066ae <__libc_init_array+0x2e>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a8:	4798      	blx	r3
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7ee      	b.n	800668c <__libc_init_array+0xc>
 80066ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b2:	4798      	blx	r3
 80066b4:	3601      	adds	r6, #1
 80066b6:	e7f2      	b.n	800669e <__libc_init_array+0x1e>
 80066b8:	08009b94 	.word	0x08009b94
 80066bc:	08009b94 	.word	0x08009b94
 80066c0:	08009b94 	.word	0x08009b94
 80066c4:	08009b98 	.word	0x08009b98

080066c8 <malloc>:
 80066c8:	4b02      	ldr	r3, [pc, #8]	; (80066d4 <malloc+0xc>)
 80066ca:	4601      	mov	r1, r0
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	f000 b89d 	b.w	800680c <_malloc_r>
 80066d2:	bf00      	nop
 80066d4:	20000018 	.word	0x20000018

080066d8 <free>:
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <free+0xc>)
 80066da:	4601      	mov	r1, r0
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	f000 b829 	b.w	8006734 <_free_r>
 80066e2:	bf00      	nop
 80066e4:	20000018 	.word	0x20000018

080066e8 <memcmp>:
 80066e8:	b510      	push	{r4, lr}
 80066ea:	3901      	subs	r1, #1
 80066ec:	4402      	add	r2, r0
 80066ee:	4290      	cmp	r0, r2
 80066f0:	d101      	bne.n	80066f6 <memcmp+0xe>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e005      	b.n	8006702 <memcmp+0x1a>
 80066f6:	7803      	ldrb	r3, [r0, #0]
 80066f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d001      	beq.n	8006704 <memcmp+0x1c>
 8006700:	1b18      	subs	r0, r3, r4
 8006702:	bd10      	pop	{r4, pc}
 8006704:	3001      	adds	r0, #1
 8006706:	e7f2      	b.n	80066ee <memcmp+0x6>

08006708 <memcpy>:
 8006708:	440a      	add	r2, r1
 800670a:	4291      	cmp	r1, r2
 800670c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006710:	d100      	bne.n	8006714 <memcpy+0xc>
 8006712:	4770      	bx	lr
 8006714:	b510      	push	{r4, lr}
 8006716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800671a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800671e:	4291      	cmp	r1, r2
 8006720:	d1f9      	bne.n	8006716 <memcpy+0xe>
 8006722:	bd10      	pop	{r4, pc}

08006724 <memset>:
 8006724:	4402      	add	r2, r0
 8006726:	4603      	mov	r3, r0
 8006728:	4293      	cmp	r3, r2
 800672a:	d100      	bne.n	800672e <memset+0xa>
 800672c:	4770      	bx	lr
 800672e:	f803 1b01 	strb.w	r1, [r3], #1
 8006732:	e7f9      	b.n	8006728 <memset+0x4>

08006734 <_free_r>:
 8006734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006736:	2900      	cmp	r1, #0
 8006738:	d044      	beq.n	80067c4 <_free_r+0x90>
 800673a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673e:	9001      	str	r0, [sp, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f1a1 0404 	sub.w	r4, r1, #4
 8006746:	bfb8      	it	lt
 8006748:	18e4      	addlt	r4, r4, r3
 800674a:	f001 fc1f 	bl	8007f8c <__malloc_lock>
 800674e:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <_free_r+0x94>)
 8006750:	9801      	ldr	r0, [sp, #4]
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	b933      	cbnz	r3, 8006764 <_free_r+0x30>
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	6014      	str	r4, [r2, #0]
 800675a:	b003      	add	sp, #12
 800675c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006760:	f001 bc1a 	b.w	8007f98 <__malloc_unlock>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d908      	bls.n	800677a <_free_r+0x46>
 8006768:	6825      	ldr	r5, [r4, #0]
 800676a:	1961      	adds	r1, r4, r5
 800676c:	428b      	cmp	r3, r1
 800676e:	bf01      	itttt	eq
 8006770:	6819      	ldreq	r1, [r3, #0]
 8006772:	685b      	ldreq	r3, [r3, #4]
 8006774:	1949      	addeq	r1, r1, r5
 8006776:	6021      	streq	r1, [r4, #0]
 8006778:	e7ed      	b.n	8006756 <_free_r+0x22>
 800677a:	461a      	mov	r2, r3
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b10b      	cbz	r3, 8006784 <_free_r+0x50>
 8006780:	42a3      	cmp	r3, r4
 8006782:	d9fa      	bls.n	800677a <_free_r+0x46>
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	1855      	adds	r5, r2, r1
 8006788:	42a5      	cmp	r5, r4
 800678a:	d10b      	bne.n	80067a4 <_free_r+0x70>
 800678c:	6824      	ldr	r4, [r4, #0]
 800678e:	4421      	add	r1, r4
 8006790:	1854      	adds	r4, r2, r1
 8006792:	42a3      	cmp	r3, r4
 8006794:	6011      	str	r1, [r2, #0]
 8006796:	d1e0      	bne.n	800675a <_free_r+0x26>
 8006798:	681c      	ldr	r4, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	6053      	str	r3, [r2, #4]
 800679e:	4421      	add	r1, r4
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	e7da      	b.n	800675a <_free_r+0x26>
 80067a4:	d902      	bls.n	80067ac <_free_r+0x78>
 80067a6:	230c      	movs	r3, #12
 80067a8:	6003      	str	r3, [r0, #0]
 80067aa:	e7d6      	b.n	800675a <_free_r+0x26>
 80067ac:	6825      	ldr	r5, [r4, #0]
 80067ae:	1961      	adds	r1, r4, r5
 80067b0:	428b      	cmp	r3, r1
 80067b2:	bf04      	itt	eq
 80067b4:	6819      	ldreq	r1, [r3, #0]
 80067b6:	685b      	ldreq	r3, [r3, #4]
 80067b8:	6063      	str	r3, [r4, #4]
 80067ba:	bf04      	itt	eq
 80067bc:	1949      	addeq	r1, r1, r5
 80067be:	6021      	streq	r1, [r4, #0]
 80067c0:	6054      	str	r4, [r2, #4]
 80067c2:	e7ca      	b.n	800675a <_free_r+0x26>
 80067c4:	b003      	add	sp, #12
 80067c6:	bd30      	pop	{r4, r5, pc}
 80067c8:	200003bc 	.word	0x200003bc

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0e      	ldr	r6, [pc, #56]	; (8006808 <sbrk_aligned+0x3c>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f000 fcf6 	bl	80071c8 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fcf1 	bl	80071c8 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d00a      	beq.n	8006800 <sbrk_aligned+0x34>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d007      	beq.n	8006804 <sbrk_aligned+0x38>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 fce6 	bl	80071c8 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d101      	bne.n	8006804 <sbrk_aligned+0x38>
 8006800:	f04f 34ff 	mov.w	r4, #4294967295
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	200003c0 	.word	0x200003c0

0800680c <_malloc_r>:
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	1ccd      	adds	r5, r1, #3
 8006812:	f025 0503 	bic.w	r5, r5, #3
 8006816:	3508      	adds	r5, #8
 8006818:	2d0c      	cmp	r5, #12
 800681a:	bf38      	it	cc
 800681c:	250c      	movcc	r5, #12
 800681e:	2d00      	cmp	r5, #0
 8006820:	4607      	mov	r7, r0
 8006822:	db01      	blt.n	8006828 <_malloc_r+0x1c>
 8006824:	42a9      	cmp	r1, r5
 8006826:	d905      	bls.n	8006834 <_malloc_r+0x28>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	2600      	movs	r6, #0
 800682e:	4630      	mov	r0, r6
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006834:	4e2e      	ldr	r6, [pc, #184]	; (80068f0 <_malloc_r+0xe4>)
 8006836:	f001 fba9 	bl	8007f8c <__malloc_lock>
 800683a:	6833      	ldr	r3, [r6, #0]
 800683c:	461c      	mov	r4, r3
 800683e:	bb34      	cbnz	r4, 800688e <_malloc_r+0x82>
 8006840:	4629      	mov	r1, r5
 8006842:	4638      	mov	r0, r7
 8006844:	f7ff ffc2 	bl	80067cc <sbrk_aligned>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	4604      	mov	r4, r0
 800684c:	d14d      	bne.n	80068ea <_malloc_r+0xde>
 800684e:	6834      	ldr	r4, [r6, #0]
 8006850:	4626      	mov	r6, r4
 8006852:	2e00      	cmp	r6, #0
 8006854:	d140      	bne.n	80068d8 <_malloc_r+0xcc>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	4631      	mov	r1, r6
 800685a:	4638      	mov	r0, r7
 800685c:	eb04 0803 	add.w	r8, r4, r3
 8006860:	f000 fcb2 	bl	80071c8 <_sbrk_r>
 8006864:	4580      	cmp	r8, r0
 8006866:	d13a      	bne.n	80068de <_malloc_r+0xd2>
 8006868:	6821      	ldr	r1, [r4, #0]
 800686a:	3503      	adds	r5, #3
 800686c:	1a6d      	subs	r5, r5, r1
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	4629      	mov	r1, r5
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff ffa5 	bl	80067cc <sbrk_aligned>
 8006882:	3001      	adds	r0, #1
 8006884:	d02b      	beq.n	80068de <_malloc_r+0xd2>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	442b      	add	r3, r5
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	e00e      	b.n	80068ac <_malloc_r+0xa0>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	1b52      	subs	r2, r2, r5
 8006892:	d41e      	bmi.n	80068d2 <_malloc_r+0xc6>
 8006894:	2a0b      	cmp	r2, #11
 8006896:	d916      	bls.n	80068c6 <_malloc_r+0xba>
 8006898:	1961      	adds	r1, r4, r5
 800689a:	42a3      	cmp	r3, r4
 800689c:	6025      	str	r5, [r4, #0]
 800689e:	bf18      	it	ne
 80068a0:	6059      	strne	r1, [r3, #4]
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	bf08      	it	eq
 80068a6:	6031      	streq	r1, [r6, #0]
 80068a8:	5162      	str	r2, [r4, r5]
 80068aa:	604b      	str	r3, [r1, #4]
 80068ac:	4638      	mov	r0, r7
 80068ae:	f104 060b 	add.w	r6, r4, #11
 80068b2:	f001 fb71 	bl	8007f98 <__malloc_unlock>
 80068b6:	f026 0607 	bic.w	r6, r6, #7
 80068ba:	1d23      	adds	r3, r4, #4
 80068bc:	1af2      	subs	r2, r6, r3
 80068be:	d0b6      	beq.n	800682e <_malloc_r+0x22>
 80068c0:	1b9b      	subs	r3, r3, r6
 80068c2:	50a3      	str	r3, [r4, r2]
 80068c4:	e7b3      	b.n	800682e <_malloc_r+0x22>
 80068c6:	6862      	ldr	r2, [r4, #4]
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	bf0c      	ite	eq
 80068cc:	6032      	streq	r2, [r6, #0]
 80068ce:	605a      	strne	r2, [r3, #4]
 80068d0:	e7ec      	b.n	80068ac <_malloc_r+0xa0>
 80068d2:	4623      	mov	r3, r4
 80068d4:	6864      	ldr	r4, [r4, #4]
 80068d6:	e7b2      	b.n	800683e <_malloc_r+0x32>
 80068d8:	4634      	mov	r4, r6
 80068da:	6876      	ldr	r6, [r6, #4]
 80068dc:	e7b9      	b.n	8006852 <_malloc_r+0x46>
 80068de:	230c      	movs	r3, #12
 80068e0:	603b      	str	r3, [r7, #0]
 80068e2:	4638      	mov	r0, r7
 80068e4:	f001 fb58 	bl	8007f98 <__malloc_unlock>
 80068e8:	e7a1      	b.n	800682e <_malloc_r+0x22>
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	e7de      	b.n	80068ac <_malloc_r+0xa0>
 80068ee:	bf00      	nop
 80068f0:	200003bc 	.word	0x200003bc

080068f4 <__cvt>:
 80068f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	ec55 4b10 	vmov	r4, r5, d0
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	460e      	mov	r6, r1
 8006900:	4619      	mov	r1, r3
 8006902:	462b      	mov	r3, r5
 8006904:	bfbb      	ittet	lt
 8006906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800690a:	461d      	movlt	r5, r3
 800690c:	2300      	movge	r3, #0
 800690e:	232d      	movlt	r3, #45	; 0x2d
 8006910:	700b      	strb	r3, [r1, #0]
 8006912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006914:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006918:	4691      	mov	r9, r2
 800691a:	f023 0820 	bic.w	r8, r3, #32
 800691e:	bfbc      	itt	lt
 8006920:	4622      	movlt	r2, r4
 8006922:	4614      	movlt	r4, r2
 8006924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006928:	d005      	beq.n	8006936 <__cvt+0x42>
 800692a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800692e:	d100      	bne.n	8006932 <__cvt+0x3e>
 8006930:	3601      	adds	r6, #1
 8006932:	2102      	movs	r1, #2
 8006934:	e000      	b.n	8006938 <__cvt+0x44>
 8006936:	2103      	movs	r1, #3
 8006938:	ab03      	add	r3, sp, #12
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	ab02      	add	r3, sp, #8
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	ec45 4b10 	vmov	d0, r4, r5
 8006944:	4653      	mov	r3, sl
 8006946:	4632      	mov	r2, r6
 8006948:	f000 fd2e 	bl	80073a8 <_dtoa_r>
 800694c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006950:	4607      	mov	r7, r0
 8006952:	d102      	bne.n	800695a <__cvt+0x66>
 8006954:	f019 0f01 	tst.w	r9, #1
 8006958:	d022      	beq.n	80069a0 <__cvt+0xac>
 800695a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800695e:	eb07 0906 	add.w	r9, r7, r6
 8006962:	d110      	bne.n	8006986 <__cvt+0x92>
 8006964:	783b      	ldrb	r3, [r7, #0]
 8006966:	2b30      	cmp	r3, #48	; 0x30
 8006968:	d10a      	bne.n	8006980 <__cvt+0x8c>
 800696a:	2200      	movs	r2, #0
 800696c:	2300      	movs	r3, #0
 800696e:	4620      	mov	r0, r4
 8006970:	4629      	mov	r1, r5
 8006972:	f7fa f8c9 	bl	8000b08 <__aeabi_dcmpeq>
 8006976:	b918      	cbnz	r0, 8006980 <__cvt+0x8c>
 8006978:	f1c6 0601 	rsb	r6, r6, #1
 800697c:	f8ca 6000 	str.w	r6, [sl]
 8006980:	f8da 3000 	ldr.w	r3, [sl]
 8006984:	4499      	add	r9, r3
 8006986:	2200      	movs	r2, #0
 8006988:	2300      	movs	r3, #0
 800698a:	4620      	mov	r0, r4
 800698c:	4629      	mov	r1, r5
 800698e:	f7fa f8bb 	bl	8000b08 <__aeabi_dcmpeq>
 8006992:	b108      	cbz	r0, 8006998 <__cvt+0xa4>
 8006994:	f8cd 900c 	str.w	r9, [sp, #12]
 8006998:	2230      	movs	r2, #48	; 0x30
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	454b      	cmp	r3, r9
 800699e:	d307      	bcc.n	80069b0 <__cvt+0xbc>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069a4:	1bdb      	subs	r3, r3, r7
 80069a6:	4638      	mov	r0, r7
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	b004      	add	sp, #16
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	9103      	str	r1, [sp, #12]
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	e7f0      	b.n	800699a <__cvt+0xa6>

080069b8 <__exponent>:
 80069b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069ba:	4603      	mov	r3, r0
 80069bc:	2900      	cmp	r1, #0
 80069be:	bfb8      	it	lt
 80069c0:	4249      	neglt	r1, r1
 80069c2:	f803 2b02 	strb.w	r2, [r3], #2
 80069c6:	bfb4      	ite	lt
 80069c8:	222d      	movlt	r2, #45	; 0x2d
 80069ca:	222b      	movge	r2, #43	; 0x2b
 80069cc:	2909      	cmp	r1, #9
 80069ce:	7042      	strb	r2, [r0, #1]
 80069d0:	dd2a      	ble.n	8006a28 <__exponent+0x70>
 80069d2:	f10d 0407 	add.w	r4, sp, #7
 80069d6:	46a4      	mov	ip, r4
 80069d8:	270a      	movs	r7, #10
 80069da:	46a6      	mov	lr, r4
 80069dc:	460a      	mov	r2, r1
 80069de:	fb91 f6f7 	sdiv	r6, r1, r7
 80069e2:	fb07 1516 	mls	r5, r7, r6, r1
 80069e6:	3530      	adds	r5, #48	; 0x30
 80069e8:	2a63      	cmp	r2, #99	; 0x63
 80069ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80069ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069f2:	4631      	mov	r1, r6
 80069f4:	dcf1      	bgt.n	80069da <__exponent+0x22>
 80069f6:	3130      	adds	r1, #48	; 0x30
 80069f8:	f1ae 0502 	sub.w	r5, lr, #2
 80069fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a00:	1c44      	adds	r4, r0, #1
 8006a02:	4629      	mov	r1, r5
 8006a04:	4561      	cmp	r1, ip
 8006a06:	d30a      	bcc.n	8006a1e <__exponent+0x66>
 8006a08:	f10d 0209 	add.w	r2, sp, #9
 8006a0c:	eba2 020e 	sub.w	r2, r2, lr
 8006a10:	4565      	cmp	r5, ip
 8006a12:	bf88      	it	hi
 8006a14:	2200      	movhi	r2, #0
 8006a16:	4413      	add	r3, r2
 8006a18:	1a18      	subs	r0, r3, r0
 8006a1a:	b003      	add	sp, #12
 8006a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a26:	e7ed      	b.n	8006a04 <__exponent+0x4c>
 8006a28:	2330      	movs	r3, #48	; 0x30
 8006a2a:	3130      	adds	r1, #48	; 0x30
 8006a2c:	7083      	strb	r3, [r0, #2]
 8006a2e:	70c1      	strb	r1, [r0, #3]
 8006a30:	1d03      	adds	r3, r0, #4
 8006a32:	e7f1      	b.n	8006a18 <__exponent+0x60>

08006a34 <_printf_float>:
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	ed2d 8b02 	vpush	{d8}
 8006a3c:	b08d      	sub	sp, #52	; 0x34
 8006a3e:	460c      	mov	r4, r1
 8006a40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a44:	4616      	mov	r6, r2
 8006a46:	461f      	mov	r7, r3
 8006a48:	4605      	mov	r5, r0
 8006a4a:	f001 fa9b 	bl	8007f84 <_localeconv_r>
 8006a4e:	f8d0 a000 	ldr.w	sl, [r0]
 8006a52:	4650      	mov	r0, sl
 8006a54:	f7f9 fbdc 	bl	8000210 <strlen>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	9305      	str	r3, [sp, #20]
 8006a60:	f8d8 3000 	ldr.w	r3, [r8]
 8006a64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a68:	3307      	adds	r3, #7
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	f103 0208 	add.w	r2, r3, #8
 8006a72:	f8c8 2000 	str.w	r2, [r8]
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a8c:	ee08 0a10 	vmov	s16, r0
 8006a90:	4b9f      	ldr	r3, [pc, #636]	; (8006d10 <_printf_float+0x2dc>)
 8006a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9a:	f7fa f867 	bl	8000b6c <__aeabi_dcmpun>
 8006a9e:	bb88      	cbnz	r0, 8006b04 <_printf_float+0xd0>
 8006aa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa4:	4b9a      	ldr	r3, [pc, #616]	; (8006d10 <_printf_float+0x2dc>)
 8006aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aaa:	f7fa f841 	bl	8000b30 <__aeabi_dcmple>
 8006aae:	bb48      	cbnz	r0, 8006b04 <_printf_float+0xd0>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7fa f830 	bl	8000b1c <__aeabi_dcmplt>
 8006abc:	b110      	cbz	r0, 8006ac4 <_printf_float+0x90>
 8006abe:	232d      	movs	r3, #45	; 0x2d
 8006ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac4:	4b93      	ldr	r3, [pc, #588]	; (8006d14 <_printf_float+0x2e0>)
 8006ac6:	4894      	ldr	r0, [pc, #592]	; (8006d18 <_printf_float+0x2e4>)
 8006ac8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006acc:	bf94      	ite	ls
 8006ace:	4698      	movls	r8, r3
 8006ad0:	4680      	movhi	r8, r0
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	9b05      	ldr	r3, [sp, #20]
 8006ad8:	f023 0204 	bic.w	r2, r3, #4
 8006adc:	6022      	str	r2, [r4, #0]
 8006ade:	f04f 0900 	mov.w	r9, #0
 8006ae2:	9700      	str	r7, [sp, #0]
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 f9d8 	bl	8006ea0 <_printf_common>
 8006af0:	3001      	adds	r0, #1
 8006af2:	f040 8090 	bne.w	8006c16 <_printf_float+0x1e2>
 8006af6:	f04f 30ff 	mov.w	r0, #4294967295
 8006afa:	b00d      	add	sp, #52	; 0x34
 8006afc:	ecbd 8b02 	vpop	{d8}
 8006b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	f7fa f82e 	bl	8000b6c <__aeabi_dcmpun>
 8006b10:	b140      	cbz	r0, 8006b24 <_printf_float+0xf0>
 8006b12:	464b      	mov	r3, r9
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bfbc      	itt	lt
 8006b18:	232d      	movlt	r3, #45	; 0x2d
 8006b1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b1e:	487f      	ldr	r0, [pc, #508]	; (8006d1c <_printf_float+0x2e8>)
 8006b20:	4b7f      	ldr	r3, [pc, #508]	; (8006d20 <_printf_float+0x2ec>)
 8006b22:	e7d1      	b.n	8006ac8 <_printf_float+0x94>
 8006b24:	6863      	ldr	r3, [r4, #4]
 8006b26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b2a:	9206      	str	r2, [sp, #24]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	d13f      	bne.n	8006bb0 <_printf_float+0x17c>
 8006b30:	2306      	movs	r3, #6
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	9b05      	ldr	r3, [sp, #20]
 8006b36:	6861      	ldr	r1, [r4, #4]
 8006b38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	ab0a      	add	r3, sp, #40	; 0x28
 8006b42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b46:	ab09      	add	r3, sp, #36	; 0x24
 8006b48:	ec49 8b10 	vmov	d0, r8, r9
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	6022      	str	r2, [r4, #0]
 8006b50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff fecd 	bl	80068f4 <__cvt>
 8006b5a:	9b06      	ldr	r3, [sp, #24]
 8006b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b5e:	2b47      	cmp	r3, #71	; 0x47
 8006b60:	4680      	mov	r8, r0
 8006b62:	d108      	bne.n	8006b76 <_printf_float+0x142>
 8006b64:	1cc8      	adds	r0, r1, #3
 8006b66:	db02      	blt.n	8006b6e <_printf_float+0x13a>
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	4299      	cmp	r1, r3
 8006b6c:	dd41      	ble.n	8006bf2 <_printf_float+0x1be>
 8006b6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b72:	fa5f fb8b 	uxtb.w	fp, fp
 8006b76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b7a:	d820      	bhi.n	8006bbe <_printf_float+0x18a>
 8006b7c:	3901      	subs	r1, #1
 8006b7e:	465a      	mov	r2, fp
 8006b80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b84:	9109      	str	r1, [sp, #36]	; 0x24
 8006b86:	f7ff ff17 	bl	80069b8 <__exponent>
 8006b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8c:	1813      	adds	r3, r2, r0
 8006b8e:	2a01      	cmp	r2, #1
 8006b90:	4681      	mov	r9, r0
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	dc02      	bgt.n	8006b9c <_printf_float+0x168>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	07d2      	lsls	r2, r2, #31
 8006b9a:	d501      	bpl.n	8006ba0 <_printf_float+0x16c>
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d09c      	beq.n	8006ae2 <_printf_float+0xae>
 8006ba8:	232d      	movs	r3, #45	; 0x2d
 8006baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bae:	e798      	b.n	8006ae2 <_printf_float+0xae>
 8006bb0:	9a06      	ldr	r2, [sp, #24]
 8006bb2:	2a47      	cmp	r2, #71	; 0x47
 8006bb4:	d1be      	bne.n	8006b34 <_printf_float+0x100>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1bc      	bne.n	8006b34 <_printf_float+0x100>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e7b9      	b.n	8006b32 <_printf_float+0xfe>
 8006bbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bc2:	d118      	bne.n	8006bf6 <_printf_float+0x1c2>
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	dd0b      	ble.n	8006be2 <_printf_float+0x1ae>
 8006bca:	6121      	str	r1, [r4, #16]
 8006bcc:	b913      	cbnz	r3, 8006bd4 <_printf_float+0x1a0>
 8006bce:	6822      	ldr	r2, [r4, #0]
 8006bd0:	07d0      	lsls	r0, r2, #31
 8006bd2:	d502      	bpl.n	8006bda <_printf_float+0x1a6>
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	440b      	add	r3, r1
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bdc:	f04f 0900 	mov.w	r9, #0
 8006be0:	e7de      	b.n	8006ba0 <_printf_float+0x16c>
 8006be2:	b913      	cbnz	r3, 8006bea <_printf_float+0x1b6>
 8006be4:	6822      	ldr	r2, [r4, #0]
 8006be6:	07d2      	lsls	r2, r2, #31
 8006be8:	d501      	bpl.n	8006bee <_printf_float+0x1ba>
 8006bea:	3302      	adds	r3, #2
 8006bec:	e7f4      	b.n	8006bd8 <_printf_float+0x1a4>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e7f2      	b.n	8006bd8 <_printf_float+0x1a4>
 8006bf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	db05      	blt.n	8006c08 <_printf_float+0x1d4>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	6121      	str	r1, [r4, #16]
 8006c00:	07d8      	lsls	r0, r3, #31
 8006c02:	d5ea      	bpl.n	8006bda <_printf_float+0x1a6>
 8006c04:	1c4b      	adds	r3, r1, #1
 8006c06:	e7e7      	b.n	8006bd8 <_printf_float+0x1a4>
 8006c08:	2900      	cmp	r1, #0
 8006c0a:	bfd4      	ite	le
 8006c0c:	f1c1 0202 	rsble	r2, r1, #2
 8006c10:	2201      	movgt	r2, #1
 8006c12:	4413      	add	r3, r2
 8006c14:	e7e0      	b.n	8006bd8 <_printf_float+0x1a4>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	055a      	lsls	r2, r3, #21
 8006c1a:	d407      	bmi.n	8006c2c <_printf_float+0x1f8>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	4642      	mov	r2, r8
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	d12c      	bne.n	8006c84 <_printf_float+0x250>
 8006c2a:	e764      	b.n	8006af6 <_printf_float+0xc2>
 8006c2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c30:	f240 80e0 	bls.w	8006df4 <_printf_float+0x3c0>
 8006c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f7f9 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d034      	beq.n	8006cae <_printf_float+0x27a>
 8006c44:	4a37      	ldr	r2, [pc, #220]	; (8006d24 <_printf_float+0x2f0>)
 8006c46:	2301      	movs	r3, #1
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f af51 	beq.w	8006af6 <_printf_float+0xc2>
 8006c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	db02      	blt.n	8006c62 <_printf_float+0x22e>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	07d8      	lsls	r0, r3, #31
 8006c60:	d510      	bpl.n	8006c84 <_printf_float+0x250>
 8006c62:	ee18 3a10 	vmov	r3, s16
 8006c66:	4652      	mov	r2, sl
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f43f af41 	beq.w	8006af6 <_printf_float+0xc2>
 8006c74:	f04f 0800 	mov.w	r8, #0
 8006c78:	f104 091a 	add.w	r9, r4, #26
 8006c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	4543      	cmp	r3, r8
 8006c82:	dc09      	bgt.n	8006c98 <_printf_float+0x264>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	079b      	lsls	r3, r3, #30
 8006c88:	f100 8105 	bmi.w	8006e96 <_printf_float+0x462>
 8006c8c:	68e0      	ldr	r0, [r4, #12]
 8006c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c90:	4298      	cmp	r0, r3
 8006c92:	bfb8      	it	lt
 8006c94:	4618      	movlt	r0, r3
 8006c96:	e730      	b.n	8006afa <_printf_float+0xc6>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	464a      	mov	r2, r9
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f af27 	beq.w	8006af6 <_printf_float+0xc2>
 8006ca8:	f108 0801 	add.w	r8, r8, #1
 8006cac:	e7e6      	b.n	8006c7c <_printf_float+0x248>
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc39      	bgt.n	8006d28 <_printf_float+0x2f4>
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <_printf_float+0x2f0>)
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f43f af19 	beq.w	8006af6 <_printf_float+0xc2>
 8006cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	d102      	bne.n	8006cd2 <_printf_float+0x29e>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	d5d8      	bpl.n	8006c84 <_printf_float+0x250>
 8006cd2:	ee18 3a10 	vmov	r3, s16
 8006cd6:	4652      	mov	r2, sl
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f af09 	beq.w	8006af6 <_printf_float+0xc2>
 8006ce4:	f04f 0900 	mov.w	r9, #0
 8006ce8:	f104 0a1a 	add.w	sl, r4, #26
 8006cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cee:	425b      	negs	r3, r3
 8006cf0:	454b      	cmp	r3, r9
 8006cf2:	dc01      	bgt.n	8006cf8 <_printf_float+0x2c4>
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf6:	e792      	b.n	8006c1e <_printf_float+0x1ea>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f aef7 	beq.w	8006af6 <_printf_float+0xc2>
 8006d08:	f109 0901 	add.w	r9, r9, #1
 8006d0c:	e7ee      	b.n	8006cec <_printf_float+0x2b8>
 8006d0e:	bf00      	nop
 8006d10:	7fefffff 	.word	0x7fefffff
 8006d14:	080097b8 	.word	0x080097b8
 8006d18:	080097bc 	.word	0x080097bc
 8006d1c:	080097c4 	.word	0x080097c4
 8006d20:	080097c0 	.word	0x080097c0
 8006d24:	080097c8 	.word	0x080097c8
 8006d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	bfa8      	it	ge
 8006d30:	461a      	movge	r2, r3
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	4691      	mov	r9, r2
 8006d36:	dc37      	bgt.n	8006da8 <_printf_float+0x374>
 8006d38:	f04f 0b00 	mov.w	fp, #0
 8006d3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d40:	f104 021a 	add.w	r2, r4, #26
 8006d44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d46:	9305      	str	r3, [sp, #20]
 8006d48:	eba3 0309 	sub.w	r3, r3, r9
 8006d4c:	455b      	cmp	r3, fp
 8006d4e:	dc33      	bgt.n	8006db8 <_printf_float+0x384>
 8006d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d54:	429a      	cmp	r2, r3
 8006d56:	db3b      	blt.n	8006dd0 <_printf_float+0x39c>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	07da      	lsls	r2, r3, #31
 8006d5c:	d438      	bmi.n	8006dd0 <_printf_float+0x39c>
 8006d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d60:	9a05      	ldr	r2, [sp, #20]
 8006d62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d64:	1a9a      	subs	r2, r3, r2
 8006d66:	eba3 0901 	sub.w	r9, r3, r1
 8006d6a:	4591      	cmp	r9, r2
 8006d6c:	bfa8      	it	ge
 8006d6e:	4691      	movge	r9, r2
 8006d70:	f1b9 0f00 	cmp.w	r9, #0
 8006d74:	dc35      	bgt.n	8006de2 <_printf_float+0x3ae>
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d7e:	f104 0a1a 	add.w	sl, r4, #26
 8006d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	eba3 0309 	sub.w	r3, r3, r9
 8006d8c:	4543      	cmp	r3, r8
 8006d8e:	f77f af79 	ble.w	8006c84 <_printf_float+0x250>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4652      	mov	r2, sl
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f aeaa 	beq.w	8006af6 <_printf_float+0xc2>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	e7ec      	b.n	8006d82 <_printf_float+0x34e>
 8006da8:	4613      	mov	r3, r2
 8006daa:	4631      	mov	r1, r6
 8006dac:	4642      	mov	r2, r8
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	d1c0      	bne.n	8006d38 <_printf_float+0x304>
 8006db6:	e69e      	b.n	8006af6 <_printf_float+0xc2>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	9205      	str	r2, [sp, #20]
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f ae97 	beq.w	8006af6 <_printf_float+0xc2>
 8006dc8:	9a05      	ldr	r2, [sp, #20]
 8006dca:	f10b 0b01 	add.w	fp, fp, #1
 8006dce:	e7b9      	b.n	8006d44 <_printf_float+0x310>
 8006dd0:	ee18 3a10 	vmov	r3, s16
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4628      	mov	r0, r5
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d1be      	bne.n	8006d5e <_printf_float+0x32a>
 8006de0:	e689      	b.n	8006af6 <_printf_float+0xc2>
 8006de2:	9a05      	ldr	r2, [sp, #20]
 8006de4:	464b      	mov	r3, r9
 8006de6:	4442      	add	r2, r8
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b8      	blx	r7
 8006dee:	3001      	adds	r0, #1
 8006df0:	d1c1      	bne.n	8006d76 <_printf_float+0x342>
 8006df2:	e680      	b.n	8006af6 <_printf_float+0xc2>
 8006df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006df6:	2a01      	cmp	r2, #1
 8006df8:	dc01      	bgt.n	8006dfe <_printf_float+0x3ca>
 8006dfa:	07db      	lsls	r3, r3, #31
 8006dfc:	d538      	bpl.n	8006e70 <_printf_float+0x43c>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4642      	mov	r2, r8
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f ae74 	beq.w	8006af6 <_printf_float+0xc2>
 8006e0e:	ee18 3a10 	vmov	r3, s16
 8006e12:	4652      	mov	r2, sl
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f ae6b 	beq.w	8006af6 <_printf_float+0xc2>
 8006e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e24:	2200      	movs	r2, #0
 8006e26:	2300      	movs	r3, #0
 8006e28:	f7f9 fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 8006e2c:	b9d8      	cbnz	r0, 8006e66 <_printf_float+0x432>
 8006e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e30:	f108 0201 	add.w	r2, r8, #1
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d10e      	bne.n	8006e5e <_printf_float+0x42a>
 8006e40:	e659      	b.n	8006af6 <_printf_float+0xc2>
 8006e42:	2301      	movs	r3, #1
 8006e44:	4652      	mov	r2, sl
 8006e46:	4631      	mov	r1, r6
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b8      	blx	r7
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	f43f ae52 	beq.w	8006af6 <_printf_float+0xc2>
 8006e52:	f108 0801 	add.w	r8, r8, #1
 8006e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	4543      	cmp	r3, r8
 8006e5c:	dcf1      	bgt.n	8006e42 <_printf_float+0x40e>
 8006e5e:	464b      	mov	r3, r9
 8006e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e64:	e6dc      	b.n	8006c20 <_printf_float+0x1ec>
 8006e66:	f04f 0800 	mov.w	r8, #0
 8006e6a:	f104 0a1a 	add.w	sl, r4, #26
 8006e6e:	e7f2      	b.n	8006e56 <_printf_float+0x422>
 8006e70:	2301      	movs	r3, #1
 8006e72:	4642      	mov	r2, r8
 8006e74:	e7df      	b.n	8006e36 <_printf_float+0x402>
 8006e76:	2301      	movs	r3, #1
 8006e78:	464a      	mov	r2, r9
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f ae38 	beq.w	8006af6 <_printf_float+0xc2>
 8006e86:	f108 0801 	add.w	r8, r8, #1
 8006e8a:	68e3      	ldr	r3, [r4, #12]
 8006e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e8e:	1a5b      	subs	r3, r3, r1
 8006e90:	4543      	cmp	r3, r8
 8006e92:	dcf0      	bgt.n	8006e76 <_printf_float+0x442>
 8006e94:	e6fa      	b.n	8006c8c <_printf_float+0x258>
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	f104 0919 	add.w	r9, r4, #25
 8006e9e:	e7f4      	b.n	8006e8a <_printf_float+0x456>

08006ea0 <_printf_common>:
 8006ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	4699      	mov	r9, r3
 8006ea8:	688a      	ldr	r2, [r1, #8]
 8006eaa:	690b      	ldr	r3, [r1, #16]
 8006eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	bfb8      	it	lt
 8006eb4:	4613      	movlt	r3, r2
 8006eb6:	6033      	str	r3, [r6, #0]
 8006eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	b10a      	cbz	r2, 8006ec6 <_printf_common+0x26>
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	6033      	str	r3, [r6, #0]
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	0699      	lsls	r1, r3, #26
 8006eca:	bf42      	ittt	mi
 8006ecc:	6833      	ldrmi	r3, [r6, #0]
 8006ece:	3302      	addmi	r3, #2
 8006ed0:	6033      	strmi	r3, [r6, #0]
 8006ed2:	6825      	ldr	r5, [r4, #0]
 8006ed4:	f015 0506 	ands.w	r5, r5, #6
 8006ed8:	d106      	bne.n	8006ee8 <_printf_common+0x48>
 8006eda:	f104 0a19 	add.w	sl, r4, #25
 8006ede:	68e3      	ldr	r3, [r4, #12]
 8006ee0:	6832      	ldr	r2, [r6, #0]
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	dc26      	bgt.n	8006f36 <_printf_common+0x96>
 8006ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eec:	1e13      	subs	r3, r2, #0
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	2301      	movne	r3, #1
 8006ef4:	0692      	lsls	r2, r2, #26
 8006ef6:	d42b      	bmi.n	8006f50 <_printf_common+0xb0>
 8006ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006efc:	4649      	mov	r1, r9
 8006efe:	4638      	mov	r0, r7
 8006f00:	47c0      	blx	r8
 8006f02:	3001      	adds	r0, #1
 8006f04:	d01e      	beq.n	8006f44 <_printf_common+0xa4>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	68e5      	ldr	r5, [r4, #12]
 8006f0a:	6832      	ldr	r2, [r6, #0]
 8006f0c:	f003 0306 	and.w	r3, r3, #6
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	bf08      	it	eq
 8006f14:	1aad      	subeq	r5, r5, r2
 8006f16:	68a3      	ldr	r3, [r4, #8]
 8006f18:	6922      	ldr	r2, [r4, #16]
 8006f1a:	bf0c      	ite	eq
 8006f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f20:	2500      	movne	r5, #0
 8006f22:	4293      	cmp	r3, r2
 8006f24:	bfc4      	itt	gt
 8006f26:	1a9b      	subgt	r3, r3, r2
 8006f28:	18ed      	addgt	r5, r5, r3
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	341a      	adds	r4, #26
 8006f2e:	42b5      	cmp	r5, r6
 8006f30:	d11a      	bne.n	8006f68 <_printf_common+0xc8>
 8006f32:	2000      	movs	r0, #0
 8006f34:	e008      	b.n	8006f48 <_printf_common+0xa8>
 8006f36:	2301      	movs	r3, #1
 8006f38:	4652      	mov	r2, sl
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	47c0      	blx	r8
 8006f40:	3001      	adds	r0, #1
 8006f42:	d103      	bne.n	8006f4c <_printf_common+0xac>
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4c:	3501      	adds	r5, #1
 8006f4e:	e7c6      	b.n	8006ede <_printf_common+0x3e>
 8006f50:	18e1      	adds	r1, r4, r3
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	2030      	movs	r0, #48	; 0x30
 8006f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f5a:	4422      	add	r2, r4
 8006f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f64:	3302      	adds	r3, #2
 8006f66:	e7c7      	b.n	8006ef8 <_printf_common+0x58>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	4638      	mov	r0, r7
 8006f70:	47c0      	blx	r8
 8006f72:	3001      	adds	r0, #1
 8006f74:	d0e6      	beq.n	8006f44 <_printf_common+0xa4>
 8006f76:	3601      	adds	r6, #1
 8006f78:	e7d9      	b.n	8006f2e <_printf_common+0x8e>
	...

08006f7c <_printf_i>:
 8006f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	7e0f      	ldrb	r7, [r1, #24]
 8006f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f84:	2f78      	cmp	r7, #120	; 0x78
 8006f86:	4691      	mov	r9, r2
 8006f88:	4680      	mov	r8, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	469a      	mov	sl, r3
 8006f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f92:	d807      	bhi.n	8006fa4 <_printf_i+0x28>
 8006f94:	2f62      	cmp	r7, #98	; 0x62
 8006f96:	d80a      	bhi.n	8006fae <_printf_i+0x32>
 8006f98:	2f00      	cmp	r7, #0
 8006f9a:	f000 80d8 	beq.w	800714e <_printf_i+0x1d2>
 8006f9e:	2f58      	cmp	r7, #88	; 0x58
 8006fa0:	f000 80a3 	beq.w	80070ea <_printf_i+0x16e>
 8006fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fac:	e03a      	b.n	8007024 <_printf_i+0xa8>
 8006fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fb2:	2b15      	cmp	r3, #21
 8006fb4:	d8f6      	bhi.n	8006fa4 <_printf_i+0x28>
 8006fb6:	a101      	add	r1, pc, #4	; (adr r1, 8006fbc <_printf_i+0x40>)
 8006fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fbc:	08007015 	.word	0x08007015
 8006fc0:	08007029 	.word	0x08007029
 8006fc4:	08006fa5 	.word	0x08006fa5
 8006fc8:	08006fa5 	.word	0x08006fa5
 8006fcc:	08006fa5 	.word	0x08006fa5
 8006fd0:	08006fa5 	.word	0x08006fa5
 8006fd4:	08007029 	.word	0x08007029
 8006fd8:	08006fa5 	.word	0x08006fa5
 8006fdc:	08006fa5 	.word	0x08006fa5
 8006fe0:	08006fa5 	.word	0x08006fa5
 8006fe4:	08006fa5 	.word	0x08006fa5
 8006fe8:	08007135 	.word	0x08007135
 8006fec:	08007059 	.word	0x08007059
 8006ff0:	08007117 	.word	0x08007117
 8006ff4:	08006fa5 	.word	0x08006fa5
 8006ff8:	08006fa5 	.word	0x08006fa5
 8006ffc:	08007157 	.word	0x08007157
 8007000:	08006fa5 	.word	0x08006fa5
 8007004:	08007059 	.word	0x08007059
 8007008:	08006fa5 	.word	0x08006fa5
 800700c:	08006fa5 	.word	0x08006fa5
 8007010:	0800711f 	.word	0x0800711f
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	1d1a      	adds	r2, r3, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	602a      	str	r2, [r5, #0]
 800701c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007024:	2301      	movs	r3, #1
 8007026:	e0a3      	b.n	8007170 <_printf_i+0x1f4>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	6829      	ldr	r1, [r5, #0]
 800702c:	0606      	lsls	r6, r0, #24
 800702e:	f101 0304 	add.w	r3, r1, #4
 8007032:	d50a      	bpl.n	800704a <_printf_i+0xce>
 8007034:	680e      	ldr	r6, [r1, #0]
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	2e00      	cmp	r6, #0
 800703a:	da03      	bge.n	8007044 <_printf_i+0xc8>
 800703c:	232d      	movs	r3, #45	; 0x2d
 800703e:	4276      	negs	r6, r6
 8007040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007044:	485e      	ldr	r0, [pc, #376]	; (80071c0 <_printf_i+0x244>)
 8007046:	230a      	movs	r3, #10
 8007048:	e019      	b.n	800707e <_printf_i+0x102>
 800704a:	680e      	ldr	r6, [r1, #0]
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007052:	bf18      	it	ne
 8007054:	b236      	sxthne	r6, r6
 8007056:	e7ef      	b.n	8007038 <_printf_i+0xbc>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	6820      	ldr	r0, [r4, #0]
 800705c:	1d19      	adds	r1, r3, #4
 800705e:	6029      	str	r1, [r5, #0]
 8007060:	0601      	lsls	r1, r0, #24
 8007062:	d501      	bpl.n	8007068 <_printf_i+0xec>
 8007064:	681e      	ldr	r6, [r3, #0]
 8007066:	e002      	b.n	800706e <_printf_i+0xf2>
 8007068:	0646      	lsls	r6, r0, #25
 800706a:	d5fb      	bpl.n	8007064 <_printf_i+0xe8>
 800706c:	881e      	ldrh	r6, [r3, #0]
 800706e:	4854      	ldr	r0, [pc, #336]	; (80071c0 <_printf_i+0x244>)
 8007070:	2f6f      	cmp	r7, #111	; 0x6f
 8007072:	bf0c      	ite	eq
 8007074:	2308      	moveq	r3, #8
 8007076:	230a      	movne	r3, #10
 8007078:	2100      	movs	r1, #0
 800707a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800707e:	6865      	ldr	r5, [r4, #4]
 8007080:	60a5      	str	r5, [r4, #8]
 8007082:	2d00      	cmp	r5, #0
 8007084:	bfa2      	ittt	ge
 8007086:	6821      	ldrge	r1, [r4, #0]
 8007088:	f021 0104 	bicge.w	r1, r1, #4
 800708c:	6021      	strge	r1, [r4, #0]
 800708e:	b90e      	cbnz	r6, 8007094 <_printf_i+0x118>
 8007090:	2d00      	cmp	r5, #0
 8007092:	d04d      	beq.n	8007130 <_printf_i+0x1b4>
 8007094:	4615      	mov	r5, r2
 8007096:	fbb6 f1f3 	udiv	r1, r6, r3
 800709a:	fb03 6711 	mls	r7, r3, r1, r6
 800709e:	5dc7      	ldrb	r7, [r0, r7]
 80070a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070a4:	4637      	mov	r7, r6
 80070a6:	42bb      	cmp	r3, r7
 80070a8:	460e      	mov	r6, r1
 80070aa:	d9f4      	bls.n	8007096 <_printf_i+0x11a>
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d10b      	bne.n	80070c8 <_printf_i+0x14c>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	07de      	lsls	r6, r3, #31
 80070b4:	d508      	bpl.n	80070c8 <_printf_i+0x14c>
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	6861      	ldr	r1, [r4, #4]
 80070ba:	4299      	cmp	r1, r3
 80070bc:	bfde      	ittt	le
 80070be:	2330      	movle	r3, #48	; 0x30
 80070c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070c8:	1b52      	subs	r2, r2, r5
 80070ca:	6122      	str	r2, [r4, #16]
 80070cc:	f8cd a000 	str.w	sl, [sp]
 80070d0:	464b      	mov	r3, r9
 80070d2:	aa03      	add	r2, sp, #12
 80070d4:	4621      	mov	r1, r4
 80070d6:	4640      	mov	r0, r8
 80070d8:	f7ff fee2 	bl	8006ea0 <_printf_common>
 80070dc:	3001      	adds	r0, #1
 80070de:	d14c      	bne.n	800717a <_printf_i+0x1fe>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	b004      	add	sp, #16
 80070e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ea:	4835      	ldr	r0, [pc, #212]	; (80071c0 <_printf_i+0x244>)
 80070ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070f0:	6829      	ldr	r1, [r5, #0]
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070f8:	6029      	str	r1, [r5, #0]
 80070fa:	061d      	lsls	r5, r3, #24
 80070fc:	d514      	bpl.n	8007128 <_printf_i+0x1ac>
 80070fe:	07df      	lsls	r7, r3, #31
 8007100:	bf44      	itt	mi
 8007102:	f043 0320 	orrmi.w	r3, r3, #32
 8007106:	6023      	strmi	r3, [r4, #0]
 8007108:	b91e      	cbnz	r6, 8007112 <_printf_i+0x196>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f023 0320 	bic.w	r3, r3, #32
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	2310      	movs	r3, #16
 8007114:	e7b0      	b.n	8007078 <_printf_i+0xfc>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f043 0320 	orr.w	r3, r3, #32
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	2378      	movs	r3, #120	; 0x78
 8007120:	4828      	ldr	r0, [pc, #160]	; (80071c4 <_printf_i+0x248>)
 8007122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007126:	e7e3      	b.n	80070f0 <_printf_i+0x174>
 8007128:	0659      	lsls	r1, r3, #25
 800712a:	bf48      	it	mi
 800712c:	b2b6      	uxthmi	r6, r6
 800712e:	e7e6      	b.n	80070fe <_printf_i+0x182>
 8007130:	4615      	mov	r5, r2
 8007132:	e7bb      	b.n	80070ac <_printf_i+0x130>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	6826      	ldr	r6, [r4, #0]
 8007138:	6961      	ldr	r1, [r4, #20]
 800713a:	1d18      	adds	r0, r3, #4
 800713c:	6028      	str	r0, [r5, #0]
 800713e:	0635      	lsls	r5, r6, #24
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	d501      	bpl.n	8007148 <_printf_i+0x1cc>
 8007144:	6019      	str	r1, [r3, #0]
 8007146:	e002      	b.n	800714e <_printf_i+0x1d2>
 8007148:	0670      	lsls	r0, r6, #25
 800714a:	d5fb      	bpl.n	8007144 <_printf_i+0x1c8>
 800714c:	8019      	strh	r1, [r3, #0]
 800714e:	2300      	movs	r3, #0
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	4615      	mov	r5, r2
 8007154:	e7ba      	b.n	80070cc <_printf_i+0x150>
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	602a      	str	r2, [r5, #0]
 800715c:	681d      	ldr	r5, [r3, #0]
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	2100      	movs	r1, #0
 8007162:	4628      	mov	r0, r5
 8007164:	f7f9 f85c 	bl	8000220 <memchr>
 8007168:	b108      	cbz	r0, 800716e <_printf_i+0x1f2>
 800716a:	1b40      	subs	r0, r0, r5
 800716c:	6060      	str	r0, [r4, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	2300      	movs	r3, #0
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007178:	e7a8      	b.n	80070cc <_printf_i+0x150>
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	462a      	mov	r2, r5
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	47d0      	blx	sl
 8007184:	3001      	adds	r0, #1
 8007186:	d0ab      	beq.n	80070e0 <_printf_i+0x164>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	079b      	lsls	r3, r3, #30
 800718c:	d413      	bmi.n	80071b6 <_printf_i+0x23a>
 800718e:	68e0      	ldr	r0, [r4, #12]
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	4298      	cmp	r0, r3
 8007194:	bfb8      	it	lt
 8007196:	4618      	movlt	r0, r3
 8007198:	e7a4      	b.n	80070e4 <_printf_i+0x168>
 800719a:	2301      	movs	r3, #1
 800719c:	4632      	mov	r2, r6
 800719e:	4649      	mov	r1, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	47d0      	blx	sl
 80071a4:	3001      	adds	r0, #1
 80071a6:	d09b      	beq.n	80070e0 <_printf_i+0x164>
 80071a8:	3501      	adds	r5, #1
 80071aa:	68e3      	ldr	r3, [r4, #12]
 80071ac:	9903      	ldr	r1, [sp, #12]
 80071ae:	1a5b      	subs	r3, r3, r1
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	dcf2      	bgt.n	800719a <_printf_i+0x21e>
 80071b4:	e7eb      	b.n	800718e <_printf_i+0x212>
 80071b6:	2500      	movs	r5, #0
 80071b8:	f104 0619 	add.w	r6, r4, #25
 80071bc:	e7f5      	b.n	80071aa <_printf_i+0x22e>
 80071be:	bf00      	nop
 80071c0:	080097ca 	.word	0x080097ca
 80071c4:	080097db 	.word	0x080097db

080071c8 <_sbrk_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d06      	ldr	r5, [pc, #24]	; (80071e4 <_sbrk_r+0x1c>)
 80071cc:	2300      	movs	r3, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	602b      	str	r3, [r5, #0]
 80071d4:	f7fb fa40 	bl	8002658 <_sbrk>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_sbrk_r+0x1a>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_sbrk_r+0x1a>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	200003c4 	.word	0x200003c4

080071e8 <sniprintf>:
 80071e8:	b40c      	push	{r2, r3}
 80071ea:	b530      	push	{r4, r5, lr}
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <sniprintf+0x64>)
 80071ee:	1e0c      	subs	r4, r1, #0
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	b09d      	sub	sp, #116	; 0x74
 80071f4:	da08      	bge.n	8007208 <sniprintf+0x20>
 80071f6:	238b      	movs	r3, #139	; 0x8b
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	f04f 30ff 	mov.w	r0, #4294967295
 80071fe:	b01d      	add	sp, #116	; 0x74
 8007200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007204:	b002      	add	sp, #8
 8007206:	4770      	bx	lr
 8007208:	f44f 7302 	mov.w	r3, #520	; 0x208
 800720c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007210:	bf14      	ite	ne
 8007212:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007216:	4623      	moveq	r3, r4
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	9307      	str	r3, [sp, #28]
 800721c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007220:	9002      	str	r0, [sp, #8]
 8007222:	9006      	str	r0, [sp, #24]
 8007224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800722a:	ab21      	add	r3, sp, #132	; 0x84
 800722c:	a902      	add	r1, sp, #8
 800722e:	4628      	mov	r0, r5
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f001 faad 	bl	8008790 <_svfiprintf_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	bfbc      	itt	lt
 800723a:	238b      	movlt	r3, #139	; 0x8b
 800723c:	602b      	strlt	r3, [r5, #0]
 800723e:	2c00      	cmp	r4, #0
 8007240:	d0dd      	beq.n	80071fe <sniprintf+0x16>
 8007242:	9b02      	ldr	r3, [sp, #8]
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	e7d9      	b.n	80071fe <sniprintf+0x16>
 800724a:	bf00      	nop
 800724c:	20000018 	.word	0x20000018

08007250 <siprintf>:
 8007250:	b40e      	push	{r1, r2, r3}
 8007252:	b500      	push	{lr}
 8007254:	b09c      	sub	sp, #112	; 0x70
 8007256:	ab1d      	add	r3, sp, #116	; 0x74
 8007258:	9002      	str	r0, [sp, #8]
 800725a:	9006      	str	r0, [sp, #24]
 800725c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007260:	4809      	ldr	r0, [pc, #36]	; (8007288 <siprintf+0x38>)
 8007262:	9107      	str	r1, [sp, #28]
 8007264:	9104      	str	r1, [sp, #16]
 8007266:	4909      	ldr	r1, [pc, #36]	; (800728c <siprintf+0x3c>)
 8007268:	f853 2b04 	ldr.w	r2, [r3], #4
 800726c:	9105      	str	r1, [sp, #20]
 800726e:	6800      	ldr	r0, [r0, #0]
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	a902      	add	r1, sp, #8
 8007274:	f001 fa8c 	bl	8008790 <_svfiprintf_r>
 8007278:	9b02      	ldr	r3, [sp, #8]
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	b01c      	add	sp, #112	; 0x70
 8007280:	f85d eb04 	ldr.w	lr, [sp], #4
 8007284:	b003      	add	sp, #12
 8007286:	4770      	bx	lr
 8007288:	20000018 	.word	0x20000018
 800728c:	ffff0208 	.word	0xffff0208

08007290 <quorem>:
 8007290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	6903      	ldr	r3, [r0, #16]
 8007296:	690c      	ldr	r4, [r1, #16]
 8007298:	42a3      	cmp	r3, r4
 800729a:	4607      	mov	r7, r0
 800729c:	f2c0 8081 	blt.w	80073a2 <quorem+0x112>
 80072a0:	3c01      	subs	r4, #1
 80072a2:	f101 0814 	add.w	r8, r1, #20
 80072a6:	f100 0514 	add.w	r5, r0, #20
 80072aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b8:	3301      	adds	r3, #1
 80072ba:	429a      	cmp	r2, r3
 80072bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80072c8:	d331      	bcc.n	800732e <quorem+0x9e>
 80072ca:	f04f 0e00 	mov.w	lr, #0
 80072ce:	4640      	mov	r0, r8
 80072d0:	46ac      	mov	ip, r5
 80072d2:	46f2      	mov	sl, lr
 80072d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072d8:	b293      	uxth	r3, r2
 80072da:	fb06 e303 	mla	r3, r6, r3, lr
 80072de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ebaa 0303 	sub.w	r3, sl, r3
 80072e8:	f8dc a000 	ldr.w	sl, [ip]
 80072ec:	0c12      	lsrs	r2, r2, #16
 80072ee:	fa13 f38a 	uxtah	r3, r3, sl
 80072f2:	fb06 e202 	mla	r2, r6, r2, lr
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	9b00      	ldr	r3, [sp, #0]
 80072fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072fe:	b292      	uxth	r2, r2
 8007300:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007308:	f8bd 3000 	ldrh.w	r3, [sp]
 800730c:	4581      	cmp	r9, r0
 800730e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007312:	f84c 3b04 	str.w	r3, [ip], #4
 8007316:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800731a:	d2db      	bcs.n	80072d4 <quorem+0x44>
 800731c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007320:	b92b      	cbnz	r3, 800732e <quorem+0x9e>
 8007322:	9b01      	ldr	r3, [sp, #4]
 8007324:	3b04      	subs	r3, #4
 8007326:	429d      	cmp	r5, r3
 8007328:	461a      	mov	r2, r3
 800732a:	d32e      	bcc.n	800738a <quorem+0xfa>
 800732c:	613c      	str	r4, [r7, #16]
 800732e:	4638      	mov	r0, r7
 8007330:	f001 f8ba 	bl	80084a8 <__mcmp>
 8007334:	2800      	cmp	r0, #0
 8007336:	db24      	blt.n	8007382 <quorem+0xf2>
 8007338:	3601      	adds	r6, #1
 800733a:	4628      	mov	r0, r5
 800733c:	f04f 0c00 	mov.w	ip, #0
 8007340:	f858 2b04 	ldr.w	r2, [r8], #4
 8007344:	f8d0 e000 	ldr.w	lr, [r0]
 8007348:	b293      	uxth	r3, r2
 800734a:	ebac 0303 	sub.w	r3, ip, r3
 800734e:	0c12      	lsrs	r2, r2, #16
 8007350:	fa13 f38e 	uxtah	r3, r3, lr
 8007354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800735c:	b29b      	uxth	r3, r3
 800735e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007362:	45c1      	cmp	r9, r8
 8007364:	f840 3b04 	str.w	r3, [r0], #4
 8007368:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800736c:	d2e8      	bcs.n	8007340 <quorem+0xb0>
 800736e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007376:	b922      	cbnz	r2, 8007382 <quorem+0xf2>
 8007378:	3b04      	subs	r3, #4
 800737a:	429d      	cmp	r5, r3
 800737c:	461a      	mov	r2, r3
 800737e:	d30a      	bcc.n	8007396 <quorem+0x106>
 8007380:	613c      	str	r4, [r7, #16]
 8007382:	4630      	mov	r0, r6
 8007384:	b003      	add	sp, #12
 8007386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	3b04      	subs	r3, #4
 800738e:	2a00      	cmp	r2, #0
 8007390:	d1cc      	bne.n	800732c <quorem+0x9c>
 8007392:	3c01      	subs	r4, #1
 8007394:	e7c7      	b.n	8007326 <quorem+0x96>
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	3b04      	subs	r3, #4
 800739a:	2a00      	cmp	r2, #0
 800739c:	d1f0      	bne.n	8007380 <quorem+0xf0>
 800739e:	3c01      	subs	r4, #1
 80073a0:	e7eb      	b.n	800737a <quorem+0xea>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e7ee      	b.n	8007384 <quorem+0xf4>
	...

080073a8 <_dtoa_r>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	ed2d 8b04 	vpush	{d8-d9}
 80073b0:	ec57 6b10 	vmov	r6, r7, d0
 80073b4:	b093      	sub	sp, #76	; 0x4c
 80073b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073bc:	9106      	str	r1, [sp, #24]
 80073be:	ee10 aa10 	vmov	sl, s0
 80073c2:	4604      	mov	r4, r0
 80073c4:	9209      	str	r2, [sp, #36]	; 0x24
 80073c6:	930c      	str	r3, [sp, #48]	; 0x30
 80073c8:	46bb      	mov	fp, r7
 80073ca:	b975      	cbnz	r5, 80073ea <_dtoa_r+0x42>
 80073cc:	2010      	movs	r0, #16
 80073ce:	f7ff f97b 	bl	80066c8 <malloc>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6260      	str	r0, [r4, #36]	; 0x24
 80073d6:	b920      	cbnz	r0, 80073e2 <_dtoa_r+0x3a>
 80073d8:	4ba7      	ldr	r3, [pc, #668]	; (8007678 <_dtoa_r+0x2d0>)
 80073da:	21ea      	movs	r1, #234	; 0xea
 80073dc:	48a7      	ldr	r0, [pc, #668]	; (800767c <_dtoa_r+0x2d4>)
 80073de:	f001 fad7 	bl	8008990 <__assert_func>
 80073e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073e6:	6005      	str	r5, [r0, #0]
 80073e8:	60c5      	str	r5, [r0, #12]
 80073ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	b151      	cbz	r1, 8007406 <_dtoa_r+0x5e>
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	604a      	str	r2, [r1, #4]
 80073f4:	2301      	movs	r3, #1
 80073f6:	4093      	lsls	r3, r2
 80073f8:	608b      	str	r3, [r1, #8]
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fe12 	bl	8008024 <_Bfree>
 8007400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	1e3b      	subs	r3, r7, #0
 8007408:	bfaa      	itet	ge
 800740a:	2300      	movge	r3, #0
 800740c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007410:	f8c8 3000 	strge.w	r3, [r8]
 8007414:	4b9a      	ldr	r3, [pc, #616]	; (8007680 <_dtoa_r+0x2d8>)
 8007416:	bfbc      	itt	lt
 8007418:	2201      	movlt	r2, #1
 800741a:	f8c8 2000 	strlt.w	r2, [r8]
 800741e:	ea33 030b 	bics.w	r3, r3, fp
 8007422:	d11b      	bne.n	800745c <_dtoa_r+0xb4>
 8007424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007426:	f242 730f 	movw	r3, #9999	; 0x270f
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007430:	4333      	orrs	r3, r6
 8007432:	f000 8592 	beq.w	8007f5a <_dtoa_r+0xbb2>
 8007436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007438:	b963      	cbnz	r3, 8007454 <_dtoa_r+0xac>
 800743a:	4b92      	ldr	r3, [pc, #584]	; (8007684 <_dtoa_r+0x2dc>)
 800743c:	e022      	b.n	8007484 <_dtoa_r+0xdc>
 800743e:	4b92      	ldr	r3, [pc, #584]	; (8007688 <_dtoa_r+0x2e0>)
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	3308      	adds	r3, #8
 8007444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	9801      	ldr	r0, [sp, #4]
 800744a:	b013      	add	sp, #76	; 0x4c
 800744c:	ecbd 8b04 	vpop	{d8-d9}
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	4b8b      	ldr	r3, [pc, #556]	; (8007684 <_dtoa_r+0x2dc>)
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	3303      	adds	r3, #3
 800745a:	e7f3      	b.n	8007444 <_dtoa_r+0x9c>
 800745c:	2200      	movs	r2, #0
 800745e:	2300      	movs	r3, #0
 8007460:	4650      	mov	r0, sl
 8007462:	4659      	mov	r1, fp
 8007464:	f7f9 fb50 	bl	8000b08 <__aeabi_dcmpeq>
 8007468:	ec4b ab19 	vmov	d9, sl, fp
 800746c:	4680      	mov	r8, r0
 800746e:	b158      	cbz	r0, 8007488 <_dtoa_r+0xe0>
 8007470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007472:	2301      	movs	r3, #1
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 856b 	beq.w	8007f54 <_dtoa_r+0xbac>
 800747e:	4883      	ldr	r0, [pc, #524]	; (800768c <_dtoa_r+0x2e4>)
 8007480:	6018      	str	r0, [r3, #0]
 8007482:	1e43      	subs	r3, r0, #1
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	e7df      	b.n	8007448 <_dtoa_r+0xa0>
 8007488:	ec4b ab10 	vmov	d0, sl, fp
 800748c:	aa10      	add	r2, sp, #64	; 0x40
 800748e:	a911      	add	r1, sp, #68	; 0x44
 8007490:	4620      	mov	r0, r4
 8007492:	f001 f8af 	bl	80085f4 <__d2b>
 8007496:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800749a:	ee08 0a10 	vmov	s16, r0
 800749e:	2d00      	cmp	r5, #0
 80074a0:	f000 8084 	beq.w	80075ac <_dtoa_r+0x204>
 80074a4:	ee19 3a90 	vmov	r3, s19
 80074a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074b0:	4656      	mov	r6, sl
 80074b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074be:	4b74      	ldr	r3, [pc, #464]	; (8007690 <_dtoa_r+0x2e8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f8 feff 	bl	80002c8 <__aeabi_dsub>
 80074ca:	a365      	add	r3, pc, #404	; (adr r3, 8007660 <_dtoa_r+0x2b8>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 f8b2 	bl	8000638 <__aeabi_dmul>
 80074d4:	a364      	add	r3, pc, #400	; (adr r3, 8007668 <_dtoa_r+0x2c0>)
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f8 fef7 	bl	80002cc <__adddf3>
 80074de:	4606      	mov	r6, r0
 80074e0:	4628      	mov	r0, r5
 80074e2:	460f      	mov	r7, r1
 80074e4:	f7f9 f83e 	bl	8000564 <__aeabi_i2d>
 80074e8:	a361      	add	r3, pc, #388	; (adr r3, 8007670 <_dtoa_r+0x2c8>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f8a3 	bl	8000638 <__aeabi_dmul>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f8 fee7 	bl	80002cc <__adddf3>
 80074fe:	4606      	mov	r6, r0
 8007500:	460f      	mov	r7, r1
 8007502:	f7f9 fb49 	bl	8000b98 <__aeabi_d2iz>
 8007506:	2200      	movs	r2, #0
 8007508:	9000      	str	r0, [sp, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f9 fb04 	bl	8000b1c <__aeabi_dcmplt>
 8007514:	b150      	cbz	r0, 800752c <_dtoa_r+0x184>
 8007516:	9800      	ldr	r0, [sp, #0]
 8007518:	f7f9 f824 	bl	8000564 <__aeabi_i2d>
 800751c:	4632      	mov	r2, r6
 800751e:	463b      	mov	r3, r7
 8007520:	f7f9 faf2 	bl	8000b08 <__aeabi_dcmpeq>
 8007524:	b910      	cbnz	r0, 800752c <_dtoa_r+0x184>
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	3b01      	subs	r3, #1
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	2b16      	cmp	r3, #22
 8007530:	d85a      	bhi.n	80075e8 <_dtoa_r+0x240>
 8007532:	9a00      	ldr	r2, [sp, #0]
 8007534:	4b57      	ldr	r3, [pc, #348]	; (8007694 <_dtoa_r+0x2ec>)
 8007536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	ec51 0b19 	vmov	r0, r1, d9
 8007542:	f7f9 faeb 	bl	8000b1c <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d050      	beq.n	80075ec <_dtoa_r+0x244>
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	3b01      	subs	r3, #1
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2300      	movs	r3, #0
 8007552:	930b      	str	r3, [sp, #44]	; 0x2c
 8007554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007556:	1b5d      	subs	r5, r3, r5
 8007558:	1e6b      	subs	r3, r5, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	bf45      	ittet	mi
 800755e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007562:	9304      	strmi	r3, [sp, #16]
 8007564:	2300      	movpl	r3, #0
 8007566:	2300      	movmi	r3, #0
 8007568:	bf4c      	ite	mi
 800756a:	9305      	strmi	r3, [sp, #20]
 800756c:	9304      	strpl	r3, [sp, #16]
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	db3d      	blt.n	80075f0 <_dtoa_r+0x248>
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	9a00      	ldr	r2, [sp, #0]
 8007578:	920a      	str	r2, [sp, #40]	; 0x28
 800757a:	4413      	add	r3, r2
 800757c:	9305      	str	r3, [sp, #20]
 800757e:	2300      	movs	r3, #0
 8007580:	9307      	str	r3, [sp, #28]
 8007582:	9b06      	ldr	r3, [sp, #24]
 8007584:	2b09      	cmp	r3, #9
 8007586:	f200 8089 	bhi.w	800769c <_dtoa_r+0x2f4>
 800758a:	2b05      	cmp	r3, #5
 800758c:	bfc4      	itt	gt
 800758e:	3b04      	subgt	r3, #4
 8007590:	9306      	strgt	r3, [sp, #24]
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	f1a3 0302 	sub.w	r3, r3, #2
 8007598:	bfcc      	ite	gt
 800759a:	2500      	movgt	r5, #0
 800759c:	2501      	movle	r5, #1
 800759e:	2b03      	cmp	r3, #3
 80075a0:	f200 8087 	bhi.w	80076b2 <_dtoa_r+0x30a>
 80075a4:	e8df f003 	tbb	[pc, r3]
 80075a8:	59383a2d 	.word	0x59383a2d
 80075ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075b0:	441d      	add	r5, r3
 80075b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	bfc1      	itttt	gt
 80075ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80075c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075ca:	bfda      	itte	le
 80075cc:	f1c3 0320 	rsble	r3, r3, #32
 80075d0:	fa06 f003 	lslle.w	r0, r6, r3
 80075d4:	4318      	orrgt	r0, r3
 80075d6:	f7f8 ffb5 	bl	8000544 <__aeabi_ui2d>
 80075da:	2301      	movs	r3, #1
 80075dc:	4606      	mov	r6, r0
 80075de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075e2:	3d01      	subs	r5, #1
 80075e4:	930e      	str	r3, [sp, #56]	; 0x38
 80075e6:	e76a      	b.n	80074be <_dtoa_r+0x116>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7b2      	b.n	8007552 <_dtoa_r+0x1aa>
 80075ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80075ee:	e7b1      	b.n	8007554 <_dtoa_r+0x1ac>
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	9a00      	ldr	r2, [sp, #0]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	4253      	negs	r3, r2
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	2300      	movs	r3, #0
 80075fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007600:	e7bf      	b.n	8007582 <_dtoa_r+0x1da>
 8007602:	2300      	movs	r3, #0
 8007604:	9308      	str	r3, [sp, #32]
 8007606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	dc55      	bgt.n	80076b8 <_dtoa_r+0x310>
 800760c:	2301      	movs	r3, #1
 800760e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007612:	461a      	mov	r2, r3
 8007614:	9209      	str	r2, [sp, #36]	; 0x24
 8007616:	e00c      	b.n	8007632 <_dtoa_r+0x28a>
 8007618:	2301      	movs	r3, #1
 800761a:	e7f3      	b.n	8007604 <_dtoa_r+0x25c>
 800761c:	2300      	movs	r3, #0
 800761e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007620:	9308      	str	r3, [sp, #32]
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	4413      	add	r3, r2
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	3301      	adds	r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	9303      	str	r3, [sp, #12]
 800762e:	bfb8      	it	lt
 8007630:	2301      	movlt	r3, #1
 8007632:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007634:	2200      	movs	r2, #0
 8007636:	6042      	str	r2, [r0, #4]
 8007638:	2204      	movs	r2, #4
 800763a:	f102 0614 	add.w	r6, r2, #20
 800763e:	429e      	cmp	r6, r3
 8007640:	6841      	ldr	r1, [r0, #4]
 8007642:	d93d      	bls.n	80076c0 <_dtoa_r+0x318>
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fcad 	bl	8007fa4 <_Balloc>
 800764a:	9001      	str	r0, [sp, #4]
 800764c:	2800      	cmp	r0, #0
 800764e:	d13b      	bne.n	80076c8 <_dtoa_r+0x320>
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <_dtoa_r+0x2f0>)
 8007652:	4602      	mov	r2, r0
 8007654:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007658:	e6c0      	b.n	80073dc <_dtoa_r+0x34>
 800765a:	2301      	movs	r3, #1
 800765c:	e7df      	b.n	800761e <_dtoa_r+0x276>
 800765e:	bf00      	nop
 8007660:	636f4361 	.word	0x636f4361
 8007664:	3fd287a7 	.word	0x3fd287a7
 8007668:	8b60c8b3 	.word	0x8b60c8b3
 800766c:	3fc68a28 	.word	0x3fc68a28
 8007670:	509f79fb 	.word	0x509f79fb
 8007674:	3fd34413 	.word	0x3fd34413
 8007678:	080097f9 	.word	0x080097f9
 800767c:	08009810 	.word	0x08009810
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	080097f5 	.word	0x080097f5
 8007688:	080097ec 	.word	0x080097ec
 800768c:	080097c9 	.word	0x080097c9
 8007690:	3ff80000 	.word	0x3ff80000
 8007694:	08009900 	.word	0x08009900
 8007698:	0800986b 	.word	0x0800986b
 800769c:	2501      	movs	r5, #1
 800769e:	2300      	movs	r3, #0
 80076a0:	9306      	str	r3, [sp, #24]
 80076a2:	9508      	str	r5, [sp, #32]
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	2312      	movs	r3, #18
 80076b0:	e7b0      	b.n	8007614 <_dtoa_r+0x26c>
 80076b2:	2301      	movs	r3, #1
 80076b4:	9308      	str	r3, [sp, #32]
 80076b6:	e7f5      	b.n	80076a4 <_dtoa_r+0x2fc>
 80076b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076be:	e7b8      	b.n	8007632 <_dtoa_r+0x28a>
 80076c0:	3101      	adds	r1, #1
 80076c2:	6041      	str	r1, [r0, #4]
 80076c4:	0052      	lsls	r2, r2, #1
 80076c6:	e7b8      	b.n	800763a <_dtoa_r+0x292>
 80076c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ca:	9a01      	ldr	r2, [sp, #4]
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	2b0e      	cmp	r3, #14
 80076d2:	f200 809d 	bhi.w	8007810 <_dtoa_r+0x468>
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	f000 809a 	beq.w	8007810 <_dtoa_r+0x468>
 80076dc:	9b00      	ldr	r3, [sp, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dd32      	ble.n	8007748 <_dtoa_r+0x3a0>
 80076e2:	4ab7      	ldr	r2, [pc, #732]	; (80079c0 <_dtoa_r+0x618>)
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076f0:	9b00      	ldr	r3, [sp, #0]
 80076f2:	05d8      	lsls	r0, r3, #23
 80076f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80076f8:	d516      	bpl.n	8007728 <_dtoa_r+0x380>
 80076fa:	4bb2      	ldr	r3, [pc, #712]	; (80079c4 <_dtoa_r+0x61c>)
 80076fc:	ec51 0b19 	vmov	r0, r1, d9
 8007700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007704:	f7f9 f8c2 	bl	800088c <__aeabi_ddiv>
 8007708:	f007 070f 	and.w	r7, r7, #15
 800770c:	4682      	mov	sl, r0
 800770e:	468b      	mov	fp, r1
 8007710:	2503      	movs	r5, #3
 8007712:	4eac      	ldr	r6, [pc, #688]	; (80079c4 <_dtoa_r+0x61c>)
 8007714:	b957      	cbnz	r7, 800772c <_dtoa_r+0x384>
 8007716:	4642      	mov	r2, r8
 8007718:	464b      	mov	r3, r9
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f9 f8b5 	bl	800088c <__aeabi_ddiv>
 8007722:	4682      	mov	sl, r0
 8007724:	468b      	mov	fp, r1
 8007726:	e028      	b.n	800777a <_dtoa_r+0x3d2>
 8007728:	2502      	movs	r5, #2
 800772a:	e7f2      	b.n	8007712 <_dtoa_r+0x36a>
 800772c:	07f9      	lsls	r1, r7, #31
 800772e:	d508      	bpl.n	8007742 <_dtoa_r+0x39a>
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007738:	f7f8 ff7e 	bl	8000638 <__aeabi_dmul>
 800773c:	3501      	adds	r5, #1
 800773e:	4680      	mov	r8, r0
 8007740:	4689      	mov	r9, r1
 8007742:	107f      	asrs	r7, r7, #1
 8007744:	3608      	adds	r6, #8
 8007746:	e7e5      	b.n	8007714 <_dtoa_r+0x36c>
 8007748:	f000 809b 	beq.w	8007882 <_dtoa_r+0x4da>
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	4f9d      	ldr	r7, [pc, #628]	; (80079c4 <_dtoa_r+0x61c>)
 8007750:	425e      	negs	r6, r3
 8007752:	4b9b      	ldr	r3, [pc, #620]	; (80079c0 <_dtoa_r+0x618>)
 8007754:	f006 020f 	and.w	r2, r6, #15
 8007758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	ec51 0b19 	vmov	r0, r1, d9
 8007764:	f7f8 ff68 	bl	8000638 <__aeabi_dmul>
 8007768:	1136      	asrs	r6, r6, #4
 800776a:	4682      	mov	sl, r0
 800776c:	468b      	mov	fp, r1
 800776e:	2300      	movs	r3, #0
 8007770:	2502      	movs	r5, #2
 8007772:	2e00      	cmp	r6, #0
 8007774:	d17a      	bne.n	800786c <_dtoa_r+0x4c4>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1d3      	bne.n	8007722 <_dtoa_r+0x37a>
 800777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8082 	beq.w	8007886 <_dtoa_r+0x4de>
 8007782:	4b91      	ldr	r3, [pc, #580]	; (80079c8 <_dtoa_r+0x620>)
 8007784:	2200      	movs	r2, #0
 8007786:	4650      	mov	r0, sl
 8007788:	4659      	mov	r1, fp
 800778a:	f7f9 f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	d079      	beq.n	8007886 <_dtoa_r+0x4de>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d076      	beq.n	8007886 <_dtoa_r+0x4de>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd36      	ble.n	800780c <_dtoa_r+0x464>
 800779e:	9b00      	ldr	r3, [sp, #0]
 80077a0:	4650      	mov	r0, sl
 80077a2:	4659      	mov	r1, fp
 80077a4:	1e5f      	subs	r7, r3, #1
 80077a6:	2200      	movs	r2, #0
 80077a8:	4b88      	ldr	r3, [pc, #544]	; (80079cc <_dtoa_r+0x624>)
 80077aa:	f7f8 ff45 	bl	8000638 <__aeabi_dmul>
 80077ae:	9e02      	ldr	r6, [sp, #8]
 80077b0:	4682      	mov	sl, r0
 80077b2:	468b      	mov	fp, r1
 80077b4:	3501      	adds	r5, #1
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7f8 fed4 	bl	8000564 <__aeabi_i2d>
 80077bc:	4652      	mov	r2, sl
 80077be:	465b      	mov	r3, fp
 80077c0:	f7f8 ff3a 	bl	8000638 <__aeabi_dmul>
 80077c4:	4b82      	ldr	r3, [pc, #520]	; (80079d0 <_dtoa_r+0x628>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	f7f8 fd80 	bl	80002cc <__adddf3>
 80077cc:	46d0      	mov	r8, sl
 80077ce:	46d9      	mov	r9, fp
 80077d0:	4682      	mov	sl, r0
 80077d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d158      	bne.n	800788c <_dtoa_r+0x4e4>
 80077da:	4b7e      	ldr	r3, [pc, #504]	; (80079d4 <_dtoa_r+0x62c>)
 80077dc:	2200      	movs	r2, #0
 80077de:	4640      	mov	r0, r8
 80077e0:	4649      	mov	r1, r9
 80077e2:	f7f8 fd71 	bl	80002c8 <__aeabi_dsub>
 80077e6:	4652      	mov	r2, sl
 80077e8:	465b      	mov	r3, fp
 80077ea:	4680      	mov	r8, r0
 80077ec:	4689      	mov	r9, r1
 80077ee:	f7f9 f9b3 	bl	8000b58 <__aeabi_dcmpgt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f040 8295 	bne.w	8007d22 <_dtoa_r+0x97a>
 80077f8:	4652      	mov	r2, sl
 80077fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f9 f98b 	bl	8000b1c <__aeabi_dcmplt>
 8007806:	2800      	cmp	r0, #0
 8007808:	f040 8289 	bne.w	8007d1e <_dtoa_r+0x976>
 800780c:	ec5b ab19 	vmov	sl, fp, d9
 8007810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007812:	2b00      	cmp	r3, #0
 8007814:	f2c0 8148 	blt.w	8007aa8 <_dtoa_r+0x700>
 8007818:	9a00      	ldr	r2, [sp, #0]
 800781a:	2a0e      	cmp	r2, #14
 800781c:	f300 8144 	bgt.w	8007aa8 <_dtoa_r+0x700>
 8007820:	4b67      	ldr	r3, [pc, #412]	; (80079c0 <_dtoa_r+0x618>)
 8007822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007826:	e9d3 8900 	ldrd	r8, r9, [r3]
 800782a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	f280 80d5 	bge.w	80079dc <_dtoa_r+0x634>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f300 80d1 	bgt.w	80079dc <_dtoa_r+0x634>
 800783a:	f040 826f 	bne.w	8007d1c <_dtoa_r+0x974>
 800783e:	4b65      	ldr	r3, [pc, #404]	; (80079d4 <_dtoa_r+0x62c>)
 8007840:	2200      	movs	r2, #0
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f8 fef7 	bl	8000638 <__aeabi_dmul>
 800784a:	4652      	mov	r2, sl
 800784c:	465b      	mov	r3, fp
 800784e:	f7f9 f979 	bl	8000b44 <__aeabi_dcmpge>
 8007852:	9e03      	ldr	r6, [sp, #12]
 8007854:	4637      	mov	r7, r6
 8007856:	2800      	cmp	r0, #0
 8007858:	f040 8245 	bne.w	8007ce6 <_dtoa_r+0x93e>
 800785c:	9d01      	ldr	r5, [sp, #4]
 800785e:	2331      	movs	r3, #49	; 0x31
 8007860:	f805 3b01 	strb.w	r3, [r5], #1
 8007864:	9b00      	ldr	r3, [sp, #0]
 8007866:	3301      	adds	r3, #1
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	e240      	b.n	8007cee <_dtoa_r+0x946>
 800786c:	07f2      	lsls	r2, r6, #31
 800786e:	d505      	bpl.n	800787c <_dtoa_r+0x4d4>
 8007870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007874:	f7f8 fee0 	bl	8000638 <__aeabi_dmul>
 8007878:	3501      	adds	r5, #1
 800787a:	2301      	movs	r3, #1
 800787c:	1076      	asrs	r6, r6, #1
 800787e:	3708      	adds	r7, #8
 8007880:	e777      	b.n	8007772 <_dtoa_r+0x3ca>
 8007882:	2502      	movs	r5, #2
 8007884:	e779      	b.n	800777a <_dtoa_r+0x3d2>
 8007886:	9f00      	ldr	r7, [sp, #0]
 8007888:	9e03      	ldr	r6, [sp, #12]
 800788a:	e794      	b.n	80077b6 <_dtoa_r+0x40e>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	4b4c      	ldr	r3, [pc, #304]	; (80079c0 <_dtoa_r+0x618>)
 8007890:	4431      	add	r1, r6
 8007892:	910d      	str	r1, [sp, #52]	; 0x34
 8007894:	9908      	ldr	r1, [sp, #32]
 8007896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800789a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800789e:	2900      	cmp	r1, #0
 80078a0:	d043      	beq.n	800792a <_dtoa_r+0x582>
 80078a2:	494d      	ldr	r1, [pc, #308]	; (80079d8 <_dtoa_r+0x630>)
 80078a4:	2000      	movs	r0, #0
 80078a6:	f7f8 fff1 	bl	800088c <__aeabi_ddiv>
 80078aa:	4652      	mov	r2, sl
 80078ac:	465b      	mov	r3, fp
 80078ae:	f7f8 fd0b 	bl	80002c8 <__aeabi_dsub>
 80078b2:	9d01      	ldr	r5, [sp, #4]
 80078b4:	4682      	mov	sl, r0
 80078b6:	468b      	mov	fp, r1
 80078b8:	4649      	mov	r1, r9
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7f9 f96c 	bl	8000b98 <__aeabi_d2iz>
 80078c0:	4606      	mov	r6, r0
 80078c2:	f7f8 fe4f 	bl	8000564 <__aeabi_i2d>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fcfb 	bl	80002c8 <__aeabi_dsub>
 80078d2:	3630      	adds	r6, #48	; 0x30
 80078d4:	f805 6b01 	strb.w	r6, [r5], #1
 80078d8:	4652      	mov	r2, sl
 80078da:	465b      	mov	r3, fp
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	f7f9 f91c 	bl	8000b1c <__aeabi_dcmplt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d163      	bne.n	80079b0 <_dtoa_r+0x608>
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	4936      	ldr	r1, [pc, #216]	; (80079c8 <_dtoa_r+0x620>)
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f8 fcea 	bl	80002c8 <__aeabi_dsub>
 80078f4:	4652      	mov	r2, sl
 80078f6:	465b      	mov	r3, fp
 80078f8:	f7f9 f910 	bl	8000b1c <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 80b5 	bne.w	8007a6c <_dtoa_r+0x6c4>
 8007902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007904:	429d      	cmp	r5, r3
 8007906:	d081      	beq.n	800780c <_dtoa_r+0x464>
 8007908:	4b30      	ldr	r3, [pc, #192]	; (80079cc <_dtoa_r+0x624>)
 800790a:	2200      	movs	r2, #0
 800790c:	4650      	mov	r0, sl
 800790e:	4659      	mov	r1, fp
 8007910:	f7f8 fe92 	bl	8000638 <__aeabi_dmul>
 8007914:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <_dtoa_r+0x624>)
 8007916:	4682      	mov	sl, r0
 8007918:	468b      	mov	fp, r1
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	2200      	movs	r2, #0
 8007920:	f7f8 fe8a 	bl	8000638 <__aeabi_dmul>
 8007924:	4680      	mov	r8, r0
 8007926:	4689      	mov	r9, r1
 8007928:	e7c6      	b.n	80078b8 <_dtoa_r+0x510>
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	f7f8 fe83 	bl	8000638 <__aeabi_dmul>
 8007932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007934:	9d01      	ldr	r5, [sp, #4]
 8007936:	930f      	str	r3, [sp, #60]	; 0x3c
 8007938:	4682      	mov	sl, r0
 800793a:	468b      	mov	fp, r1
 800793c:	4649      	mov	r1, r9
 800793e:	4640      	mov	r0, r8
 8007940:	f7f9 f92a 	bl	8000b98 <__aeabi_d2iz>
 8007944:	4606      	mov	r6, r0
 8007946:	f7f8 fe0d 	bl	8000564 <__aeabi_i2d>
 800794a:	3630      	adds	r6, #48	; 0x30
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f8 fcb8 	bl	80002c8 <__aeabi_dsub>
 8007958:	f805 6b01 	strb.w	r6, [r5], #1
 800795c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800795e:	429d      	cmp	r5, r3
 8007960:	4680      	mov	r8, r0
 8007962:	4689      	mov	r9, r1
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	d124      	bne.n	80079b4 <_dtoa_r+0x60c>
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <_dtoa_r+0x630>)
 800796c:	4650      	mov	r0, sl
 800796e:	4659      	mov	r1, fp
 8007970:	f7f8 fcac 	bl	80002cc <__adddf3>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4640      	mov	r0, r8
 800797a:	4649      	mov	r1, r9
 800797c:	f7f9 f8ec 	bl	8000b58 <__aeabi_dcmpgt>
 8007980:	2800      	cmp	r0, #0
 8007982:	d173      	bne.n	8007a6c <_dtoa_r+0x6c4>
 8007984:	4652      	mov	r2, sl
 8007986:	465b      	mov	r3, fp
 8007988:	4913      	ldr	r1, [pc, #76]	; (80079d8 <_dtoa_r+0x630>)
 800798a:	2000      	movs	r0, #0
 800798c:	f7f8 fc9c 	bl	80002c8 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f9 f8c0 	bl	8000b1c <__aeabi_dcmplt>
 800799c:	2800      	cmp	r0, #0
 800799e:	f43f af35 	beq.w	800780c <_dtoa_r+0x464>
 80079a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079a4:	1e6b      	subs	r3, r5, #1
 80079a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ac:	2b30      	cmp	r3, #48	; 0x30
 80079ae:	d0f8      	beq.n	80079a2 <_dtoa_r+0x5fa>
 80079b0:	9700      	str	r7, [sp, #0]
 80079b2:	e049      	b.n	8007a48 <_dtoa_r+0x6a0>
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <_dtoa_r+0x624>)
 80079b6:	f7f8 fe3f 	bl	8000638 <__aeabi_dmul>
 80079ba:	4680      	mov	r8, r0
 80079bc:	4689      	mov	r9, r1
 80079be:	e7bd      	b.n	800793c <_dtoa_r+0x594>
 80079c0:	08009900 	.word	0x08009900
 80079c4:	080098d8 	.word	0x080098d8
 80079c8:	3ff00000 	.word	0x3ff00000
 80079cc:	40240000 	.word	0x40240000
 80079d0:	401c0000 	.word	0x401c0000
 80079d4:	40140000 	.word	0x40140000
 80079d8:	3fe00000 	.word	0x3fe00000
 80079dc:	9d01      	ldr	r5, [sp, #4]
 80079de:	4656      	mov	r6, sl
 80079e0:	465f      	mov	r7, fp
 80079e2:	4642      	mov	r2, r8
 80079e4:	464b      	mov	r3, r9
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f8 ff4f 	bl	800088c <__aeabi_ddiv>
 80079ee:	f7f9 f8d3 	bl	8000b98 <__aeabi_d2iz>
 80079f2:	4682      	mov	sl, r0
 80079f4:	f7f8 fdb6 	bl	8000564 <__aeabi_i2d>
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	f7f8 fe1c 	bl	8000638 <__aeabi_dmul>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a0c:	f7f8 fc5c 	bl	80002c8 <__aeabi_dsub>
 8007a10:	f805 6b01 	strb.w	r6, [r5], #1
 8007a14:	9e01      	ldr	r6, [sp, #4]
 8007a16:	9f03      	ldr	r7, [sp, #12]
 8007a18:	1bae      	subs	r6, r5, r6
 8007a1a:	42b7      	cmp	r7, r6
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	d135      	bne.n	8007a8e <_dtoa_r+0x6e6>
 8007a22:	f7f8 fc53 	bl	80002cc <__adddf3>
 8007a26:	4642      	mov	r2, r8
 8007a28:	464b      	mov	r3, r9
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460f      	mov	r7, r1
 8007a2e:	f7f9 f893 	bl	8000b58 <__aeabi_dcmpgt>
 8007a32:	b9d0      	cbnz	r0, 8007a6a <_dtoa_r+0x6c2>
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	f7f9 f864 	bl	8000b08 <__aeabi_dcmpeq>
 8007a40:	b110      	cbz	r0, 8007a48 <_dtoa_r+0x6a0>
 8007a42:	f01a 0f01 	tst.w	sl, #1
 8007a46:	d110      	bne.n	8007a6a <_dtoa_r+0x6c2>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	ee18 1a10 	vmov	r1, s16
 8007a4e:	f000 fae9 	bl	8008024 <_Bfree>
 8007a52:	2300      	movs	r3, #0
 8007a54:	9800      	ldr	r0, [sp, #0]
 8007a56:	702b      	strb	r3, [r5, #0]
 8007a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	6018      	str	r0, [r3, #0]
 8007a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f43f acf1 	beq.w	8007448 <_dtoa_r+0xa0>
 8007a66:	601d      	str	r5, [r3, #0]
 8007a68:	e4ee      	b.n	8007448 <_dtoa_r+0xa0>
 8007a6a:	9f00      	ldr	r7, [sp, #0]
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	461d      	mov	r5, r3
 8007a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a74:	2a39      	cmp	r2, #57	; 0x39
 8007a76:	d106      	bne.n	8007a86 <_dtoa_r+0x6de>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d1f7      	bne.n	8007a6e <_dtoa_r+0x6c6>
 8007a7e:	9901      	ldr	r1, [sp, #4]
 8007a80:	2230      	movs	r2, #48	; 0x30
 8007a82:	3701      	adds	r7, #1
 8007a84:	700a      	strb	r2, [r1, #0]
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	3201      	adds	r2, #1
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e790      	b.n	80079b0 <_dtoa_r+0x608>
 8007a8e:	4ba6      	ldr	r3, [pc, #664]	; (8007d28 <_dtoa_r+0x980>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	f7f8 fdd1 	bl	8000638 <__aeabi_dmul>
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	f7f9 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d09d      	beq.n	80079e2 <_dtoa_r+0x63a>
 8007aa6:	e7cf      	b.n	8007a48 <_dtoa_r+0x6a0>
 8007aa8:	9a08      	ldr	r2, [sp, #32]
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	f000 80d7 	beq.w	8007c5e <_dtoa_r+0x8b6>
 8007ab0:	9a06      	ldr	r2, [sp, #24]
 8007ab2:	2a01      	cmp	r2, #1
 8007ab4:	f300 80ba 	bgt.w	8007c2c <_dtoa_r+0x884>
 8007ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	f000 80b2 	beq.w	8007c24 <_dtoa_r+0x87c>
 8007ac0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ac4:	9e07      	ldr	r6, [sp, #28]
 8007ac6:	9d04      	ldr	r5, [sp, #16]
 8007ac8:	9a04      	ldr	r2, [sp, #16]
 8007aca:	441a      	add	r2, r3
 8007acc:	9204      	str	r2, [sp, #16]
 8007ace:	9a05      	ldr	r2, [sp, #20]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	441a      	add	r2, r3
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	9205      	str	r2, [sp, #20]
 8007ad8:	f000 fb5c 	bl	8008194 <__i2b>
 8007adc:	4607      	mov	r7, r0
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	dd0c      	ble.n	8007afc <_dtoa_r+0x754>
 8007ae2:	9b05      	ldr	r3, [sp, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd09      	ble.n	8007afc <_dtoa_r+0x754>
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	bfa8      	it	ge
 8007aee:	462b      	movge	r3, r5
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	9204      	str	r2, [sp, #16]
 8007af4:	9a05      	ldr	r2, [sp, #20]
 8007af6:	1aed      	subs	r5, r5, r3
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	b31b      	cbz	r3, 8007b48 <_dtoa_r+0x7a0>
 8007b00:	9b08      	ldr	r3, [sp, #32]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80af 	beq.w	8007c66 <_dtoa_r+0x8be>
 8007b08:	2e00      	cmp	r6, #0
 8007b0a:	dd13      	ble.n	8007b34 <_dtoa_r+0x78c>
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fbff 	bl	8008314 <__pow5mult>
 8007b16:	ee18 2a10 	vmov	r2, s16
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 fb4e 	bl	80081c0 <__multiply>
 8007b24:	ee18 1a10 	vmov	r1, s16
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fa7a 	bl	8008024 <_Bfree>
 8007b30:	ee08 8a10 	vmov	s16, r8
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	1b9a      	subs	r2, r3, r6
 8007b38:	d006      	beq.n	8007b48 <_dtoa_r+0x7a0>
 8007b3a:	ee18 1a10 	vmov	r1, s16
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fbe8 	bl	8008314 <__pow5mult>
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 fb22 	bl	8008194 <__i2b>
 8007b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	4606      	mov	r6, r0
 8007b56:	f340 8088 	ble.w	8007c6a <_dtoa_r+0x8c2>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4601      	mov	r1, r0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 fbd8 	bl	8008314 <__pow5mult>
 8007b64:	9b06      	ldr	r3, [sp, #24]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	4606      	mov	r6, r0
 8007b6a:	f340 8081 	ble.w	8007c70 <_dtoa_r+0x8c8>
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	6933      	ldr	r3, [r6, #16]
 8007b74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b78:	6918      	ldr	r0, [r3, #16]
 8007b7a:	f000 fabb 	bl	80080f4 <__hi0bits>
 8007b7e:	f1c0 0020 	rsb	r0, r0, #32
 8007b82:	9b05      	ldr	r3, [sp, #20]
 8007b84:	4418      	add	r0, r3
 8007b86:	f010 001f 	ands.w	r0, r0, #31
 8007b8a:	f000 8092 	beq.w	8007cb2 <_dtoa_r+0x90a>
 8007b8e:	f1c0 0320 	rsb	r3, r0, #32
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	f340 808a 	ble.w	8007cac <_dtoa_r+0x904>
 8007b98:	f1c0 001c 	rsb	r0, r0, #28
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	4403      	add	r3, r0
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	9b05      	ldr	r3, [sp, #20]
 8007ba4:	4403      	add	r3, r0
 8007ba6:	4405      	add	r5, r0
 8007ba8:	9305      	str	r3, [sp, #20]
 8007baa:	9b04      	ldr	r3, [sp, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd07      	ble.n	8007bc0 <_dtoa_r+0x818>
 8007bb0:	ee18 1a10 	vmov	r1, s16
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fc06 	bl	80083c8 <__lshift>
 8007bbc:	ee08 0a10 	vmov	s16, r0
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd05      	ble.n	8007bd2 <_dtoa_r+0x82a>
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fbfc 	bl	80083c8 <__lshift>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d06e      	beq.n	8007cb6 <_dtoa_r+0x90e>
 8007bd8:	ee18 0a10 	vmov	r0, s16
 8007bdc:	4631      	mov	r1, r6
 8007bde:	f000 fc63 	bl	80084a8 <__mcmp>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	da67      	bge.n	8007cb6 <_dtoa_r+0x90e>
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	ee18 1a10 	vmov	r1, s16
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fa37 	bl	8008068 <__multadd>
 8007bfa:	9b08      	ldr	r3, [sp, #32]
 8007bfc:	ee08 0a10 	vmov	s16, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 81b1 	beq.w	8007f68 <_dtoa_r+0xbc0>
 8007c06:	2300      	movs	r3, #0
 8007c08:	4639      	mov	r1, r7
 8007c0a:	220a      	movs	r2, #10
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fa2b 	bl	8008068 <__multadd>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	4607      	mov	r7, r0
 8007c18:	f300 808e 	bgt.w	8007d38 <_dtoa_r+0x990>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	dc51      	bgt.n	8007cc6 <_dtoa_r+0x91e>
 8007c22:	e089      	b.n	8007d38 <_dtoa_r+0x990>
 8007c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c2a:	e74b      	b.n	8007ac4 <_dtoa_r+0x71c>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1e5e      	subs	r6, r3, #1
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	42b3      	cmp	r3, r6
 8007c34:	bfbf      	itttt	lt
 8007c36:	9b07      	ldrlt	r3, [sp, #28]
 8007c38:	9607      	strlt	r6, [sp, #28]
 8007c3a:	1af2      	sublt	r2, r6, r3
 8007c3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c3e:	bfb6      	itet	lt
 8007c40:	189b      	addlt	r3, r3, r2
 8007c42:	1b9e      	subge	r6, r3, r6
 8007c44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	bfb8      	it	lt
 8007c4a:	2600      	movlt	r6, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bfb7      	itett	lt
 8007c50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c58:	1a9d      	sublt	r5, r3, r2
 8007c5a:	2300      	movlt	r3, #0
 8007c5c:	e734      	b.n	8007ac8 <_dtoa_r+0x720>
 8007c5e:	9e07      	ldr	r6, [sp, #28]
 8007c60:	9d04      	ldr	r5, [sp, #16]
 8007c62:	9f08      	ldr	r7, [sp, #32]
 8007c64:	e73b      	b.n	8007ade <_dtoa_r+0x736>
 8007c66:	9a07      	ldr	r2, [sp, #28]
 8007c68:	e767      	b.n	8007b3a <_dtoa_r+0x792>
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	dc18      	bgt.n	8007ca2 <_dtoa_r+0x8fa>
 8007c70:	f1ba 0f00 	cmp.w	sl, #0
 8007c74:	d115      	bne.n	8007ca2 <_dtoa_r+0x8fa>
 8007c76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7a:	b993      	cbnz	r3, 8007ca2 <_dtoa_r+0x8fa>
 8007c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c80:	0d1b      	lsrs	r3, r3, #20
 8007c82:	051b      	lsls	r3, r3, #20
 8007c84:	b183      	cbz	r3, 8007ca8 <_dtoa_r+0x900>
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	f04f 0801 	mov.w	r8, #1
 8007c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f47f af6a 	bne.w	8007b72 <_dtoa_r+0x7ca>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	e76f      	b.n	8007b82 <_dtoa_r+0x7da>
 8007ca2:	f04f 0800 	mov.w	r8, #0
 8007ca6:	e7f6      	b.n	8007c96 <_dtoa_r+0x8ee>
 8007ca8:	4698      	mov	r8, r3
 8007caa:	e7f4      	b.n	8007c96 <_dtoa_r+0x8ee>
 8007cac:	f43f af7d 	beq.w	8007baa <_dtoa_r+0x802>
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	301c      	adds	r0, #28
 8007cb4:	e772      	b.n	8007b9c <_dtoa_r+0x7f4>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc37      	bgt.n	8007d2c <_dtoa_r+0x984>
 8007cbc:	9b06      	ldr	r3, [sp, #24]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	dd34      	ble.n	8007d2c <_dtoa_r+0x984>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	9b02      	ldr	r3, [sp, #8]
 8007cc8:	b96b      	cbnz	r3, 8007ce6 <_dtoa_r+0x93e>
 8007cca:	4631      	mov	r1, r6
 8007ccc:	2205      	movs	r2, #5
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 f9ca 	bl	8008068 <__multadd>
 8007cd4:	4601      	mov	r1, r0
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	ee18 0a10 	vmov	r0, s16
 8007cdc:	f000 fbe4 	bl	80084a8 <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f73f adbb 	bgt.w	800785c <_dtoa_r+0x4b4>
 8007ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce8:	9d01      	ldr	r5, [sp, #4]
 8007cea:	43db      	mvns	r3, r3
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 f995 	bl	8008024 <_Bfree>
 8007cfa:	2f00      	cmp	r7, #0
 8007cfc:	f43f aea4 	beq.w	8007a48 <_dtoa_r+0x6a0>
 8007d00:	f1b8 0f00 	cmp.w	r8, #0
 8007d04:	d005      	beq.n	8007d12 <_dtoa_r+0x96a>
 8007d06:	45b8      	cmp	r8, r7
 8007d08:	d003      	beq.n	8007d12 <_dtoa_r+0x96a>
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 f989 	bl	8008024 <_Bfree>
 8007d12:	4639      	mov	r1, r7
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 f985 	bl	8008024 <_Bfree>
 8007d1a:	e695      	b.n	8007a48 <_dtoa_r+0x6a0>
 8007d1c:	2600      	movs	r6, #0
 8007d1e:	4637      	mov	r7, r6
 8007d20:	e7e1      	b.n	8007ce6 <_dtoa_r+0x93e>
 8007d22:	9700      	str	r7, [sp, #0]
 8007d24:	4637      	mov	r7, r6
 8007d26:	e599      	b.n	800785c <_dtoa_r+0x4b4>
 8007d28:	40240000 	.word	0x40240000
 8007d2c:	9b08      	ldr	r3, [sp, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80ca 	beq.w	8007ec8 <_dtoa_r+0xb20>
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	dd05      	ble.n	8007d48 <_dtoa_r+0x9a0>
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fb41 	bl	80083c8 <__lshift>
 8007d46:	4607      	mov	r7, r0
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	d05b      	beq.n	8007e06 <_dtoa_r+0xa5e>
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 f927 	bl	8007fa4 <_Balloc>
 8007d56:	4605      	mov	r5, r0
 8007d58:	b928      	cbnz	r0, 8007d66 <_dtoa_r+0x9be>
 8007d5a:	4b87      	ldr	r3, [pc, #540]	; (8007f78 <_dtoa_r+0xbd0>)
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d62:	f7ff bb3b 	b.w	80073dc <_dtoa_r+0x34>
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	3202      	adds	r2, #2
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	f107 010c 	add.w	r1, r7, #12
 8007d70:	300c      	adds	r0, #12
 8007d72:	f7fe fcc9 	bl	8006708 <memcpy>
 8007d76:	2201      	movs	r2, #1
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fb24 	bl	80083c8 <__lshift>
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	f103 0901 	add.w	r9, r3, #1
 8007d86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	f00a 0301 	and.w	r3, sl, #1
 8007d92:	46b8      	mov	r8, r7
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	4607      	mov	r7, r0
 8007d98:	4631      	mov	r1, r6
 8007d9a:	ee18 0a10 	vmov	r0, s16
 8007d9e:	f7ff fa77 	bl	8007290 <quorem>
 8007da2:	4641      	mov	r1, r8
 8007da4:	9002      	str	r0, [sp, #8]
 8007da6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007daa:	ee18 0a10 	vmov	r0, s16
 8007dae:	f000 fb7b 	bl	80084a8 <__mcmp>
 8007db2:	463a      	mov	r2, r7
 8007db4:	9003      	str	r0, [sp, #12]
 8007db6:	4631      	mov	r1, r6
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fb91 	bl	80084e0 <__mdiff>
 8007dbe:	68c2      	ldr	r2, [r0, #12]
 8007dc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	bb02      	cbnz	r2, 8007e0a <_dtoa_r+0xa62>
 8007dc8:	4601      	mov	r1, r0
 8007dca:	ee18 0a10 	vmov	r0, s16
 8007dce:	f000 fb6b 	bl	80084a8 <__mcmp>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	9207      	str	r2, [sp, #28]
 8007dda:	f000 f923 	bl	8008024 <_Bfree>
 8007dde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007de2:	ea43 0102 	orr.w	r1, r3, r2
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	430b      	orrs	r3, r1
 8007dea:	464d      	mov	r5, r9
 8007dec:	d10f      	bne.n	8007e0e <_dtoa_r+0xa66>
 8007dee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007df2:	d02a      	beq.n	8007e4a <_dtoa_r+0xaa2>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dd02      	ble.n	8007e00 <_dtoa_r+0xa58>
 8007dfa:	9b02      	ldr	r3, [sp, #8]
 8007dfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e00:	f88b a000 	strb.w	sl, [fp]
 8007e04:	e775      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007e06:	4638      	mov	r0, r7
 8007e08:	e7ba      	b.n	8007d80 <_dtoa_r+0x9d8>
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	e7e2      	b.n	8007dd4 <_dtoa_r+0xa2c>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	db04      	blt.n	8007e1e <_dtoa_r+0xa76>
 8007e14:	9906      	ldr	r1, [sp, #24]
 8007e16:	430b      	orrs	r3, r1
 8007e18:	9904      	ldr	r1, [sp, #16]
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	d122      	bne.n	8007e64 <_dtoa_r+0xabc>
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	ddee      	ble.n	8007e00 <_dtoa_r+0xa58>
 8007e22:	ee18 1a10 	vmov	r1, s16
 8007e26:	2201      	movs	r2, #1
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 facd 	bl	80083c8 <__lshift>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	ee08 0a10 	vmov	s16, r0
 8007e34:	f000 fb38 	bl	80084a8 <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dc03      	bgt.n	8007e44 <_dtoa_r+0xa9c>
 8007e3c:	d1e0      	bne.n	8007e00 <_dtoa_r+0xa58>
 8007e3e:	f01a 0f01 	tst.w	sl, #1
 8007e42:	d0dd      	beq.n	8007e00 <_dtoa_r+0xa58>
 8007e44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e48:	d1d7      	bne.n	8007dfa <_dtoa_r+0xa52>
 8007e4a:	2339      	movs	r3, #57	; 0x39
 8007e4c:	f88b 3000 	strb.w	r3, [fp]
 8007e50:	462b      	mov	r3, r5
 8007e52:	461d      	mov	r5, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e5a:	2a39      	cmp	r2, #57	; 0x39
 8007e5c:	d071      	beq.n	8007f42 <_dtoa_r+0xb9a>
 8007e5e:	3201      	adds	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e746      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007e64:	2a00      	cmp	r2, #0
 8007e66:	dd07      	ble.n	8007e78 <_dtoa_r+0xad0>
 8007e68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e6c:	d0ed      	beq.n	8007e4a <_dtoa_r+0xaa2>
 8007e6e:	f10a 0301 	add.w	r3, sl, #1
 8007e72:	f88b 3000 	strb.w	r3, [fp]
 8007e76:	e73c      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007e78:	9b05      	ldr	r3, [sp, #20]
 8007e7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e7e:	4599      	cmp	r9, r3
 8007e80:	d047      	beq.n	8007f12 <_dtoa_r+0xb6a>
 8007e82:	ee18 1a10 	vmov	r1, s16
 8007e86:	2300      	movs	r3, #0
 8007e88:	220a      	movs	r2, #10
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f8ec 	bl	8008068 <__multadd>
 8007e90:	45b8      	cmp	r8, r7
 8007e92:	ee08 0a10 	vmov	s16, r0
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	f04f 020a 	mov.w	r2, #10
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	d106      	bne.n	8007eb2 <_dtoa_r+0xb0a>
 8007ea4:	f000 f8e0 	bl	8008068 <__multadd>
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f109 0901 	add.w	r9, r9, #1
 8007eb0:	e772      	b.n	8007d98 <_dtoa_r+0x9f0>
 8007eb2:	f000 f8d9 	bl	8008068 <__multadd>
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	4680      	mov	r8, r0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f8d2 	bl	8008068 <__multadd>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	e7f1      	b.n	8007eac <_dtoa_r+0xb04>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	9d01      	ldr	r5, [sp, #4]
 8007ece:	ee18 0a10 	vmov	r0, s16
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	f7ff f9dc 	bl	8007290 <quorem>
 8007ed8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	f805 ab01 	strb.w	sl, [r5], #1
 8007ee2:	1aea      	subs	r2, r5, r3
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	dd09      	ble.n	8007efe <_dtoa_r+0xb56>
 8007eea:	ee18 1a10 	vmov	r1, s16
 8007eee:	2300      	movs	r3, #0
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f8b8 	bl	8008068 <__multadd>
 8007ef8:	ee08 0a10 	vmov	s16, r0
 8007efc:	e7e7      	b.n	8007ece <_dtoa_r+0xb26>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bfc8      	it	gt
 8007f04:	461d      	movgt	r5, r3
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	bfd8      	it	le
 8007f0a:	2501      	movle	r5, #1
 8007f0c:	441d      	add	r5, r3
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	ee18 1a10 	vmov	r1, s16
 8007f16:	2201      	movs	r2, #1
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fa55 	bl	80083c8 <__lshift>
 8007f1e:	4631      	mov	r1, r6
 8007f20:	ee08 0a10 	vmov	s16, r0
 8007f24:	f000 fac0 	bl	80084a8 <__mcmp>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	dc91      	bgt.n	8007e50 <_dtoa_r+0xaa8>
 8007f2c:	d102      	bne.n	8007f34 <_dtoa_r+0xb8c>
 8007f2e:	f01a 0f01 	tst.w	sl, #1
 8007f32:	d18d      	bne.n	8007e50 <_dtoa_r+0xaa8>
 8007f34:	462b      	mov	r3, r5
 8007f36:	461d      	mov	r5, r3
 8007f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3c:	2a30      	cmp	r2, #48	; 0x30
 8007f3e:	d0fa      	beq.n	8007f36 <_dtoa_r+0xb8e>
 8007f40:	e6d7      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007f42:	9a01      	ldr	r2, [sp, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d184      	bne.n	8007e52 <_dtoa_r+0xaaa>
 8007f48:	9b00      	ldr	r3, [sp, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2331      	movs	r3, #49	; 0x31
 8007f50:	7013      	strb	r3, [r2, #0]
 8007f52:	e6ce      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <_dtoa_r+0xbd4>)
 8007f56:	f7ff ba95 	b.w	8007484 <_dtoa_r+0xdc>
 8007f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f aa6e 	bne.w	800743e <_dtoa_r+0x96>
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <_dtoa_r+0xbd8>)
 8007f64:	f7ff ba8e 	b.w	8007484 <_dtoa_r+0xdc>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dcae      	bgt.n	8007ecc <_dtoa_r+0xb24>
 8007f6e:	9b06      	ldr	r3, [sp, #24]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	f73f aea8 	bgt.w	8007cc6 <_dtoa_r+0x91e>
 8007f76:	e7a9      	b.n	8007ecc <_dtoa_r+0xb24>
 8007f78:	0800986b 	.word	0x0800986b
 8007f7c:	080097c8 	.word	0x080097c8
 8007f80:	080097ec 	.word	0x080097ec

08007f84 <_localeconv_r>:
 8007f84:	4800      	ldr	r0, [pc, #0]	; (8007f88 <_localeconv_r+0x4>)
 8007f86:	4770      	bx	lr
 8007f88:	2000016c 	.word	0x2000016c

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f000 bd30 	b.w	80089f2 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	200003c8 	.word	0x200003c8

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f000 bd2b 	b.w	80089f4 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200003c8 	.word	0x200003c8

08007fa4 <_Balloc>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	b976      	cbnz	r6, 8007fcc <_Balloc+0x28>
 8007fae:	2010      	movs	r0, #16
 8007fb0:	f7fe fb8a 	bl	80066c8 <malloc>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8007fb8:	b920      	cbnz	r0, 8007fc4 <_Balloc+0x20>
 8007fba:	4b18      	ldr	r3, [pc, #96]	; (800801c <_Balloc+0x78>)
 8007fbc:	4818      	ldr	r0, [pc, #96]	; (8008020 <_Balloc+0x7c>)
 8007fbe:	2166      	movs	r1, #102	; 0x66
 8007fc0:	f000 fce6 	bl	8008990 <__assert_func>
 8007fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc8:	6006      	str	r6, [r0, #0]
 8007fca:	60c6      	str	r6, [r0, #12]
 8007fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fce:	68f3      	ldr	r3, [r6, #12]
 8007fd0:	b183      	cbz	r3, 8007ff4 <_Balloc+0x50>
 8007fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fda:	b9b8      	cbnz	r0, 800800c <_Balloc+0x68>
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe2:	1d72      	adds	r2, r6, #5
 8007fe4:	0092      	lsls	r2, r2, #2
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fb60 	bl	80086ac <_calloc_r>
 8007fec:	b160      	cbz	r0, 8008008 <_Balloc+0x64>
 8007fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff2:	e00e      	b.n	8008012 <_Balloc+0x6e>
 8007ff4:	2221      	movs	r2, #33	; 0x21
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fb57 	bl	80086ac <_calloc_r>
 8007ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008000:	60f0      	str	r0, [r6, #12]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <_Balloc+0x2e>
 8008008:	2000      	movs	r0, #0
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	6802      	ldr	r2, [r0, #0]
 800800e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008012:	2300      	movs	r3, #0
 8008014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008018:	e7f7      	b.n	800800a <_Balloc+0x66>
 800801a:	bf00      	nop
 800801c:	080097f9 	.word	0x080097f9
 8008020:	0800987c 	.word	0x0800987c

08008024 <_Bfree>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b976      	cbnz	r6, 800804c <_Bfree+0x28>
 800802e:	2010      	movs	r0, #16
 8008030:	f7fe fb4a 	bl	80066c8 <malloc>
 8008034:	4602      	mov	r2, r0
 8008036:	6268      	str	r0, [r5, #36]	; 0x24
 8008038:	b920      	cbnz	r0, 8008044 <_Bfree+0x20>
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <_Bfree+0x3c>)
 800803c:	4809      	ldr	r0, [pc, #36]	; (8008064 <_Bfree+0x40>)
 800803e:	218a      	movs	r1, #138	; 0x8a
 8008040:	f000 fca6 	bl	8008990 <__assert_func>
 8008044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008048:	6006      	str	r6, [r0, #0]
 800804a:	60c6      	str	r6, [r0, #12]
 800804c:	b13c      	cbz	r4, 800805e <_Bfree+0x3a>
 800804e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008050:	6862      	ldr	r2, [r4, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008058:	6021      	str	r1, [r4, #0]
 800805a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	080097f9 	.word	0x080097f9
 8008064:	0800987c 	.word	0x0800987c

08008068 <__multadd>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	690d      	ldr	r5, [r1, #16]
 800806e:	4607      	mov	r7, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461e      	mov	r6, r3
 8008074:	f101 0c14 	add.w	ip, r1, #20
 8008078:	2000      	movs	r0, #0
 800807a:	f8dc 3000 	ldr.w	r3, [ip]
 800807e:	b299      	uxth	r1, r3
 8008080:	fb02 6101 	mla	r1, r2, r1, r6
 8008084:	0c1e      	lsrs	r6, r3, #16
 8008086:	0c0b      	lsrs	r3, r1, #16
 8008088:	fb02 3306 	mla	r3, r2, r6, r3
 800808c:	b289      	uxth	r1, r1
 800808e:	3001      	adds	r0, #1
 8008090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008094:	4285      	cmp	r5, r0
 8008096:	f84c 1b04 	str.w	r1, [ip], #4
 800809a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800809e:	dcec      	bgt.n	800807a <__multadd+0x12>
 80080a0:	b30e      	cbz	r6, 80080e6 <__multadd+0x7e>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc19      	bgt.n	80080dc <__multadd+0x74>
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	4638      	mov	r0, r7
 80080ac:	3101      	adds	r1, #1
 80080ae:	f7ff ff79 	bl	8007fa4 <_Balloc>
 80080b2:	4680      	mov	r8, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__multadd+0x5a>
 80080b6:	4602      	mov	r2, r0
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <__multadd+0x84>)
 80080ba:	480d      	ldr	r0, [pc, #52]	; (80080f0 <__multadd+0x88>)
 80080bc:	21b5      	movs	r1, #181	; 0xb5
 80080be:	f000 fc67 	bl	8008990 <__assert_func>
 80080c2:	6922      	ldr	r2, [r4, #16]
 80080c4:	3202      	adds	r2, #2
 80080c6:	f104 010c 	add.w	r1, r4, #12
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	300c      	adds	r0, #12
 80080ce:	f7fe fb1b 	bl	8006708 <memcpy>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ffa5 	bl	8008024 <_Bfree>
 80080da:	4644      	mov	r4, r8
 80080dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e0:	3501      	adds	r5, #1
 80080e2:	615e      	str	r6, [r3, #20]
 80080e4:	6125      	str	r5, [r4, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	0800986b 	.word	0x0800986b
 80080f0:	0800987c 	.word	0x0800987c

080080f4 <__hi0bits>:
 80080f4:	0c03      	lsrs	r3, r0, #16
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	b9d3      	cbnz	r3, 8008130 <__hi0bits+0x3c>
 80080fa:	0400      	lsls	r0, r0, #16
 80080fc:	2310      	movs	r3, #16
 80080fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008102:	bf04      	itt	eq
 8008104:	0200      	lsleq	r0, r0, #8
 8008106:	3308      	addeq	r3, #8
 8008108:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800810c:	bf04      	itt	eq
 800810e:	0100      	lsleq	r0, r0, #4
 8008110:	3304      	addeq	r3, #4
 8008112:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008116:	bf04      	itt	eq
 8008118:	0080      	lsleq	r0, r0, #2
 800811a:	3302      	addeq	r3, #2
 800811c:	2800      	cmp	r0, #0
 800811e:	db05      	blt.n	800812c <__hi0bits+0x38>
 8008120:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008124:	f103 0301 	add.w	r3, r3, #1
 8008128:	bf08      	it	eq
 800812a:	2320      	moveq	r3, #32
 800812c:	4618      	mov	r0, r3
 800812e:	4770      	bx	lr
 8008130:	2300      	movs	r3, #0
 8008132:	e7e4      	b.n	80080fe <__hi0bits+0xa>

08008134 <__lo0bits>:
 8008134:	6803      	ldr	r3, [r0, #0]
 8008136:	f013 0207 	ands.w	r2, r3, #7
 800813a:	4601      	mov	r1, r0
 800813c:	d00b      	beq.n	8008156 <__lo0bits+0x22>
 800813e:	07da      	lsls	r2, r3, #31
 8008140:	d423      	bmi.n	800818a <__lo0bits+0x56>
 8008142:	0798      	lsls	r0, r3, #30
 8008144:	bf49      	itett	mi
 8008146:	085b      	lsrmi	r3, r3, #1
 8008148:	089b      	lsrpl	r3, r3, #2
 800814a:	2001      	movmi	r0, #1
 800814c:	600b      	strmi	r3, [r1, #0]
 800814e:	bf5c      	itt	pl
 8008150:	600b      	strpl	r3, [r1, #0]
 8008152:	2002      	movpl	r0, #2
 8008154:	4770      	bx	lr
 8008156:	b298      	uxth	r0, r3
 8008158:	b9a8      	cbnz	r0, 8008186 <__lo0bits+0x52>
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	2010      	movs	r0, #16
 800815e:	b2da      	uxtb	r2, r3
 8008160:	b90a      	cbnz	r2, 8008166 <__lo0bits+0x32>
 8008162:	3008      	adds	r0, #8
 8008164:	0a1b      	lsrs	r3, r3, #8
 8008166:	071a      	lsls	r2, r3, #28
 8008168:	bf04      	itt	eq
 800816a:	091b      	lsreq	r3, r3, #4
 800816c:	3004      	addeq	r0, #4
 800816e:	079a      	lsls	r2, r3, #30
 8008170:	bf04      	itt	eq
 8008172:	089b      	lsreq	r3, r3, #2
 8008174:	3002      	addeq	r0, #2
 8008176:	07da      	lsls	r2, r3, #31
 8008178:	d403      	bmi.n	8008182 <__lo0bits+0x4e>
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	f100 0001 	add.w	r0, r0, #1
 8008180:	d005      	beq.n	800818e <__lo0bits+0x5a>
 8008182:	600b      	str	r3, [r1, #0]
 8008184:	4770      	bx	lr
 8008186:	4610      	mov	r0, r2
 8008188:	e7e9      	b.n	800815e <__lo0bits+0x2a>
 800818a:	2000      	movs	r0, #0
 800818c:	4770      	bx	lr
 800818e:	2020      	movs	r0, #32
 8008190:	4770      	bx	lr
	...

08008194 <__i2b>:
 8008194:	b510      	push	{r4, lr}
 8008196:	460c      	mov	r4, r1
 8008198:	2101      	movs	r1, #1
 800819a:	f7ff ff03 	bl	8007fa4 <_Balloc>
 800819e:	4602      	mov	r2, r0
 80081a0:	b928      	cbnz	r0, 80081ae <__i2b+0x1a>
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <__i2b+0x24>)
 80081a4:	4805      	ldr	r0, [pc, #20]	; (80081bc <__i2b+0x28>)
 80081a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081aa:	f000 fbf1 	bl	8008990 <__assert_func>
 80081ae:	2301      	movs	r3, #1
 80081b0:	6144      	str	r4, [r0, #20]
 80081b2:	6103      	str	r3, [r0, #16]
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	bf00      	nop
 80081b8:	0800986b 	.word	0x0800986b
 80081bc:	0800987c 	.word	0x0800987c

080081c0 <__multiply>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	4691      	mov	r9, r2
 80081c6:	690a      	ldr	r2, [r1, #16]
 80081c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	bfb8      	it	lt
 80081d0:	460b      	movlt	r3, r1
 80081d2:	460c      	mov	r4, r1
 80081d4:	bfbc      	itt	lt
 80081d6:	464c      	movlt	r4, r9
 80081d8:	4699      	movlt	r9, r3
 80081da:	6927      	ldr	r7, [r4, #16]
 80081dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	6861      	ldr	r1, [r4, #4]
 80081e4:	eb07 060a 	add.w	r6, r7, sl
 80081e8:	42b3      	cmp	r3, r6
 80081ea:	b085      	sub	sp, #20
 80081ec:	bfb8      	it	lt
 80081ee:	3101      	addlt	r1, #1
 80081f0:	f7ff fed8 	bl	8007fa4 <_Balloc>
 80081f4:	b930      	cbnz	r0, 8008204 <__multiply+0x44>
 80081f6:	4602      	mov	r2, r0
 80081f8:	4b44      	ldr	r3, [pc, #272]	; (800830c <__multiply+0x14c>)
 80081fa:	4845      	ldr	r0, [pc, #276]	; (8008310 <__multiply+0x150>)
 80081fc:	f240 115d 	movw	r1, #349	; 0x15d
 8008200:	f000 fbc6 	bl	8008990 <__assert_func>
 8008204:	f100 0514 	add.w	r5, r0, #20
 8008208:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800820c:	462b      	mov	r3, r5
 800820e:	2200      	movs	r2, #0
 8008210:	4543      	cmp	r3, r8
 8008212:	d321      	bcc.n	8008258 <__multiply+0x98>
 8008214:	f104 0314 	add.w	r3, r4, #20
 8008218:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800821c:	f109 0314 	add.w	r3, r9, #20
 8008220:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008224:	9202      	str	r2, [sp, #8]
 8008226:	1b3a      	subs	r2, r7, r4
 8008228:	3a15      	subs	r2, #21
 800822a:	f022 0203 	bic.w	r2, r2, #3
 800822e:	3204      	adds	r2, #4
 8008230:	f104 0115 	add.w	r1, r4, #21
 8008234:	428f      	cmp	r7, r1
 8008236:	bf38      	it	cc
 8008238:	2204      	movcc	r2, #4
 800823a:	9201      	str	r2, [sp, #4]
 800823c:	9a02      	ldr	r2, [sp, #8]
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	429a      	cmp	r2, r3
 8008242:	d80c      	bhi.n	800825e <__multiply+0x9e>
 8008244:	2e00      	cmp	r6, #0
 8008246:	dd03      	ble.n	8008250 <__multiply+0x90>
 8008248:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800824c:	2b00      	cmp	r3, #0
 800824e:	d05a      	beq.n	8008306 <__multiply+0x146>
 8008250:	6106      	str	r6, [r0, #16]
 8008252:	b005      	add	sp, #20
 8008254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008258:	f843 2b04 	str.w	r2, [r3], #4
 800825c:	e7d8      	b.n	8008210 <__multiply+0x50>
 800825e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008262:	f1ba 0f00 	cmp.w	sl, #0
 8008266:	d024      	beq.n	80082b2 <__multiply+0xf2>
 8008268:	f104 0e14 	add.w	lr, r4, #20
 800826c:	46a9      	mov	r9, r5
 800826e:	f04f 0c00 	mov.w	ip, #0
 8008272:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008276:	f8d9 1000 	ldr.w	r1, [r9]
 800827a:	fa1f fb82 	uxth.w	fp, r2
 800827e:	b289      	uxth	r1, r1
 8008280:	fb0a 110b 	mla	r1, sl, fp, r1
 8008284:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008288:	f8d9 2000 	ldr.w	r2, [r9]
 800828c:	4461      	add	r1, ip
 800828e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008292:	fb0a c20b 	mla	r2, sl, fp, ip
 8008296:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800829a:	b289      	uxth	r1, r1
 800829c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082a0:	4577      	cmp	r7, lr
 80082a2:	f849 1b04 	str.w	r1, [r9], #4
 80082a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082aa:	d8e2      	bhi.n	8008272 <__multiply+0xb2>
 80082ac:	9a01      	ldr	r2, [sp, #4]
 80082ae:	f845 c002 	str.w	ip, [r5, r2]
 80082b2:	9a03      	ldr	r2, [sp, #12]
 80082b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082b8:	3304      	adds	r3, #4
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	d020      	beq.n	8008302 <__multiply+0x142>
 80082c0:	6829      	ldr	r1, [r5, #0]
 80082c2:	f104 0c14 	add.w	ip, r4, #20
 80082c6:	46ae      	mov	lr, r5
 80082c8:	f04f 0a00 	mov.w	sl, #0
 80082cc:	f8bc b000 	ldrh.w	fp, [ip]
 80082d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082d4:	fb09 220b 	mla	r2, r9, fp, r2
 80082d8:	4492      	add	sl, r2
 80082da:	b289      	uxth	r1, r1
 80082dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082e0:	f84e 1b04 	str.w	r1, [lr], #4
 80082e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082e8:	f8be 1000 	ldrh.w	r1, [lr]
 80082ec:	0c12      	lsrs	r2, r2, #16
 80082ee:	fb09 1102 	mla	r1, r9, r2, r1
 80082f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082f6:	4567      	cmp	r7, ip
 80082f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082fc:	d8e6      	bhi.n	80082cc <__multiply+0x10c>
 80082fe:	9a01      	ldr	r2, [sp, #4]
 8008300:	50a9      	str	r1, [r5, r2]
 8008302:	3504      	adds	r5, #4
 8008304:	e79a      	b.n	800823c <__multiply+0x7c>
 8008306:	3e01      	subs	r6, #1
 8008308:	e79c      	b.n	8008244 <__multiply+0x84>
 800830a:	bf00      	nop
 800830c:	0800986b 	.word	0x0800986b
 8008310:	0800987c 	.word	0x0800987c

08008314 <__pow5mult>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	4615      	mov	r5, r2
 800831a:	f012 0203 	ands.w	r2, r2, #3
 800831e:	4606      	mov	r6, r0
 8008320:	460f      	mov	r7, r1
 8008322:	d007      	beq.n	8008334 <__pow5mult+0x20>
 8008324:	4c25      	ldr	r4, [pc, #148]	; (80083bc <__pow5mult+0xa8>)
 8008326:	3a01      	subs	r2, #1
 8008328:	2300      	movs	r3, #0
 800832a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800832e:	f7ff fe9b 	bl	8008068 <__multadd>
 8008332:	4607      	mov	r7, r0
 8008334:	10ad      	asrs	r5, r5, #2
 8008336:	d03d      	beq.n	80083b4 <__pow5mult+0xa0>
 8008338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800833a:	b97c      	cbnz	r4, 800835c <__pow5mult+0x48>
 800833c:	2010      	movs	r0, #16
 800833e:	f7fe f9c3 	bl	80066c8 <malloc>
 8008342:	4602      	mov	r2, r0
 8008344:	6270      	str	r0, [r6, #36]	; 0x24
 8008346:	b928      	cbnz	r0, 8008354 <__pow5mult+0x40>
 8008348:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <__pow5mult+0xac>)
 800834a:	481e      	ldr	r0, [pc, #120]	; (80083c4 <__pow5mult+0xb0>)
 800834c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008350:	f000 fb1e 	bl	8008990 <__assert_func>
 8008354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008358:	6004      	str	r4, [r0, #0]
 800835a:	60c4      	str	r4, [r0, #12]
 800835c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008364:	b94c      	cbnz	r4, 800837a <__pow5mult+0x66>
 8008366:	f240 2171 	movw	r1, #625	; 0x271
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ff12 	bl	8008194 <__i2b>
 8008370:	2300      	movs	r3, #0
 8008372:	f8c8 0008 	str.w	r0, [r8, #8]
 8008376:	4604      	mov	r4, r0
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	07eb      	lsls	r3, r5, #31
 8008380:	d50a      	bpl.n	8008398 <__pow5mult+0x84>
 8008382:	4639      	mov	r1, r7
 8008384:	4622      	mov	r2, r4
 8008386:	4630      	mov	r0, r6
 8008388:	f7ff ff1a 	bl	80081c0 <__multiply>
 800838c:	4639      	mov	r1, r7
 800838e:	4680      	mov	r8, r0
 8008390:	4630      	mov	r0, r6
 8008392:	f7ff fe47 	bl	8008024 <_Bfree>
 8008396:	4647      	mov	r7, r8
 8008398:	106d      	asrs	r5, r5, #1
 800839a:	d00b      	beq.n	80083b4 <__pow5mult+0xa0>
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	b938      	cbnz	r0, 80083b0 <__pow5mult+0x9c>
 80083a0:	4622      	mov	r2, r4
 80083a2:	4621      	mov	r1, r4
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff ff0b 	bl	80081c0 <__multiply>
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	f8c0 9000 	str.w	r9, [r0]
 80083b0:	4604      	mov	r4, r0
 80083b2:	e7e4      	b.n	800837e <__pow5mult+0x6a>
 80083b4:	4638      	mov	r0, r7
 80083b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ba:	bf00      	nop
 80083bc:	080099c8 	.word	0x080099c8
 80083c0:	080097f9 	.word	0x080097f9
 80083c4:	0800987c 	.word	0x0800987c

080083c8 <__lshift>:
 80083c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	460c      	mov	r4, r1
 80083ce:	6849      	ldr	r1, [r1, #4]
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	4607      	mov	r7, r0
 80083da:	4691      	mov	r9, r2
 80083dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e0:	f108 0601 	add.w	r6, r8, #1
 80083e4:	42b3      	cmp	r3, r6
 80083e6:	db0b      	blt.n	8008400 <__lshift+0x38>
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7ff fddb 	bl	8007fa4 <_Balloc>
 80083ee:	4605      	mov	r5, r0
 80083f0:	b948      	cbnz	r0, 8008406 <__lshift+0x3e>
 80083f2:	4602      	mov	r2, r0
 80083f4:	4b2a      	ldr	r3, [pc, #168]	; (80084a0 <__lshift+0xd8>)
 80083f6:	482b      	ldr	r0, [pc, #172]	; (80084a4 <__lshift+0xdc>)
 80083f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083fc:	f000 fac8 	bl	8008990 <__assert_func>
 8008400:	3101      	adds	r1, #1
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	e7ee      	b.n	80083e4 <__lshift+0x1c>
 8008406:	2300      	movs	r3, #0
 8008408:	f100 0114 	add.w	r1, r0, #20
 800840c:	f100 0210 	add.w	r2, r0, #16
 8008410:	4618      	mov	r0, r3
 8008412:	4553      	cmp	r3, sl
 8008414:	db37      	blt.n	8008486 <__lshift+0xbe>
 8008416:	6920      	ldr	r0, [r4, #16]
 8008418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800841c:	f104 0314 	add.w	r3, r4, #20
 8008420:	f019 091f 	ands.w	r9, r9, #31
 8008424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008428:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800842c:	d02f      	beq.n	800848e <__lshift+0xc6>
 800842e:	f1c9 0e20 	rsb	lr, r9, #32
 8008432:	468a      	mov	sl, r1
 8008434:	f04f 0c00 	mov.w	ip, #0
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	fa02 f209 	lsl.w	r2, r2, r9
 800843e:	ea42 020c 	orr.w	r2, r2, ip
 8008442:	f84a 2b04 	str.w	r2, [sl], #4
 8008446:	f853 2b04 	ldr.w	r2, [r3], #4
 800844a:	4298      	cmp	r0, r3
 800844c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008450:	d8f2      	bhi.n	8008438 <__lshift+0x70>
 8008452:	1b03      	subs	r3, r0, r4
 8008454:	3b15      	subs	r3, #21
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	3304      	adds	r3, #4
 800845c:	f104 0215 	add.w	r2, r4, #21
 8008460:	4290      	cmp	r0, r2
 8008462:	bf38      	it	cc
 8008464:	2304      	movcc	r3, #4
 8008466:	f841 c003 	str.w	ip, [r1, r3]
 800846a:	f1bc 0f00 	cmp.w	ip, #0
 800846e:	d001      	beq.n	8008474 <__lshift+0xac>
 8008470:	f108 0602 	add.w	r6, r8, #2
 8008474:	3e01      	subs	r6, #1
 8008476:	4638      	mov	r0, r7
 8008478:	612e      	str	r6, [r5, #16]
 800847a:	4621      	mov	r1, r4
 800847c:	f7ff fdd2 	bl	8008024 <_Bfree>
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	f842 0f04 	str.w	r0, [r2, #4]!
 800848a:	3301      	adds	r3, #1
 800848c:	e7c1      	b.n	8008412 <__lshift+0x4a>
 800848e:	3904      	subs	r1, #4
 8008490:	f853 2b04 	ldr.w	r2, [r3], #4
 8008494:	f841 2f04 	str.w	r2, [r1, #4]!
 8008498:	4298      	cmp	r0, r3
 800849a:	d8f9      	bhi.n	8008490 <__lshift+0xc8>
 800849c:	e7ea      	b.n	8008474 <__lshift+0xac>
 800849e:	bf00      	nop
 80084a0:	0800986b 	.word	0x0800986b
 80084a4:	0800987c 	.word	0x0800987c

080084a8 <__mcmp>:
 80084a8:	b530      	push	{r4, r5, lr}
 80084aa:	6902      	ldr	r2, [r0, #16]
 80084ac:	690c      	ldr	r4, [r1, #16]
 80084ae:	1b12      	subs	r2, r2, r4
 80084b0:	d10e      	bne.n	80084d0 <__mcmp+0x28>
 80084b2:	f100 0314 	add.w	r3, r0, #20
 80084b6:	3114      	adds	r1, #20
 80084b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084c8:	42a5      	cmp	r5, r4
 80084ca:	d003      	beq.n	80084d4 <__mcmp+0x2c>
 80084cc:	d305      	bcc.n	80084da <__mcmp+0x32>
 80084ce:	2201      	movs	r2, #1
 80084d0:	4610      	mov	r0, r2
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	4283      	cmp	r3, r0
 80084d6:	d3f3      	bcc.n	80084c0 <__mcmp+0x18>
 80084d8:	e7fa      	b.n	80084d0 <__mcmp+0x28>
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	e7f7      	b.n	80084d0 <__mcmp+0x28>

080084e0 <__mdiff>:
 80084e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460c      	mov	r4, r1
 80084e6:	4606      	mov	r6, r0
 80084e8:	4611      	mov	r1, r2
 80084ea:	4620      	mov	r0, r4
 80084ec:	4690      	mov	r8, r2
 80084ee:	f7ff ffdb 	bl	80084a8 <__mcmp>
 80084f2:	1e05      	subs	r5, r0, #0
 80084f4:	d110      	bne.n	8008518 <__mdiff+0x38>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fd53 	bl	8007fa4 <_Balloc>
 80084fe:	b930      	cbnz	r0, 800850e <__mdiff+0x2e>
 8008500:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <__mdiff+0x10c>)
 8008502:	4602      	mov	r2, r0
 8008504:	f240 2132 	movw	r1, #562	; 0x232
 8008508:	4839      	ldr	r0, [pc, #228]	; (80085f0 <__mdiff+0x110>)
 800850a:	f000 fa41 	bl	8008990 <__assert_func>
 800850e:	2301      	movs	r3, #1
 8008510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	bfa4      	itt	ge
 800851a:	4643      	movge	r3, r8
 800851c:	46a0      	movge	r8, r4
 800851e:	4630      	mov	r0, r6
 8008520:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008524:	bfa6      	itte	ge
 8008526:	461c      	movge	r4, r3
 8008528:	2500      	movge	r5, #0
 800852a:	2501      	movlt	r5, #1
 800852c:	f7ff fd3a 	bl	8007fa4 <_Balloc>
 8008530:	b920      	cbnz	r0, 800853c <__mdiff+0x5c>
 8008532:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <__mdiff+0x10c>)
 8008534:	4602      	mov	r2, r0
 8008536:	f44f 7110 	mov.w	r1, #576	; 0x240
 800853a:	e7e5      	b.n	8008508 <__mdiff+0x28>
 800853c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008540:	6926      	ldr	r6, [r4, #16]
 8008542:	60c5      	str	r5, [r0, #12]
 8008544:	f104 0914 	add.w	r9, r4, #20
 8008548:	f108 0514 	add.w	r5, r8, #20
 800854c:	f100 0e14 	add.w	lr, r0, #20
 8008550:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008558:	f108 0210 	add.w	r2, r8, #16
 800855c:	46f2      	mov	sl, lr
 800855e:	2100      	movs	r1, #0
 8008560:	f859 3b04 	ldr.w	r3, [r9], #4
 8008564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008568:	fa1f f883 	uxth.w	r8, r3
 800856c:	fa11 f18b 	uxtah	r1, r1, fp
 8008570:	0c1b      	lsrs	r3, r3, #16
 8008572:	eba1 0808 	sub.w	r8, r1, r8
 8008576:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800857a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800857e:	fa1f f888 	uxth.w	r8, r8
 8008582:	1419      	asrs	r1, r3, #16
 8008584:	454e      	cmp	r6, r9
 8008586:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800858a:	f84a 3b04 	str.w	r3, [sl], #4
 800858e:	d8e7      	bhi.n	8008560 <__mdiff+0x80>
 8008590:	1b33      	subs	r3, r6, r4
 8008592:	3b15      	subs	r3, #21
 8008594:	f023 0303 	bic.w	r3, r3, #3
 8008598:	3304      	adds	r3, #4
 800859a:	3415      	adds	r4, #21
 800859c:	42a6      	cmp	r6, r4
 800859e:	bf38      	it	cc
 80085a0:	2304      	movcc	r3, #4
 80085a2:	441d      	add	r5, r3
 80085a4:	4473      	add	r3, lr
 80085a6:	469e      	mov	lr, r3
 80085a8:	462e      	mov	r6, r5
 80085aa:	4566      	cmp	r6, ip
 80085ac:	d30e      	bcc.n	80085cc <__mdiff+0xec>
 80085ae:	f10c 0203 	add.w	r2, ip, #3
 80085b2:	1b52      	subs	r2, r2, r5
 80085b4:	f022 0203 	bic.w	r2, r2, #3
 80085b8:	3d03      	subs	r5, #3
 80085ba:	45ac      	cmp	ip, r5
 80085bc:	bf38      	it	cc
 80085be:	2200      	movcc	r2, #0
 80085c0:	441a      	add	r2, r3
 80085c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085c6:	b17b      	cbz	r3, 80085e8 <__mdiff+0x108>
 80085c8:	6107      	str	r7, [r0, #16]
 80085ca:	e7a3      	b.n	8008514 <__mdiff+0x34>
 80085cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80085d0:	fa11 f288 	uxtah	r2, r1, r8
 80085d4:	1414      	asrs	r4, r2, #16
 80085d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085da:	b292      	uxth	r2, r2
 80085dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085e0:	f84e 2b04 	str.w	r2, [lr], #4
 80085e4:	1421      	asrs	r1, r4, #16
 80085e6:	e7e0      	b.n	80085aa <__mdiff+0xca>
 80085e8:	3f01      	subs	r7, #1
 80085ea:	e7ea      	b.n	80085c2 <__mdiff+0xe2>
 80085ec:	0800986b 	.word	0x0800986b
 80085f0:	0800987c 	.word	0x0800987c

080085f4 <__d2b>:
 80085f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	4689      	mov	r9, r1
 80085fa:	2101      	movs	r1, #1
 80085fc:	ec57 6b10 	vmov	r6, r7, d0
 8008600:	4690      	mov	r8, r2
 8008602:	f7ff fccf 	bl	8007fa4 <_Balloc>
 8008606:	4604      	mov	r4, r0
 8008608:	b930      	cbnz	r0, 8008618 <__d2b+0x24>
 800860a:	4602      	mov	r2, r0
 800860c:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <__d2b+0xb0>)
 800860e:	4826      	ldr	r0, [pc, #152]	; (80086a8 <__d2b+0xb4>)
 8008610:	f240 310a 	movw	r1, #778	; 0x30a
 8008614:	f000 f9bc 	bl	8008990 <__assert_func>
 8008618:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800861c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008620:	bb35      	cbnz	r5, 8008670 <__d2b+0x7c>
 8008622:	2e00      	cmp	r6, #0
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	d028      	beq.n	800867a <__d2b+0x86>
 8008628:	4668      	mov	r0, sp
 800862a:	9600      	str	r6, [sp, #0]
 800862c:	f7ff fd82 	bl	8008134 <__lo0bits>
 8008630:	9900      	ldr	r1, [sp, #0]
 8008632:	b300      	cbz	r0, 8008676 <__d2b+0x82>
 8008634:	9a01      	ldr	r2, [sp, #4]
 8008636:	f1c0 0320 	rsb	r3, r0, #32
 800863a:	fa02 f303 	lsl.w	r3, r2, r3
 800863e:	430b      	orrs	r3, r1
 8008640:	40c2      	lsrs	r2, r0
 8008642:	6163      	str	r3, [r4, #20]
 8008644:	9201      	str	r2, [sp, #4]
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	61a3      	str	r3, [r4, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	bf14      	ite	ne
 800864e:	2202      	movne	r2, #2
 8008650:	2201      	moveq	r2, #1
 8008652:	6122      	str	r2, [r4, #16]
 8008654:	b1d5      	cbz	r5, 800868c <__d2b+0x98>
 8008656:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800865a:	4405      	add	r5, r0
 800865c:	f8c9 5000 	str.w	r5, [r9]
 8008660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008664:	f8c8 0000 	str.w	r0, [r8]
 8008668:	4620      	mov	r0, r4
 800866a:	b003      	add	sp, #12
 800866c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008674:	e7d5      	b.n	8008622 <__d2b+0x2e>
 8008676:	6161      	str	r1, [r4, #20]
 8008678:	e7e5      	b.n	8008646 <__d2b+0x52>
 800867a:	a801      	add	r0, sp, #4
 800867c:	f7ff fd5a 	bl	8008134 <__lo0bits>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	2201      	movs	r2, #1
 8008686:	6122      	str	r2, [r4, #16]
 8008688:	3020      	adds	r0, #32
 800868a:	e7e3      	b.n	8008654 <__d2b+0x60>
 800868c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008694:	f8c9 0000 	str.w	r0, [r9]
 8008698:	6918      	ldr	r0, [r3, #16]
 800869a:	f7ff fd2b 	bl	80080f4 <__hi0bits>
 800869e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086a2:	e7df      	b.n	8008664 <__d2b+0x70>
 80086a4:	0800986b 	.word	0x0800986b
 80086a8:	0800987c 	.word	0x0800987c

080086ac <_calloc_r>:
 80086ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ae:	fba1 2402 	umull	r2, r4, r1, r2
 80086b2:	b94c      	cbnz	r4, 80086c8 <_calloc_r+0x1c>
 80086b4:	4611      	mov	r1, r2
 80086b6:	9201      	str	r2, [sp, #4]
 80086b8:	f7fe f8a8 	bl	800680c <_malloc_r>
 80086bc:	9a01      	ldr	r2, [sp, #4]
 80086be:	4605      	mov	r5, r0
 80086c0:	b930      	cbnz	r0, 80086d0 <_calloc_r+0x24>
 80086c2:	4628      	mov	r0, r5
 80086c4:	b003      	add	sp, #12
 80086c6:	bd30      	pop	{r4, r5, pc}
 80086c8:	220c      	movs	r2, #12
 80086ca:	6002      	str	r2, [r0, #0]
 80086cc:	2500      	movs	r5, #0
 80086ce:	e7f8      	b.n	80086c2 <_calloc_r+0x16>
 80086d0:	4621      	mov	r1, r4
 80086d2:	f7fe f827 	bl	8006724 <memset>
 80086d6:	e7f4      	b.n	80086c2 <_calloc_r+0x16>

080086d8 <__ssputs_r>:
 80086d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	688e      	ldr	r6, [r1, #8]
 80086de:	429e      	cmp	r6, r3
 80086e0:	4682      	mov	sl, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	4690      	mov	r8, r2
 80086e6:	461f      	mov	r7, r3
 80086e8:	d838      	bhi.n	800875c <__ssputs_r+0x84>
 80086ea:	898a      	ldrh	r2, [r1, #12]
 80086ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086f0:	d032      	beq.n	8008758 <__ssputs_r+0x80>
 80086f2:	6825      	ldr	r5, [r4, #0]
 80086f4:	6909      	ldr	r1, [r1, #16]
 80086f6:	eba5 0901 	sub.w	r9, r5, r1
 80086fa:	6965      	ldr	r5, [r4, #20]
 80086fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008704:	3301      	adds	r3, #1
 8008706:	444b      	add	r3, r9
 8008708:	106d      	asrs	r5, r5, #1
 800870a:	429d      	cmp	r5, r3
 800870c:	bf38      	it	cc
 800870e:	461d      	movcc	r5, r3
 8008710:	0553      	lsls	r3, r2, #21
 8008712:	d531      	bpl.n	8008778 <__ssputs_r+0xa0>
 8008714:	4629      	mov	r1, r5
 8008716:	f7fe f879 	bl	800680c <_malloc_r>
 800871a:	4606      	mov	r6, r0
 800871c:	b950      	cbnz	r0, 8008734 <__ssputs_r+0x5c>
 800871e:	230c      	movs	r3, #12
 8008720:	f8ca 3000 	str.w	r3, [sl]
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008734:	6921      	ldr	r1, [r4, #16]
 8008736:	464a      	mov	r2, r9
 8008738:	f7fd ffe6 	bl	8006708 <memcpy>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	6126      	str	r6, [r4, #16]
 800874a:	6165      	str	r5, [r4, #20]
 800874c:	444e      	add	r6, r9
 800874e:	eba5 0509 	sub.w	r5, r5, r9
 8008752:	6026      	str	r6, [r4, #0]
 8008754:	60a5      	str	r5, [r4, #8]
 8008756:	463e      	mov	r6, r7
 8008758:	42be      	cmp	r6, r7
 800875a:	d900      	bls.n	800875e <__ssputs_r+0x86>
 800875c:	463e      	mov	r6, r7
 800875e:	6820      	ldr	r0, [r4, #0]
 8008760:	4632      	mov	r2, r6
 8008762:	4641      	mov	r1, r8
 8008764:	f000 f959 	bl	8008a1a <memmove>
 8008768:	68a3      	ldr	r3, [r4, #8]
 800876a:	1b9b      	subs	r3, r3, r6
 800876c:	60a3      	str	r3, [r4, #8]
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	4433      	add	r3, r6
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	2000      	movs	r0, #0
 8008776:	e7db      	b.n	8008730 <__ssputs_r+0x58>
 8008778:	462a      	mov	r2, r5
 800877a:	f000 f968 	bl	8008a4e <_realloc_r>
 800877e:	4606      	mov	r6, r0
 8008780:	2800      	cmp	r0, #0
 8008782:	d1e1      	bne.n	8008748 <__ssputs_r+0x70>
 8008784:	6921      	ldr	r1, [r4, #16]
 8008786:	4650      	mov	r0, sl
 8008788:	f7fd ffd4 	bl	8006734 <_free_r>
 800878c:	e7c7      	b.n	800871e <__ssputs_r+0x46>
	...

08008790 <_svfiprintf_r>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	4698      	mov	r8, r3
 8008796:	898b      	ldrh	r3, [r1, #12]
 8008798:	061b      	lsls	r3, r3, #24
 800879a:	b09d      	sub	sp, #116	; 0x74
 800879c:	4607      	mov	r7, r0
 800879e:	460d      	mov	r5, r1
 80087a0:	4614      	mov	r4, r2
 80087a2:	d50e      	bpl.n	80087c2 <_svfiprintf_r+0x32>
 80087a4:	690b      	ldr	r3, [r1, #16]
 80087a6:	b963      	cbnz	r3, 80087c2 <_svfiprintf_r+0x32>
 80087a8:	2140      	movs	r1, #64	; 0x40
 80087aa:	f7fe f82f 	bl	800680c <_malloc_r>
 80087ae:	6028      	str	r0, [r5, #0]
 80087b0:	6128      	str	r0, [r5, #16]
 80087b2:	b920      	cbnz	r0, 80087be <_svfiprintf_r+0x2e>
 80087b4:	230c      	movs	r3, #12
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	e0d1      	b.n	8008962 <_svfiprintf_r+0x1d2>
 80087be:	2340      	movs	r3, #64	; 0x40
 80087c0:	616b      	str	r3, [r5, #20]
 80087c2:	2300      	movs	r3, #0
 80087c4:	9309      	str	r3, [sp, #36]	; 0x24
 80087c6:	2320      	movs	r3, #32
 80087c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d0:	2330      	movs	r3, #48	; 0x30
 80087d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800897c <_svfiprintf_r+0x1ec>
 80087d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087da:	f04f 0901 	mov.w	r9, #1
 80087de:	4623      	mov	r3, r4
 80087e0:	469a      	mov	sl, r3
 80087e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e6:	b10a      	cbz	r2, 80087ec <_svfiprintf_r+0x5c>
 80087e8:	2a25      	cmp	r2, #37	; 0x25
 80087ea:	d1f9      	bne.n	80087e0 <_svfiprintf_r+0x50>
 80087ec:	ebba 0b04 	subs.w	fp, sl, r4
 80087f0:	d00b      	beq.n	800880a <_svfiprintf_r+0x7a>
 80087f2:	465b      	mov	r3, fp
 80087f4:	4622      	mov	r2, r4
 80087f6:	4629      	mov	r1, r5
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff ff6d 	bl	80086d8 <__ssputs_r>
 80087fe:	3001      	adds	r0, #1
 8008800:	f000 80aa 	beq.w	8008958 <_svfiprintf_r+0x1c8>
 8008804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008806:	445a      	add	r2, fp
 8008808:	9209      	str	r2, [sp, #36]	; 0x24
 800880a:	f89a 3000 	ldrb.w	r3, [sl]
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 80a2 	beq.w	8008958 <_svfiprintf_r+0x1c8>
 8008814:	2300      	movs	r3, #0
 8008816:	f04f 32ff 	mov.w	r2, #4294967295
 800881a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800881e:	f10a 0a01 	add.w	sl, sl, #1
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	9307      	str	r3, [sp, #28]
 8008826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800882a:	931a      	str	r3, [sp, #104]	; 0x68
 800882c:	4654      	mov	r4, sl
 800882e:	2205      	movs	r2, #5
 8008830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008834:	4851      	ldr	r0, [pc, #324]	; (800897c <_svfiprintf_r+0x1ec>)
 8008836:	f7f7 fcf3 	bl	8000220 <memchr>
 800883a:	9a04      	ldr	r2, [sp, #16]
 800883c:	b9d8      	cbnz	r0, 8008876 <_svfiprintf_r+0xe6>
 800883e:	06d0      	lsls	r0, r2, #27
 8008840:	bf44      	itt	mi
 8008842:	2320      	movmi	r3, #32
 8008844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008848:	0711      	lsls	r1, r2, #28
 800884a:	bf44      	itt	mi
 800884c:	232b      	movmi	r3, #43	; 0x2b
 800884e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008852:	f89a 3000 	ldrb.w	r3, [sl]
 8008856:	2b2a      	cmp	r3, #42	; 0x2a
 8008858:	d015      	beq.n	8008886 <_svfiprintf_r+0xf6>
 800885a:	9a07      	ldr	r2, [sp, #28]
 800885c:	4654      	mov	r4, sl
 800885e:	2000      	movs	r0, #0
 8008860:	f04f 0c0a 	mov.w	ip, #10
 8008864:	4621      	mov	r1, r4
 8008866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800886a:	3b30      	subs	r3, #48	; 0x30
 800886c:	2b09      	cmp	r3, #9
 800886e:	d94e      	bls.n	800890e <_svfiprintf_r+0x17e>
 8008870:	b1b0      	cbz	r0, 80088a0 <_svfiprintf_r+0x110>
 8008872:	9207      	str	r2, [sp, #28]
 8008874:	e014      	b.n	80088a0 <_svfiprintf_r+0x110>
 8008876:	eba0 0308 	sub.w	r3, r0, r8
 800887a:	fa09 f303 	lsl.w	r3, r9, r3
 800887e:	4313      	orrs	r3, r2
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	46a2      	mov	sl, r4
 8008884:	e7d2      	b.n	800882c <_svfiprintf_r+0x9c>
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	1d19      	adds	r1, r3, #4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	9103      	str	r1, [sp, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	bfbb      	ittet	lt
 8008892:	425b      	neglt	r3, r3
 8008894:	f042 0202 	orrlt.w	r2, r2, #2
 8008898:	9307      	strge	r3, [sp, #28]
 800889a:	9307      	strlt	r3, [sp, #28]
 800889c:	bfb8      	it	lt
 800889e:	9204      	strlt	r2, [sp, #16]
 80088a0:	7823      	ldrb	r3, [r4, #0]
 80088a2:	2b2e      	cmp	r3, #46	; 0x2e
 80088a4:	d10c      	bne.n	80088c0 <_svfiprintf_r+0x130>
 80088a6:	7863      	ldrb	r3, [r4, #1]
 80088a8:	2b2a      	cmp	r3, #42	; 0x2a
 80088aa:	d135      	bne.n	8008918 <_svfiprintf_r+0x188>
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	1d1a      	adds	r2, r3, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	9203      	str	r2, [sp, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	bfb8      	it	lt
 80088b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80088bc:	3402      	adds	r4, #2
 80088be:	9305      	str	r3, [sp, #20]
 80088c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800898c <_svfiprintf_r+0x1fc>
 80088c4:	7821      	ldrb	r1, [r4, #0]
 80088c6:	2203      	movs	r2, #3
 80088c8:	4650      	mov	r0, sl
 80088ca:	f7f7 fca9 	bl	8000220 <memchr>
 80088ce:	b140      	cbz	r0, 80088e2 <_svfiprintf_r+0x152>
 80088d0:	2340      	movs	r3, #64	; 0x40
 80088d2:	eba0 000a 	sub.w	r0, r0, sl
 80088d6:	fa03 f000 	lsl.w	r0, r3, r0
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	4303      	orrs	r3, r0
 80088de:	3401      	adds	r4, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e6:	4826      	ldr	r0, [pc, #152]	; (8008980 <_svfiprintf_r+0x1f0>)
 80088e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ec:	2206      	movs	r2, #6
 80088ee:	f7f7 fc97 	bl	8000220 <memchr>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d038      	beq.n	8008968 <_svfiprintf_r+0x1d8>
 80088f6:	4b23      	ldr	r3, [pc, #140]	; (8008984 <_svfiprintf_r+0x1f4>)
 80088f8:	bb1b      	cbnz	r3, 8008942 <_svfiprintf_r+0x1b2>
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	3307      	adds	r3, #7
 80088fe:	f023 0307 	bic.w	r3, r3, #7
 8008902:	3308      	adds	r3, #8
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008908:	4433      	add	r3, r6
 800890a:	9309      	str	r3, [sp, #36]	; 0x24
 800890c:	e767      	b.n	80087de <_svfiprintf_r+0x4e>
 800890e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008912:	460c      	mov	r4, r1
 8008914:	2001      	movs	r0, #1
 8008916:	e7a5      	b.n	8008864 <_svfiprintf_r+0xd4>
 8008918:	2300      	movs	r3, #0
 800891a:	3401      	adds	r4, #1
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	4619      	mov	r1, r3
 8008920:	f04f 0c0a 	mov.w	ip, #10
 8008924:	4620      	mov	r0, r4
 8008926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800892a:	3a30      	subs	r2, #48	; 0x30
 800892c:	2a09      	cmp	r2, #9
 800892e:	d903      	bls.n	8008938 <_svfiprintf_r+0x1a8>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0c5      	beq.n	80088c0 <_svfiprintf_r+0x130>
 8008934:	9105      	str	r1, [sp, #20]
 8008936:	e7c3      	b.n	80088c0 <_svfiprintf_r+0x130>
 8008938:	fb0c 2101 	mla	r1, ip, r1, r2
 800893c:	4604      	mov	r4, r0
 800893e:	2301      	movs	r3, #1
 8008940:	e7f0      	b.n	8008924 <_svfiprintf_r+0x194>
 8008942:	ab03      	add	r3, sp, #12
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	462a      	mov	r2, r5
 8008948:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <_svfiprintf_r+0x1f8>)
 800894a:	a904      	add	r1, sp, #16
 800894c:	4638      	mov	r0, r7
 800894e:	f7fe f871 	bl	8006a34 <_printf_float>
 8008952:	1c42      	adds	r2, r0, #1
 8008954:	4606      	mov	r6, r0
 8008956:	d1d6      	bne.n	8008906 <_svfiprintf_r+0x176>
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	065b      	lsls	r3, r3, #25
 800895c:	f53f af2c 	bmi.w	80087b8 <_svfiprintf_r+0x28>
 8008960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008962:	b01d      	add	sp, #116	; 0x74
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	ab03      	add	r3, sp, #12
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	462a      	mov	r2, r5
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <_svfiprintf_r+0x1f8>)
 8008970:	a904      	add	r1, sp, #16
 8008972:	4638      	mov	r0, r7
 8008974:	f7fe fb02 	bl	8006f7c <_printf_i>
 8008978:	e7eb      	b.n	8008952 <_svfiprintf_r+0x1c2>
 800897a:	bf00      	nop
 800897c:	080099d4 	.word	0x080099d4
 8008980:	080099de 	.word	0x080099de
 8008984:	08006a35 	.word	0x08006a35
 8008988:	080086d9 	.word	0x080086d9
 800898c:	080099da 	.word	0x080099da

08008990 <__assert_func>:
 8008990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008992:	4614      	mov	r4, r2
 8008994:	461a      	mov	r2, r3
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <__assert_func+0x2c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4605      	mov	r5, r0
 800899c:	68d8      	ldr	r0, [r3, #12]
 800899e:	b14c      	cbz	r4, 80089b4 <__assert_func+0x24>
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <__assert_func+0x30>)
 80089a2:	9100      	str	r1, [sp, #0]
 80089a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089a8:	4906      	ldr	r1, [pc, #24]	; (80089c4 <__assert_func+0x34>)
 80089aa:	462b      	mov	r3, r5
 80089ac:	f000 f80e 	bl	80089cc <fiprintf>
 80089b0:	f000 faa4 	bl	8008efc <abort>
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <__assert_func+0x38>)
 80089b6:	461c      	mov	r4, r3
 80089b8:	e7f3      	b.n	80089a2 <__assert_func+0x12>
 80089ba:	bf00      	nop
 80089bc:	20000018 	.word	0x20000018
 80089c0:	080099e5 	.word	0x080099e5
 80089c4:	080099f2 	.word	0x080099f2
 80089c8:	08009a20 	.word	0x08009a20

080089cc <fiprintf>:
 80089cc:	b40e      	push	{r1, r2, r3}
 80089ce:	b503      	push	{r0, r1, lr}
 80089d0:	4601      	mov	r1, r0
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	4805      	ldr	r0, [pc, #20]	; (80089ec <fiprintf+0x20>)
 80089d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089da:	6800      	ldr	r0, [r0, #0]
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	f000 f88f 	bl	8008b00 <_vfiprintf_r>
 80089e2:	b002      	add	sp, #8
 80089e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e8:	b003      	add	sp, #12
 80089ea:	4770      	bx	lr
 80089ec:	20000018 	.word	0x20000018

080089f0 <__retarget_lock_init_recursive>:
 80089f0:	4770      	bx	lr

080089f2 <__retarget_lock_acquire_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <__retarget_lock_release_recursive>:
 80089f4:	4770      	bx	lr

080089f6 <__ascii_mbtowc>:
 80089f6:	b082      	sub	sp, #8
 80089f8:	b901      	cbnz	r1, 80089fc <__ascii_mbtowc+0x6>
 80089fa:	a901      	add	r1, sp, #4
 80089fc:	b142      	cbz	r2, 8008a10 <__ascii_mbtowc+0x1a>
 80089fe:	b14b      	cbz	r3, 8008a14 <__ascii_mbtowc+0x1e>
 8008a00:	7813      	ldrb	r3, [r2, #0]
 8008a02:	600b      	str	r3, [r1, #0]
 8008a04:	7812      	ldrb	r2, [r2, #0]
 8008a06:	1e10      	subs	r0, r2, #0
 8008a08:	bf18      	it	ne
 8008a0a:	2001      	movne	r0, #1
 8008a0c:	b002      	add	sp, #8
 8008a0e:	4770      	bx	lr
 8008a10:	4610      	mov	r0, r2
 8008a12:	e7fb      	b.n	8008a0c <__ascii_mbtowc+0x16>
 8008a14:	f06f 0001 	mvn.w	r0, #1
 8008a18:	e7f8      	b.n	8008a0c <__ascii_mbtowc+0x16>

08008a1a <memmove>:
 8008a1a:	4288      	cmp	r0, r1
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	eb01 0402 	add.w	r4, r1, r2
 8008a22:	d902      	bls.n	8008a2a <memmove+0x10>
 8008a24:	4284      	cmp	r4, r0
 8008a26:	4623      	mov	r3, r4
 8008a28:	d807      	bhi.n	8008a3a <memmove+0x20>
 8008a2a:	1e43      	subs	r3, r0, #1
 8008a2c:	42a1      	cmp	r1, r4
 8008a2e:	d008      	beq.n	8008a42 <memmove+0x28>
 8008a30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a38:	e7f8      	b.n	8008a2c <memmove+0x12>
 8008a3a:	4402      	add	r2, r0
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	428a      	cmp	r2, r1
 8008a40:	d100      	bne.n	8008a44 <memmove+0x2a>
 8008a42:	bd10      	pop	{r4, pc}
 8008a44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a4c:	e7f7      	b.n	8008a3e <memmove+0x24>

08008a4e <_realloc_r>:
 8008a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	4680      	mov	r8, r0
 8008a54:	4614      	mov	r4, r2
 8008a56:	460e      	mov	r6, r1
 8008a58:	b921      	cbnz	r1, 8008a64 <_realloc_r+0x16>
 8008a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	4611      	mov	r1, r2
 8008a60:	f7fd bed4 	b.w	800680c <_malloc_r>
 8008a64:	b92a      	cbnz	r2, 8008a72 <_realloc_r+0x24>
 8008a66:	f7fd fe65 	bl	8006734 <_free_r>
 8008a6a:	4625      	mov	r5, r4
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a72:	f000 fc67 	bl	8009344 <_malloc_usable_size_r>
 8008a76:	4284      	cmp	r4, r0
 8008a78:	4607      	mov	r7, r0
 8008a7a:	d802      	bhi.n	8008a82 <_realloc_r+0x34>
 8008a7c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a80:	d812      	bhi.n	8008aa8 <_realloc_r+0x5a>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4640      	mov	r0, r8
 8008a86:	f7fd fec1 	bl	800680c <_malloc_r>
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d0ed      	beq.n	8008a6c <_realloc_r+0x1e>
 8008a90:	42bc      	cmp	r4, r7
 8008a92:	4622      	mov	r2, r4
 8008a94:	4631      	mov	r1, r6
 8008a96:	bf28      	it	cs
 8008a98:	463a      	movcs	r2, r7
 8008a9a:	f7fd fe35 	bl	8006708 <memcpy>
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	f7fd fe47 	bl	8006734 <_free_r>
 8008aa6:	e7e1      	b.n	8008a6c <_realloc_r+0x1e>
 8008aa8:	4635      	mov	r5, r6
 8008aaa:	e7df      	b.n	8008a6c <_realloc_r+0x1e>

08008aac <__sfputc_r>:
 8008aac:	6893      	ldr	r3, [r2, #8]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	b410      	push	{r4}
 8008ab4:	6093      	str	r3, [r2, #8]
 8008ab6:	da08      	bge.n	8008aca <__sfputc_r+0x1e>
 8008ab8:	6994      	ldr	r4, [r2, #24]
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	db01      	blt.n	8008ac2 <__sfputc_r+0x16>
 8008abe:	290a      	cmp	r1, #10
 8008ac0:	d103      	bne.n	8008aca <__sfputc_r+0x1e>
 8008ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac6:	f000 b94b 	b.w	8008d60 <__swbuf_r>
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	1c58      	adds	r0, r3, #1
 8008ace:	6010      	str	r0, [r2, #0]
 8008ad0:	7019      	strb	r1, [r3, #0]
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <__sfputs_r>:
 8008ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008adc:	4606      	mov	r6, r0
 8008ade:	460f      	mov	r7, r1
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	18d5      	adds	r5, r2, r3
 8008ae4:	42ac      	cmp	r4, r5
 8008ae6:	d101      	bne.n	8008aec <__sfputs_r+0x12>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e007      	b.n	8008afc <__sfputs_r+0x22>
 8008aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af0:	463a      	mov	r2, r7
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7ff ffda 	bl	8008aac <__sfputc_r>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d1f3      	bne.n	8008ae4 <__sfputs_r+0xa>
 8008afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b00 <_vfiprintf_r>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	460d      	mov	r5, r1
 8008b06:	b09d      	sub	sp, #116	; 0x74
 8008b08:	4614      	mov	r4, r2
 8008b0a:	4698      	mov	r8, r3
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	b118      	cbz	r0, 8008b18 <_vfiprintf_r+0x18>
 8008b10:	6983      	ldr	r3, [r0, #24]
 8008b12:	b90b      	cbnz	r3, 8008b18 <_vfiprintf_r+0x18>
 8008b14:	f000 fb14 	bl	8009140 <__sinit>
 8008b18:	4b89      	ldr	r3, [pc, #548]	; (8008d40 <_vfiprintf_r+0x240>)
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	d11b      	bne.n	8008b56 <_vfiprintf_r+0x56>
 8008b1e:	6875      	ldr	r5, [r6, #4]
 8008b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b22:	07d9      	lsls	r1, r3, #31
 8008b24:	d405      	bmi.n	8008b32 <_vfiprintf_r+0x32>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_vfiprintf_r+0x32>
 8008b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2e:	f7ff ff60 	bl	80089f2 <__retarget_lock_acquire_recursive>
 8008b32:	89ab      	ldrh	r3, [r5, #12]
 8008b34:	071b      	lsls	r3, r3, #28
 8008b36:	d501      	bpl.n	8008b3c <_vfiprintf_r+0x3c>
 8008b38:	692b      	ldr	r3, [r5, #16]
 8008b3a:	b9eb      	cbnz	r3, 8008b78 <_vfiprintf_r+0x78>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f000 f96e 	bl	8008e20 <__swsetup_r>
 8008b44:	b1c0      	cbz	r0, 8008b78 <_vfiprintf_r+0x78>
 8008b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b48:	07dc      	lsls	r4, r3, #31
 8008b4a:	d50e      	bpl.n	8008b6a <_vfiprintf_r+0x6a>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	b01d      	add	sp, #116	; 0x74
 8008b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b56:	4b7b      	ldr	r3, [pc, #492]	; (8008d44 <_vfiprintf_r+0x244>)
 8008b58:	429d      	cmp	r5, r3
 8008b5a:	d101      	bne.n	8008b60 <_vfiprintf_r+0x60>
 8008b5c:	68b5      	ldr	r5, [r6, #8]
 8008b5e:	e7df      	b.n	8008b20 <_vfiprintf_r+0x20>
 8008b60:	4b79      	ldr	r3, [pc, #484]	; (8008d48 <_vfiprintf_r+0x248>)
 8008b62:	429d      	cmp	r5, r3
 8008b64:	bf08      	it	eq
 8008b66:	68f5      	ldreq	r5, [r6, #12]
 8008b68:	e7da      	b.n	8008b20 <_vfiprintf_r+0x20>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	0598      	lsls	r0, r3, #22
 8008b6e:	d4ed      	bmi.n	8008b4c <_vfiprintf_r+0x4c>
 8008b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b72:	f7ff ff3f 	bl	80089f4 <__retarget_lock_release_recursive>
 8008b76:	e7e9      	b.n	8008b4c <_vfiprintf_r+0x4c>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7c:	2320      	movs	r3, #32
 8008b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b86:	2330      	movs	r3, #48	; 0x30
 8008b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d4c <_vfiprintf_r+0x24c>
 8008b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b90:	f04f 0901 	mov.w	r9, #1
 8008b94:	4623      	mov	r3, r4
 8008b96:	469a      	mov	sl, r3
 8008b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b9c:	b10a      	cbz	r2, 8008ba2 <_vfiprintf_r+0xa2>
 8008b9e:	2a25      	cmp	r2, #37	; 0x25
 8008ba0:	d1f9      	bne.n	8008b96 <_vfiprintf_r+0x96>
 8008ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba6:	d00b      	beq.n	8008bc0 <_vfiprintf_r+0xc0>
 8008ba8:	465b      	mov	r3, fp
 8008baa:	4622      	mov	r2, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7ff ff93 	bl	8008ada <__sfputs_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	f000 80aa 	beq.w	8008d0e <_vfiprintf_r+0x20e>
 8008bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bbc:	445a      	add	r2, fp
 8008bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80a2 	beq.w	8008d0e <_vfiprintf_r+0x20e>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd4:	f10a 0a01 	add.w	sl, sl, #1
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	9307      	str	r3, [sp, #28]
 8008bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be0:	931a      	str	r3, [sp, #104]	; 0x68
 8008be2:	4654      	mov	r4, sl
 8008be4:	2205      	movs	r2, #5
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	4858      	ldr	r0, [pc, #352]	; (8008d4c <_vfiprintf_r+0x24c>)
 8008bec:	f7f7 fb18 	bl	8000220 <memchr>
 8008bf0:	9a04      	ldr	r2, [sp, #16]
 8008bf2:	b9d8      	cbnz	r0, 8008c2c <_vfiprintf_r+0x12c>
 8008bf4:	06d1      	lsls	r1, r2, #27
 8008bf6:	bf44      	itt	mi
 8008bf8:	2320      	movmi	r3, #32
 8008bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfe:	0713      	lsls	r3, r2, #28
 8008c00:	bf44      	itt	mi
 8008c02:	232b      	movmi	r3, #43	; 0x2b
 8008c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c08:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0e:	d015      	beq.n	8008c3c <_vfiprintf_r+0x13c>
 8008c10:	9a07      	ldr	r2, [sp, #28]
 8008c12:	4654      	mov	r4, sl
 8008c14:	2000      	movs	r0, #0
 8008c16:	f04f 0c0a 	mov.w	ip, #10
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c20:	3b30      	subs	r3, #48	; 0x30
 8008c22:	2b09      	cmp	r3, #9
 8008c24:	d94e      	bls.n	8008cc4 <_vfiprintf_r+0x1c4>
 8008c26:	b1b0      	cbz	r0, 8008c56 <_vfiprintf_r+0x156>
 8008c28:	9207      	str	r2, [sp, #28]
 8008c2a:	e014      	b.n	8008c56 <_vfiprintf_r+0x156>
 8008c2c:	eba0 0308 	sub.w	r3, r0, r8
 8008c30:	fa09 f303 	lsl.w	r3, r9, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	46a2      	mov	sl, r4
 8008c3a:	e7d2      	b.n	8008be2 <_vfiprintf_r+0xe2>
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	1d19      	adds	r1, r3, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	9103      	str	r1, [sp, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	bfbb      	ittet	lt
 8008c48:	425b      	neglt	r3, r3
 8008c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c4e:	9307      	strge	r3, [sp, #28]
 8008c50:	9307      	strlt	r3, [sp, #28]
 8008c52:	bfb8      	it	lt
 8008c54:	9204      	strlt	r2, [sp, #16]
 8008c56:	7823      	ldrb	r3, [r4, #0]
 8008c58:	2b2e      	cmp	r3, #46	; 0x2e
 8008c5a:	d10c      	bne.n	8008c76 <_vfiprintf_r+0x176>
 8008c5c:	7863      	ldrb	r3, [r4, #1]
 8008c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c60:	d135      	bne.n	8008cce <_vfiprintf_r+0x1ce>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	1d1a      	adds	r2, r3, #4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	9203      	str	r2, [sp, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bfb8      	it	lt
 8008c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c72:	3402      	adds	r4, #2
 8008c74:	9305      	str	r3, [sp, #20]
 8008c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d5c <_vfiprintf_r+0x25c>
 8008c7a:	7821      	ldrb	r1, [r4, #0]
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	4650      	mov	r0, sl
 8008c80:	f7f7 face 	bl	8000220 <memchr>
 8008c84:	b140      	cbz	r0, 8008c98 <_vfiprintf_r+0x198>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	eba0 000a 	sub.w	r0, r0, sl
 8008c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8008c90:	9b04      	ldr	r3, [sp, #16]
 8008c92:	4303      	orrs	r3, r0
 8008c94:	3401      	adds	r4, #1
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9c:	482c      	ldr	r0, [pc, #176]	; (8008d50 <_vfiprintf_r+0x250>)
 8008c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ca2:	2206      	movs	r2, #6
 8008ca4:	f7f7 fabc 	bl	8000220 <memchr>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d03f      	beq.n	8008d2c <_vfiprintf_r+0x22c>
 8008cac:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <_vfiprintf_r+0x254>)
 8008cae:	bb1b      	cbnz	r3, 8008cf8 <_vfiprintf_r+0x1f8>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	3307      	adds	r3, #7
 8008cb4:	f023 0307 	bic.w	r3, r3, #7
 8008cb8:	3308      	adds	r3, #8
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cbe:	443b      	add	r3, r7
 8008cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc2:	e767      	b.n	8008b94 <_vfiprintf_r+0x94>
 8008cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc8:	460c      	mov	r4, r1
 8008cca:	2001      	movs	r0, #1
 8008ccc:	e7a5      	b.n	8008c1a <_vfiprintf_r+0x11a>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	3401      	adds	r4, #1
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f04f 0c0a 	mov.w	ip, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce0:	3a30      	subs	r2, #48	; 0x30
 8008ce2:	2a09      	cmp	r2, #9
 8008ce4:	d903      	bls.n	8008cee <_vfiprintf_r+0x1ee>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0c5      	beq.n	8008c76 <_vfiprintf_r+0x176>
 8008cea:	9105      	str	r1, [sp, #20]
 8008cec:	e7c3      	b.n	8008c76 <_vfiprintf_r+0x176>
 8008cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e7f0      	b.n	8008cda <_vfiprintf_r+0x1da>
 8008cf8:	ab03      	add	r3, sp, #12
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	462a      	mov	r2, r5
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <_vfiprintf_r+0x258>)
 8008d00:	a904      	add	r1, sp, #16
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7fd fe96 	bl	8006a34 <_printf_float>
 8008d08:	4607      	mov	r7, r0
 8008d0a:	1c78      	adds	r0, r7, #1
 8008d0c:	d1d6      	bne.n	8008cbc <_vfiprintf_r+0x1bc>
 8008d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d10:	07d9      	lsls	r1, r3, #31
 8008d12:	d405      	bmi.n	8008d20 <_vfiprintf_r+0x220>
 8008d14:	89ab      	ldrh	r3, [r5, #12]
 8008d16:	059a      	lsls	r2, r3, #22
 8008d18:	d402      	bmi.n	8008d20 <_vfiprintf_r+0x220>
 8008d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d1c:	f7ff fe6a 	bl	80089f4 <__retarget_lock_release_recursive>
 8008d20:	89ab      	ldrh	r3, [r5, #12]
 8008d22:	065b      	lsls	r3, r3, #25
 8008d24:	f53f af12 	bmi.w	8008b4c <_vfiprintf_r+0x4c>
 8008d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d2a:	e711      	b.n	8008b50 <_vfiprintf_r+0x50>
 8008d2c:	ab03      	add	r3, sp, #12
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	462a      	mov	r2, r5
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <_vfiprintf_r+0x258>)
 8008d34:	a904      	add	r1, sp, #16
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7fe f920 	bl	8006f7c <_printf_i>
 8008d3c:	e7e4      	b.n	8008d08 <_vfiprintf_r+0x208>
 8008d3e:	bf00      	nop
 8008d40:	08009b4c 	.word	0x08009b4c
 8008d44:	08009b6c 	.word	0x08009b6c
 8008d48:	08009b2c 	.word	0x08009b2c
 8008d4c:	080099d4 	.word	0x080099d4
 8008d50:	080099de 	.word	0x080099de
 8008d54:	08006a35 	.word	0x08006a35
 8008d58:	08008adb 	.word	0x08008adb
 8008d5c:	080099da 	.word	0x080099da

08008d60 <__swbuf_r>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	460e      	mov	r6, r1
 8008d64:	4614      	mov	r4, r2
 8008d66:	4605      	mov	r5, r0
 8008d68:	b118      	cbz	r0, 8008d72 <__swbuf_r+0x12>
 8008d6a:	6983      	ldr	r3, [r0, #24]
 8008d6c:	b90b      	cbnz	r3, 8008d72 <__swbuf_r+0x12>
 8008d6e:	f000 f9e7 	bl	8009140 <__sinit>
 8008d72:	4b21      	ldr	r3, [pc, #132]	; (8008df8 <__swbuf_r+0x98>)
 8008d74:	429c      	cmp	r4, r3
 8008d76:	d12b      	bne.n	8008dd0 <__swbuf_r+0x70>
 8008d78:	686c      	ldr	r4, [r5, #4]
 8008d7a:	69a3      	ldr	r3, [r4, #24]
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	071a      	lsls	r2, r3, #28
 8008d82:	d52f      	bpl.n	8008de4 <__swbuf_r+0x84>
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	b36b      	cbz	r3, 8008de4 <__swbuf_r+0x84>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	6820      	ldr	r0, [r4, #0]
 8008d8c:	1ac0      	subs	r0, r0, r3
 8008d8e:	6963      	ldr	r3, [r4, #20]
 8008d90:	b2f6      	uxtb	r6, r6
 8008d92:	4283      	cmp	r3, r0
 8008d94:	4637      	mov	r7, r6
 8008d96:	dc04      	bgt.n	8008da2 <__swbuf_r+0x42>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 f93c 	bl	8009018 <_fflush_r>
 8008da0:	bb30      	cbnz	r0, 8008df0 <__swbuf_r+0x90>
 8008da2:	68a3      	ldr	r3, [r4, #8]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	60a3      	str	r3, [r4, #8]
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	6022      	str	r2, [r4, #0]
 8008dae:	701e      	strb	r6, [r3, #0]
 8008db0:	6963      	ldr	r3, [r4, #20]
 8008db2:	3001      	adds	r0, #1
 8008db4:	4283      	cmp	r3, r0
 8008db6:	d004      	beq.n	8008dc2 <__swbuf_r+0x62>
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	07db      	lsls	r3, r3, #31
 8008dbc:	d506      	bpl.n	8008dcc <__swbuf_r+0x6c>
 8008dbe:	2e0a      	cmp	r6, #10
 8008dc0:	d104      	bne.n	8008dcc <__swbuf_r+0x6c>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 f927 	bl	8009018 <_fflush_r>
 8008dca:	b988      	cbnz	r0, 8008df0 <__swbuf_r+0x90>
 8008dcc:	4638      	mov	r0, r7
 8008dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <__swbuf_r+0x9c>)
 8008dd2:	429c      	cmp	r4, r3
 8008dd4:	d101      	bne.n	8008dda <__swbuf_r+0x7a>
 8008dd6:	68ac      	ldr	r4, [r5, #8]
 8008dd8:	e7cf      	b.n	8008d7a <__swbuf_r+0x1a>
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <__swbuf_r+0xa0>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	bf08      	it	eq
 8008de0:	68ec      	ldreq	r4, [r5, #12]
 8008de2:	e7ca      	b.n	8008d7a <__swbuf_r+0x1a>
 8008de4:	4621      	mov	r1, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 f81a 	bl	8008e20 <__swsetup_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d0cb      	beq.n	8008d88 <__swbuf_r+0x28>
 8008df0:	f04f 37ff 	mov.w	r7, #4294967295
 8008df4:	e7ea      	b.n	8008dcc <__swbuf_r+0x6c>
 8008df6:	bf00      	nop
 8008df8:	08009b4c 	.word	0x08009b4c
 8008dfc:	08009b6c 	.word	0x08009b6c
 8008e00:	08009b2c 	.word	0x08009b2c

08008e04 <__ascii_wctomb>:
 8008e04:	b149      	cbz	r1, 8008e1a <__ascii_wctomb+0x16>
 8008e06:	2aff      	cmp	r2, #255	; 0xff
 8008e08:	bf85      	ittet	hi
 8008e0a:	238a      	movhi	r3, #138	; 0x8a
 8008e0c:	6003      	strhi	r3, [r0, #0]
 8008e0e:	700a      	strbls	r2, [r1, #0]
 8008e10:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e14:	bf98      	it	ls
 8008e16:	2001      	movls	r0, #1
 8008e18:	4770      	bx	lr
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4770      	bx	lr
	...

08008e20 <__swsetup_r>:
 8008e20:	4b32      	ldr	r3, [pc, #200]	; (8008eec <__swsetup_r+0xcc>)
 8008e22:	b570      	push	{r4, r5, r6, lr}
 8008e24:	681d      	ldr	r5, [r3, #0]
 8008e26:	4606      	mov	r6, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	b125      	cbz	r5, 8008e36 <__swsetup_r+0x16>
 8008e2c:	69ab      	ldr	r3, [r5, #24]
 8008e2e:	b913      	cbnz	r3, 8008e36 <__swsetup_r+0x16>
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f985 	bl	8009140 <__sinit>
 8008e36:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <__swsetup_r+0xd0>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d10f      	bne.n	8008e5c <__swsetup_r+0x3c>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	0719      	lsls	r1, r3, #28
 8008e46:	d42c      	bmi.n	8008ea2 <__swsetup_r+0x82>
 8008e48:	06dd      	lsls	r5, r3, #27
 8008e4a:	d411      	bmi.n	8008e70 <__swsetup_r+0x50>
 8008e4c:	2309      	movs	r3, #9
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5a:	e03e      	b.n	8008eda <__swsetup_r+0xba>
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <__swsetup_r+0xd4>)
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d101      	bne.n	8008e66 <__swsetup_r+0x46>
 8008e62:	68ac      	ldr	r4, [r5, #8]
 8008e64:	e7eb      	b.n	8008e3e <__swsetup_r+0x1e>
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <__swsetup_r+0xd8>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	bf08      	it	eq
 8008e6c:	68ec      	ldreq	r4, [r5, #12]
 8008e6e:	e7e6      	b.n	8008e3e <__swsetup_r+0x1e>
 8008e70:	0758      	lsls	r0, r3, #29
 8008e72:	d512      	bpl.n	8008e9a <__swsetup_r+0x7a>
 8008e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e76:	b141      	cbz	r1, 8008e8a <__swsetup_r+0x6a>
 8008e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e7c:	4299      	cmp	r1, r3
 8008e7e:	d002      	beq.n	8008e86 <__swsetup_r+0x66>
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7fd fc57 	bl	8006734 <_free_r>
 8008e86:	2300      	movs	r3, #0
 8008e88:	6363      	str	r3, [r4, #52]	; 0x34
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	2300      	movs	r3, #0
 8008e94:	6063      	str	r3, [r4, #4]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f043 0308 	orr.w	r3, r3, #8
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	b94b      	cbnz	r3, 8008eba <__swsetup_r+0x9a>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb0:	d003      	beq.n	8008eba <__swsetup_r+0x9a>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 fa05 	bl	80092c4 <__smakebuf_r>
 8008eba:	89a0      	ldrh	r0, [r4, #12]
 8008ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec0:	f010 0301 	ands.w	r3, r0, #1
 8008ec4:	d00a      	beq.n	8008edc <__swsetup_r+0xbc>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	6963      	ldr	r3, [r4, #20]
 8008ecc:	425b      	negs	r3, r3
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	b943      	cbnz	r3, 8008ee6 <__swsetup_r+0xc6>
 8008ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ed8:	d1ba      	bne.n	8008e50 <__swsetup_r+0x30>
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	0781      	lsls	r1, r0, #30
 8008ede:	bf58      	it	pl
 8008ee0:	6963      	ldrpl	r3, [r4, #20]
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	e7f4      	b.n	8008ed0 <__swsetup_r+0xb0>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e7f7      	b.n	8008eda <__swsetup_r+0xba>
 8008eea:	bf00      	nop
 8008eec:	20000018 	.word	0x20000018
 8008ef0:	08009b4c 	.word	0x08009b4c
 8008ef4:	08009b6c 	.word	0x08009b6c
 8008ef8:	08009b2c 	.word	0x08009b2c

08008efc <abort>:
 8008efc:	b508      	push	{r3, lr}
 8008efe:	2006      	movs	r0, #6
 8008f00:	f000 fa50 	bl	80093a4 <raise>
 8008f04:	2001      	movs	r0, #1
 8008f06:	f7f9 fb2f 	bl	8002568 <_exit>
	...

08008f0c <__sflush_r>:
 8008f0c:	898a      	ldrh	r2, [r1, #12]
 8008f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f12:	4605      	mov	r5, r0
 8008f14:	0710      	lsls	r0, r2, #28
 8008f16:	460c      	mov	r4, r1
 8008f18:	d458      	bmi.n	8008fcc <__sflush_r+0xc0>
 8008f1a:	684b      	ldr	r3, [r1, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dc05      	bgt.n	8008f2c <__sflush_r+0x20>
 8008f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dc02      	bgt.n	8008f2c <__sflush_r+0x20>
 8008f26:	2000      	movs	r0, #0
 8008f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	d0f9      	beq.n	8008f26 <__sflush_r+0x1a>
 8008f32:	2300      	movs	r3, #0
 8008f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f38:	682f      	ldr	r7, [r5, #0]
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	d032      	beq.n	8008fa4 <__sflush_r+0x98>
 8008f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	075a      	lsls	r2, r3, #29
 8008f44:	d505      	bpl.n	8008f52 <__sflush_r+0x46>
 8008f46:	6863      	ldr	r3, [r4, #4]
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f4c:	b10b      	cbz	r3, 8008f52 <__sflush_r+0x46>
 8008f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f50:	1ac0      	subs	r0, r0, r3
 8008f52:	2300      	movs	r3, #0
 8008f54:	4602      	mov	r2, r0
 8008f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f58:	6a21      	ldr	r1, [r4, #32]
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b0      	blx	r6
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	d106      	bne.n	8008f72 <__sflush_r+0x66>
 8008f64:	6829      	ldr	r1, [r5, #0]
 8008f66:	291d      	cmp	r1, #29
 8008f68:	d82c      	bhi.n	8008fc4 <__sflush_r+0xb8>
 8008f6a:	4a2a      	ldr	r2, [pc, #168]	; (8009014 <__sflush_r+0x108>)
 8008f6c:	40ca      	lsrs	r2, r1
 8008f6e:	07d6      	lsls	r6, r2, #31
 8008f70:	d528      	bpl.n	8008fc4 <__sflush_r+0xb8>
 8008f72:	2200      	movs	r2, #0
 8008f74:	6062      	str	r2, [r4, #4]
 8008f76:	04d9      	lsls	r1, r3, #19
 8008f78:	6922      	ldr	r2, [r4, #16]
 8008f7a:	6022      	str	r2, [r4, #0]
 8008f7c:	d504      	bpl.n	8008f88 <__sflush_r+0x7c>
 8008f7e:	1c42      	adds	r2, r0, #1
 8008f80:	d101      	bne.n	8008f86 <__sflush_r+0x7a>
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	b903      	cbnz	r3, 8008f88 <__sflush_r+0x7c>
 8008f86:	6560      	str	r0, [r4, #84]	; 0x54
 8008f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f8a:	602f      	str	r7, [r5, #0]
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	d0ca      	beq.n	8008f26 <__sflush_r+0x1a>
 8008f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f94:	4299      	cmp	r1, r3
 8008f96:	d002      	beq.n	8008f9e <__sflush_r+0x92>
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f7fd fbcb 	bl	8006734 <_free_r>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8008fa2:	e7c1      	b.n	8008f28 <__sflush_r+0x1c>
 8008fa4:	6a21      	ldr	r1, [r4, #32]
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b0      	blx	r6
 8008fac:	1c41      	adds	r1, r0, #1
 8008fae:	d1c7      	bne.n	8008f40 <__sflush_r+0x34>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0c4      	beq.n	8008f40 <__sflush_r+0x34>
 8008fb6:	2b1d      	cmp	r3, #29
 8008fb8:	d001      	beq.n	8008fbe <__sflush_r+0xb2>
 8008fba:	2b16      	cmp	r3, #22
 8008fbc:	d101      	bne.n	8008fc2 <__sflush_r+0xb6>
 8008fbe:	602f      	str	r7, [r5, #0]
 8008fc0:	e7b1      	b.n	8008f26 <__sflush_r+0x1a>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	e7ad      	b.n	8008f28 <__sflush_r+0x1c>
 8008fcc:	690f      	ldr	r7, [r1, #16]
 8008fce:	2f00      	cmp	r7, #0
 8008fd0:	d0a9      	beq.n	8008f26 <__sflush_r+0x1a>
 8008fd2:	0793      	lsls	r3, r2, #30
 8008fd4:	680e      	ldr	r6, [r1, #0]
 8008fd6:	bf08      	it	eq
 8008fd8:	694b      	ldreq	r3, [r1, #20]
 8008fda:	600f      	str	r7, [r1, #0]
 8008fdc:	bf18      	it	ne
 8008fde:	2300      	movne	r3, #0
 8008fe0:	eba6 0807 	sub.w	r8, r6, r7
 8008fe4:	608b      	str	r3, [r1, #8]
 8008fe6:	f1b8 0f00 	cmp.w	r8, #0
 8008fea:	dd9c      	ble.n	8008f26 <__sflush_r+0x1a>
 8008fec:	6a21      	ldr	r1, [r4, #32]
 8008fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ff0:	4643      	mov	r3, r8
 8008ff2:	463a      	mov	r2, r7
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b0      	blx	r6
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dc06      	bgt.n	800900a <__sflush_r+0xfe>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	e78e      	b.n	8008f28 <__sflush_r+0x1c>
 800900a:	4407      	add	r7, r0
 800900c:	eba8 0800 	sub.w	r8, r8, r0
 8009010:	e7e9      	b.n	8008fe6 <__sflush_r+0xda>
 8009012:	bf00      	nop
 8009014:	20400001 	.word	0x20400001

08009018 <_fflush_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	690b      	ldr	r3, [r1, #16]
 800901c:	4605      	mov	r5, r0
 800901e:	460c      	mov	r4, r1
 8009020:	b913      	cbnz	r3, 8009028 <_fflush_r+0x10>
 8009022:	2500      	movs	r5, #0
 8009024:	4628      	mov	r0, r5
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	b118      	cbz	r0, 8009032 <_fflush_r+0x1a>
 800902a:	6983      	ldr	r3, [r0, #24]
 800902c:	b90b      	cbnz	r3, 8009032 <_fflush_r+0x1a>
 800902e:	f000 f887 	bl	8009140 <__sinit>
 8009032:	4b14      	ldr	r3, [pc, #80]	; (8009084 <_fflush_r+0x6c>)
 8009034:	429c      	cmp	r4, r3
 8009036:	d11b      	bne.n	8009070 <_fflush_r+0x58>
 8009038:	686c      	ldr	r4, [r5, #4]
 800903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0ef      	beq.n	8009022 <_fflush_r+0xa>
 8009042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009044:	07d0      	lsls	r0, r2, #31
 8009046:	d404      	bmi.n	8009052 <_fflush_r+0x3a>
 8009048:	0599      	lsls	r1, r3, #22
 800904a:	d402      	bmi.n	8009052 <_fflush_r+0x3a>
 800904c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800904e:	f7ff fcd0 	bl	80089f2 <__retarget_lock_acquire_recursive>
 8009052:	4628      	mov	r0, r5
 8009054:	4621      	mov	r1, r4
 8009056:	f7ff ff59 	bl	8008f0c <__sflush_r>
 800905a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800905c:	07da      	lsls	r2, r3, #31
 800905e:	4605      	mov	r5, r0
 8009060:	d4e0      	bmi.n	8009024 <_fflush_r+0xc>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	059b      	lsls	r3, r3, #22
 8009066:	d4dd      	bmi.n	8009024 <_fflush_r+0xc>
 8009068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800906a:	f7ff fcc3 	bl	80089f4 <__retarget_lock_release_recursive>
 800906e:	e7d9      	b.n	8009024 <_fflush_r+0xc>
 8009070:	4b05      	ldr	r3, [pc, #20]	; (8009088 <_fflush_r+0x70>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d101      	bne.n	800907a <_fflush_r+0x62>
 8009076:	68ac      	ldr	r4, [r5, #8]
 8009078:	e7df      	b.n	800903a <_fflush_r+0x22>
 800907a:	4b04      	ldr	r3, [pc, #16]	; (800908c <_fflush_r+0x74>)
 800907c:	429c      	cmp	r4, r3
 800907e:	bf08      	it	eq
 8009080:	68ec      	ldreq	r4, [r5, #12]
 8009082:	e7da      	b.n	800903a <_fflush_r+0x22>
 8009084:	08009b4c 	.word	0x08009b4c
 8009088:	08009b6c 	.word	0x08009b6c
 800908c:	08009b2c 	.word	0x08009b2c

08009090 <std>:
 8009090:	2300      	movs	r3, #0
 8009092:	b510      	push	{r4, lr}
 8009094:	4604      	mov	r4, r0
 8009096:	e9c0 3300 	strd	r3, r3, [r0]
 800909a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800909e:	6083      	str	r3, [r0, #8]
 80090a0:	8181      	strh	r1, [r0, #12]
 80090a2:	6643      	str	r3, [r0, #100]	; 0x64
 80090a4:	81c2      	strh	r2, [r0, #14]
 80090a6:	6183      	str	r3, [r0, #24]
 80090a8:	4619      	mov	r1, r3
 80090aa:	2208      	movs	r2, #8
 80090ac:	305c      	adds	r0, #92	; 0x5c
 80090ae:	f7fd fb39 	bl	8006724 <memset>
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x38>)
 80090b4:	6263      	str	r3, [r4, #36]	; 0x24
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x3c>)
 80090b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <std+0x40>)
 80090bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <std+0x44>)
 80090c0:	6224      	str	r4, [r4, #32]
 80090c2:	6323      	str	r3, [r4, #48]	; 0x30
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop
 80090c8:	080093dd 	.word	0x080093dd
 80090cc:	080093ff 	.word	0x080093ff
 80090d0:	08009437 	.word	0x08009437
 80090d4:	0800945b 	.word	0x0800945b

080090d8 <_cleanup_r>:
 80090d8:	4901      	ldr	r1, [pc, #4]	; (80090e0 <_cleanup_r+0x8>)
 80090da:	f000 b8af 	b.w	800923c <_fwalk_reent>
 80090de:	bf00      	nop
 80090e0:	08009019 	.word	0x08009019

080090e4 <__sfmoreglue>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	2268      	movs	r2, #104	; 0x68
 80090e8:	1e4d      	subs	r5, r1, #1
 80090ea:	4355      	muls	r5, r2
 80090ec:	460e      	mov	r6, r1
 80090ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090f2:	f7fd fb8b 	bl	800680c <_malloc_r>
 80090f6:	4604      	mov	r4, r0
 80090f8:	b140      	cbz	r0, 800910c <__sfmoreglue+0x28>
 80090fa:	2100      	movs	r1, #0
 80090fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009100:	300c      	adds	r0, #12
 8009102:	60a0      	str	r0, [r4, #8]
 8009104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009108:	f7fd fb0c 	bl	8006724 <memset>
 800910c:	4620      	mov	r0, r4
 800910e:	bd70      	pop	{r4, r5, r6, pc}

08009110 <__sfp_lock_acquire>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__sfp_lock_acquire+0x8>)
 8009112:	f7ff bc6e 	b.w	80089f2 <__retarget_lock_acquire_recursive>
 8009116:	bf00      	nop
 8009118:	200003c9 	.word	0x200003c9

0800911c <__sfp_lock_release>:
 800911c:	4801      	ldr	r0, [pc, #4]	; (8009124 <__sfp_lock_release+0x8>)
 800911e:	f7ff bc69 	b.w	80089f4 <__retarget_lock_release_recursive>
 8009122:	bf00      	nop
 8009124:	200003c9 	.word	0x200003c9

08009128 <__sinit_lock_acquire>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__sinit_lock_acquire+0x8>)
 800912a:	f7ff bc62 	b.w	80089f2 <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	200003ca 	.word	0x200003ca

08009134 <__sinit_lock_release>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__sinit_lock_release+0x8>)
 8009136:	f7ff bc5d 	b.w	80089f4 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	200003ca 	.word	0x200003ca

08009140 <__sinit>:
 8009140:	b510      	push	{r4, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	f7ff fff0 	bl	8009128 <__sinit_lock_acquire>
 8009148:	69a3      	ldr	r3, [r4, #24]
 800914a:	b11b      	cbz	r3, 8009154 <__sinit+0x14>
 800914c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009150:	f7ff bff0 	b.w	8009134 <__sinit_lock_release>
 8009154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009158:	6523      	str	r3, [r4, #80]	; 0x50
 800915a:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <__sinit+0x68>)
 800915c:	4a13      	ldr	r2, [pc, #76]	; (80091ac <__sinit+0x6c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	62a2      	str	r2, [r4, #40]	; 0x28
 8009162:	42a3      	cmp	r3, r4
 8009164:	bf04      	itt	eq
 8009166:	2301      	moveq	r3, #1
 8009168:	61a3      	streq	r3, [r4, #24]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f820 	bl	80091b0 <__sfp>
 8009170:	6060      	str	r0, [r4, #4]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f81c 	bl	80091b0 <__sfp>
 8009178:	60a0      	str	r0, [r4, #8]
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f818 	bl	80091b0 <__sfp>
 8009180:	2200      	movs	r2, #0
 8009182:	60e0      	str	r0, [r4, #12]
 8009184:	2104      	movs	r1, #4
 8009186:	6860      	ldr	r0, [r4, #4]
 8009188:	f7ff ff82 	bl	8009090 <std>
 800918c:	68a0      	ldr	r0, [r4, #8]
 800918e:	2201      	movs	r2, #1
 8009190:	2109      	movs	r1, #9
 8009192:	f7ff ff7d 	bl	8009090 <std>
 8009196:	68e0      	ldr	r0, [r4, #12]
 8009198:	2202      	movs	r2, #2
 800919a:	2112      	movs	r1, #18
 800919c:	f7ff ff78 	bl	8009090 <std>
 80091a0:	2301      	movs	r3, #1
 80091a2:	61a3      	str	r3, [r4, #24]
 80091a4:	e7d2      	b.n	800914c <__sinit+0xc>
 80091a6:	bf00      	nop
 80091a8:	080097b4 	.word	0x080097b4
 80091ac:	080090d9 	.word	0x080090d9

080091b0 <__sfp>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	4607      	mov	r7, r0
 80091b4:	f7ff ffac 	bl	8009110 <__sfp_lock_acquire>
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <__sfp+0x84>)
 80091ba:	681e      	ldr	r6, [r3, #0]
 80091bc:	69b3      	ldr	r3, [r6, #24]
 80091be:	b913      	cbnz	r3, 80091c6 <__sfp+0x16>
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7ff ffbd 	bl	8009140 <__sinit>
 80091c6:	3648      	adds	r6, #72	; 0x48
 80091c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	d503      	bpl.n	80091d8 <__sfp+0x28>
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	b30b      	cbz	r3, 8009218 <__sfp+0x68>
 80091d4:	6836      	ldr	r6, [r6, #0]
 80091d6:	e7f7      	b.n	80091c8 <__sfp+0x18>
 80091d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091dc:	b9d5      	cbnz	r5, 8009214 <__sfp+0x64>
 80091de:	4b16      	ldr	r3, [pc, #88]	; (8009238 <__sfp+0x88>)
 80091e0:	60e3      	str	r3, [r4, #12]
 80091e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091e6:	6665      	str	r5, [r4, #100]	; 0x64
 80091e8:	f7ff fc02 	bl	80089f0 <__retarget_lock_init_recursive>
 80091ec:	f7ff ff96 	bl	800911c <__sfp_lock_release>
 80091f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f8:	6025      	str	r5, [r4, #0]
 80091fa:	61a5      	str	r5, [r4, #24]
 80091fc:	2208      	movs	r2, #8
 80091fe:	4629      	mov	r1, r5
 8009200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009204:	f7fd fa8e 	bl	8006724 <memset>
 8009208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800920c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009210:	4620      	mov	r0, r4
 8009212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009214:	3468      	adds	r4, #104	; 0x68
 8009216:	e7d9      	b.n	80091cc <__sfp+0x1c>
 8009218:	2104      	movs	r1, #4
 800921a:	4638      	mov	r0, r7
 800921c:	f7ff ff62 	bl	80090e4 <__sfmoreglue>
 8009220:	4604      	mov	r4, r0
 8009222:	6030      	str	r0, [r6, #0]
 8009224:	2800      	cmp	r0, #0
 8009226:	d1d5      	bne.n	80091d4 <__sfp+0x24>
 8009228:	f7ff ff78 	bl	800911c <__sfp_lock_release>
 800922c:	230c      	movs	r3, #12
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	e7ee      	b.n	8009210 <__sfp+0x60>
 8009232:	bf00      	nop
 8009234:	080097b4 	.word	0x080097b4
 8009238:	ffff0001 	.word	0xffff0001

0800923c <_fwalk_reent>:
 800923c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009240:	4606      	mov	r6, r0
 8009242:	4688      	mov	r8, r1
 8009244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009248:	2700      	movs	r7, #0
 800924a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800924e:	f1b9 0901 	subs.w	r9, r9, #1
 8009252:	d505      	bpl.n	8009260 <_fwalk_reent+0x24>
 8009254:	6824      	ldr	r4, [r4, #0]
 8009256:	2c00      	cmp	r4, #0
 8009258:	d1f7      	bne.n	800924a <_fwalk_reent+0xe>
 800925a:	4638      	mov	r0, r7
 800925c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009260:	89ab      	ldrh	r3, [r5, #12]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d907      	bls.n	8009276 <_fwalk_reent+0x3a>
 8009266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800926a:	3301      	adds	r3, #1
 800926c:	d003      	beq.n	8009276 <_fwalk_reent+0x3a>
 800926e:	4629      	mov	r1, r5
 8009270:	4630      	mov	r0, r6
 8009272:	47c0      	blx	r8
 8009274:	4307      	orrs	r7, r0
 8009276:	3568      	adds	r5, #104	; 0x68
 8009278:	e7e9      	b.n	800924e <_fwalk_reent+0x12>

0800927a <__swhatbuf_r>:
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	460e      	mov	r6, r1
 800927e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009282:	2900      	cmp	r1, #0
 8009284:	b096      	sub	sp, #88	; 0x58
 8009286:	4614      	mov	r4, r2
 8009288:	461d      	mov	r5, r3
 800928a:	da08      	bge.n	800929e <__swhatbuf_r+0x24>
 800928c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	602a      	str	r2, [r5, #0]
 8009294:	061a      	lsls	r2, r3, #24
 8009296:	d410      	bmi.n	80092ba <__swhatbuf_r+0x40>
 8009298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929c:	e00e      	b.n	80092bc <__swhatbuf_r+0x42>
 800929e:	466a      	mov	r2, sp
 80092a0:	f000 f902 	bl	80094a8 <_fstat_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	dbf1      	blt.n	800928c <__swhatbuf_r+0x12>
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b2:	425a      	negs	r2, r3
 80092b4:	415a      	adcs	r2, r3
 80092b6:	602a      	str	r2, [r5, #0]
 80092b8:	e7ee      	b.n	8009298 <__swhatbuf_r+0x1e>
 80092ba:	2340      	movs	r3, #64	; 0x40
 80092bc:	2000      	movs	r0, #0
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	b016      	add	sp, #88	; 0x58
 80092c2:	bd70      	pop	{r4, r5, r6, pc}

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	ab01      	add	r3, sp, #4
 80092e2:	466a      	mov	r2, sp
 80092e4:	f7ff ffc9 	bl	800927a <__swhatbuf_r>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7fd fa8d 	bl	800680c <_malloc_r>
 80092f2:	b948      	cbnz	r0, 8009308 <__smakebuf_r+0x44>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d4ef      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7e3      	b.n	80092d0 <__smakebuf_r+0xc>
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <__smakebuf_r+0x7c>)
 800930a:	62b3      	str	r3, [r6, #40]	; 0x28
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	6163      	str	r3, [r4, #20]
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	6120      	str	r0, [r4, #16]
 800931e:	b15b      	cbz	r3, 8009338 <__smakebuf_r+0x74>
 8009320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009324:	4630      	mov	r0, r6
 8009326:	f000 f8d1 	bl	80094cc <_isatty_r>
 800932a:	b128      	cbz	r0, 8009338 <__smakebuf_r+0x74>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	89a0      	ldrh	r0, [r4, #12]
 800933a:	4305      	orrs	r5, r0
 800933c:	81a5      	strh	r5, [r4, #12]
 800933e:	e7cd      	b.n	80092dc <__smakebuf_r+0x18>
 8009340:	080090d9 	.word	0x080090d9

08009344 <_malloc_usable_size_r>:
 8009344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009348:	1f18      	subs	r0, r3, #4
 800934a:	2b00      	cmp	r3, #0
 800934c:	bfbc      	itt	lt
 800934e:	580b      	ldrlt	r3, [r1, r0]
 8009350:	18c0      	addlt	r0, r0, r3
 8009352:	4770      	bx	lr

08009354 <_raise_r>:
 8009354:	291f      	cmp	r1, #31
 8009356:	b538      	push	{r3, r4, r5, lr}
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	d904      	bls.n	8009368 <_raise_r+0x14>
 800935e:	2316      	movs	r3, #22
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800936a:	b112      	cbz	r2, 8009372 <_raise_r+0x1e>
 800936c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009370:	b94b      	cbnz	r3, 8009386 <_raise_r+0x32>
 8009372:	4620      	mov	r0, r4
 8009374:	f000 f830 	bl	80093d8 <_getpid_r>
 8009378:	462a      	mov	r2, r5
 800937a:	4601      	mov	r1, r0
 800937c:	4620      	mov	r0, r4
 800937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009382:	f000 b817 	b.w	80093b4 <_kill_r>
 8009386:	2b01      	cmp	r3, #1
 8009388:	d00a      	beq.n	80093a0 <_raise_r+0x4c>
 800938a:	1c59      	adds	r1, r3, #1
 800938c:	d103      	bne.n	8009396 <_raise_r+0x42>
 800938e:	2316      	movs	r3, #22
 8009390:	6003      	str	r3, [r0, #0]
 8009392:	2001      	movs	r0, #1
 8009394:	e7e7      	b.n	8009366 <_raise_r+0x12>
 8009396:	2400      	movs	r4, #0
 8009398:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800939c:	4628      	mov	r0, r5
 800939e:	4798      	blx	r3
 80093a0:	2000      	movs	r0, #0
 80093a2:	e7e0      	b.n	8009366 <_raise_r+0x12>

080093a4 <raise>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <raise+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f7ff bfd3 	b.w	8009354 <_raise_r>
 80093ae:	bf00      	nop
 80093b0:	20000018 	.word	0x20000018

080093b4 <_kill_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4d07      	ldr	r5, [pc, #28]	; (80093d4 <_kill_r+0x20>)
 80093b8:	2300      	movs	r3, #0
 80093ba:	4604      	mov	r4, r0
 80093bc:	4608      	mov	r0, r1
 80093be:	4611      	mov	r1, r2
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	f7f9 f8c1 	bl	8002548 <_kill>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	d102      	bne.n	80093d0 <_kill_r+0x1c>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	b103      	cbz	r3, 80093d0 <_kill_r+0x1c>
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	bd38      	pop	{r3, r4, r5, pc}
 80093d2:	bf00      	nop
 80093d4:	200003c4 	.word	0x200003c4

080093d8 <_getpid_r>:
 80093d8:	f7f9 b8ae 	b.w	8002538 <_getpid>

080093dc <__sread>:
 80093dc:	b510      	push	{r4, lr}
 80093de:	460c      	mov	r4, r1
 80093e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e4:	f000 f894 	bl	8009510 <_read_r>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	bfab      	itete	ge
 80093ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093ee:	89a3      	ldrhlt	r3, [r4, #12]
 80093f0:	181b      	addge	r3, r3, r0
 80093f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093f6:	bfac      	ite	ge
 80093f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093fa:	81a3      	strhlt	r3, [r4, #12]
 80093fc:	bd10      	pop	{r4, pc}

080093fe <__swrite>:
 80093fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	461f      	mov	r7, r3
 8009404:	898b      	ldrh	r3, [r1, #12]
 8009406:	05db      	lsls	r3, r3, #23
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	4616      	mov	r6, r2
 800940e:	d505      	bpl.n	800941c <__swrite+0x1e>
 8009410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009414:	2302      	movs	r3, #2
 8009416:	2200      	movs	r2, #0
 8009418:	f000 f868 	bl	80094ec <_lseek_r>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	4632      	mov	r2, r6
 800942a:	463b      	mov	r3, r7
 800942c:	4628      	mov	r0, r5
 800942e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009432:	f000 b817 	b.w	8009464 <_write_r>

08009436 <__sseek>:
 8009436:	b510      	push	{r4, lr}
 8009438:	460c      	mov	r4, r1
 800943a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943e:	f000 f855 	bl	80094ec <_lseek_r>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	bf15      	itete	ne
 8009448:	6560      	strne	r0, [r4, #84]	; 0x54
 800944a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800944e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009452:	81a3      	strheq	r3, [r4, #12]
 8009454:	bf18      	it	ne
 8009456:	81a3      	strhne	r3, [r4, #12]
 8009458:	bd10      	pop	{r4, pc}

0800945a <__sclose>:
 800945a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945e:	f000 b813 	b.w	8009488 <_close_r>
	...

08009464 <_write_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_write_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f9 f89f 	bl	80025b6 <_write>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_write_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_write_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	200003c4 	.word	0x200003c4

08009488 <_close_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d06      	ldr	r5, [pc, #24]	; (80094a4 <_close_r+0x1c>)
 800948c:	2300      	movs	r3, #0
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	602b      	str	r3, [r5, #0]
 8009494:	f7f9 f8ab 	bl	80025ee <_close>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d102      	bne.n	80094a2 <_close_r+0x1a>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	b103      	cbz	r3, 80094a2 <_close_r+0x1a>
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	200003c4 	.word	0x200003c4

080094a8 <_fstat_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d07      	ldr	r5, [pc, #28]	; (80094c8 <_fstat_r+0x20>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f7f9 f8a6 	bl	8002606 <_fstat>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d102      	bne.n	80094c4 <_fstat_r+0x1c>
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	b103      	cbz	r3, 80094c4 <_fstat_r+0x1c>
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	200003c4 	.word	0x200003c4

080094cc <_isatty_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d06      	ldr	r5, [pc, #24]	; (80094e8 <_isatty_r+0x1c>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f9 f8a5 	bl	8002626 <_isatty>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_isatty_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_isatty_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	200003c4 	.word	0x200003c4

080094ec <_lseek_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	; (800950c <_lseek_r+0x20>)
 80094f0:	4604      	mov	r4, r0
 80094f2:	4608      	mov	r0, r1
 80094f4:	4611      	mov	r1, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7f9 f89e 	bl	800263c <_lseek>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_lseek_r+0x1e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_lseek_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	200003c4 	.word	0x200003c4

08009510 <_read_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d07      	ldr	r5, [pc, #28]	; (8009530 <_read_r+0x20>)
 8009514:	4604      	mov	r4, r0
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	2200      	movs	r2, #0
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f7f9 f82c 	bl	800257c <_read>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_read_r+0x1e>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_read_r+0x1e>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	200003c4 	.word	0x200003c4

08009534 <_init>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr

08009540 <_fini>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr
