
PlutonGroundStation_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009394  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08009568  08009568  00019568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba4  08009ba4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bac  08009bac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001e8  08009d9c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08009d9c  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcc3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265e  00000000  00000000  0002fedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00032540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  000330f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027047  00000000  00000000  00033b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc94  00000000  00000000  0005abdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eafd6  00000000  00000000  0006a873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  0015589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800954c 	.word	0x0800954c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800954c 	.word	0x0800954c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <newLoRa>:
										  	|    spreading factor = 7			   |
											|           bandwidth = 125 KHz        |
											| 		  coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000eec:	b4b0      	push	{r4, r5, r7}
 8000eee:	b08f      	sub	sp, #60	; 0x3c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000ef4:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000efa:	2307      	movs	r3, #7
 8000efc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000f00:	2307      	movs	r3, #7
 8000f02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000f0c:	23ff      	movs	r3, #255	; 0xff
 8000f0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	461d      	mov	r5, r3
 8000f20:	f107 040c 	add.w	r4, r7, #12
 8000f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	373c      	adds	r7, #60	; 0x3c
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bcb0      	pop	{r4, r5, r7}
 8000f3c:	4770      	bx	lr

08000f3e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6898      	ldr	r0, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	899b      	ldrh	r3, [r3, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	f002 f865 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f001 fcee 	bl	8002938 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6898      	ldr	r0, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	899b      	ldrh	r3, [r3, #12]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	f002 f85a 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f001 fce3 	bl	8002938 <HAL_Delay>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000f84:	2101      	movs	r1, #1
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f9a3 	bl	80012d2 <LoRa_read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d107      	bne.n	8000faa <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f023 0307 	bic.w	r3, r3, #7
 8000fa0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
 8000fa8:	e03e      	b.n	8001028 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d10c      	bne.n	8000fca <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	61da      	str	r2, [r3, #28]
 8000fc8:	e02e      	b.n	8001028 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d10c      	bne.n	8000fea <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fd4:	f023 0307 	bic.w	r3, r3, #7
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	f043 0303 	orr.w	r3, r3, #3
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	61da      	str	r2, [r3, #28]
 8000fe8:	e01e      	b.n	8001028 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d10c      	bne.n	800100a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ff4:	f023 0307 	bic.w	r3, r3, #7
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	f043 0305 	orr.w	r3, r3, #5
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2205      	movs	r2, #5
 8001006:	61da      	str	r2, [r3, #28]
 8001008:	e00e      	b.n	8001028 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b06      	cmp	r3, #6
 800100e:	d10b      	bne.n	8001028 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001014:	f023 0307 	bic.w	r3, r3, #7
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f043 0306 	orr.w	r3, r3, #6
 800101e:	b25b      	sxtb	r3, r3
 8001020:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2206      	movs	r2, #6
 8001026:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	461a      	mov	r2, r3
 800102c:	2101      	movs	r1, #1
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f96c 	bl	800130c <LoRa_write>
	//HAL_Delay(10);
	delay_ms(20);
 8001034:	2014      	movs	r0, #20
 8001036:	f001 f8c7 	bl	80021c8 <delay_ms>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	f001 ffdf 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6998      	ldr	r0, [r3, #24]
 8001066:	88fa      	ldrh	r2, [r7, #6]
 8001068:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	f003 f96e 	bl	800434e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001072:	bf00      	nop
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fe19 	bl	8004cb0 <HAL_SPI_GetState>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d1f7      	bne.n	8001074 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6998      	ldr	r0, [r3, #24]
 8001088:	8b3a      	ldrh	r2, [r7, #24]
 800108a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	f003 facb 	bl	800462a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001094:	bf00      	nop
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fe08 	bl	8004cb0 <HAL_SPI_GetState>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d1f7      	bne.n	8001096 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	f001 ffb5 	bl	8003020 <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	f001 ffa1 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6998      	ldr	r0, [r3, #24]
 80010e2:	88fa      	ldrh	r2, [r7, #6]
 80010e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	f003 f930 	bl	800434e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010ee:	bf00      	nop
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fddb 	bl	8004cb0 <HAL_SPI_GetState>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d1f7      	bne.n	80010f0 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6998      	ldr	r0, [r3, #24]
 8001104:	8b3a      	ldrh	r2, [r7, #24]
 8001106:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	f003 f91f 	bl	800434e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001110:	bf00      	nop
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fdca 	bl	8004cb0 <HAL_SPI_GetState>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d1f7      	bne.n	8001112 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	f001 ff77 	bl	8003020 <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	04db      	lsls	r3, r3, #19
 8001148:	115b      	asrs	r3, r3, #5
 800114a:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	0c1b      	lsrs	r3, r3, #16
 8001150:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	461a      	mov	r2, r3
 8001156:	2106      	movs	r1, #6
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f8d7 	bl	800130c <LoRa_write>
	HAL_Delay(5);
 800115e:	2005      	movs	r0, #5
 8001160:	f001 fbea 	bl	8002938 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	461a      	mov	r2, r3
 800116e:	2107      	movs	r1, #7
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f8cb 	bl	800130c <LoRa_write>
	HAL_Delay(5);
 8001176:	2005      	movs	r0, #5
 8001178:	f001 fbde 	bl	8002938 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	461a      	mov	r2, r3
 8001184:	2108      	movs	r1, #8
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f8c0 	bl	800130c <LoRa_write>
	HAL_Delay(5);
 800118c:	2005      	movs	r0, #5
 800118e:	f001 fbd3 	bl	8002938 <HAL_Delay>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b0c      	cmp	r3, #12
 80011a8:	dd01      	ble.n	80011ae <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80011aa:	230c      	movs	r3, #12
 80011ac:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	dc01      	bgt.n	80011b8 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011b8:	211e      	movs	r1, #30
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f889 	bl	80012d2 <LoRa_read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f001 fbb7 	bl	8002938 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4413      	add	r3, r2
 80011dc:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	461a      	mov	r2, r3
 80011e2:	211e      	movs	r1, #30
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f891 	bl	800130c <LoRa_write>
	HAL_Delay(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f001 fba4 	bl	8002938 <HAL_Delay>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	461a      	mov	r2, r3
 8001208:	2109      	movs	r1, #9
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f87e 	bl	800130c <LoRa_write>
	HAL_Delay(10);
 8001210:	200a      	movs	r0, #10
 8001212:	f001 fb91 	bl	8002938 <HAL_Delay>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b2c      	cmp	r3, #44	; 0x2c
 8001234:	d801      	bhi.n	800123a <LoRa_setOCP+0x1a>
		current = 45;
 8001236:	232d      	movs	r3, #45	; 0x2d
 8001238:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2bf0      	cmp	r3, #240	; 0xf0
 800123e:	d901      	bls.n	8001244 <LoRa_setOCP+0x24>
		current = 240;
 8001240:	23f0      	movs	r3, #240	; 0xf0
 8001242:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	2b78      	cmp	r3, #120	; 0x78
 8001248:	d809      	bhi.n	800125e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	3b2d      	subs	r3, #45	; 0x2d
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <LoRa_setOCP+0x78>)
 8001250:	fb82 1203 	smull	r1, r2, r2, r3
 8001254:	1052      	asrs	r2, r2, #1
 8001256:	17db      	asrs	r3, r3, #31
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e00b      	b.n	8001276 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	2bf0      	cmp	r3, #240	; 0xf0
 8001262:	d808      	bhi.n	8001276 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	331e      	adds	r3, #30
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoRa_setOCP+0x78>)
 800126a:	fb82 1203 	smull	r1, r2, r2, r3
 800126e:	1092      	asrs	r2, r2, #2
 8001270:	17db      	asrs	r3, r3, #31
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3320      	adds	r3, #32
 800127a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	461a      	mov	r2, r3
 8001280:	210b      	movs	r1, #11
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f842 	bl	800130c <LoRa_write>
	HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f001 fb55 	bl	8002938 <HAL_Delay>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	66666667 	.word	0x66666667

0800129c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012a4:	211e      	movs	r1, #30
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f813 	bl	80012d2 <LoRa_read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f043 0307 	orr.w	r3, r3, #7
 80012b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	461a      	mov	r2, r3
 80012bc:	211e      	movs	r1, #30
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f824 	bl	800130c <LoRa_write>
	HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f001 fb37 	bl	8002938 <HAL_Delay>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af02      	add	r7, sp, #8
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	f107 010e 	add.w	r1, r7, #14
 80012f0:	2201      	movs	r2, #1
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fea3 	bl	8001042 <LoRa_readReg>
	//HAL_Delay(5);
	delay_ms(10);
 80012fc:	200a      	movs	r0, #10
 80012fe:	f000 ff63 	bl	80021c8 <delay_ms>
	return read_data;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
 8001318:	4613      	mov	r3, r2
 800131a:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001322:	b2db      	uxtb	r3, r3
 8001324:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800132a:	f107 030f 	add.w	r3, r7, #15
 800132e:	f107 010e 	add.w	r1, r7, #14
 8001332:	2201      	movs	r2, #1
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fec0 	bl	80010be <LoRa_writeReg>
	//HAL_Delay(5);
	delay_ms(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f000 ff42 	bl	80021c8 <delay_ms>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	461a      	mov	r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	72fb      	strb	r3, [r7, #11]
 800135c:	4613      	mov	r3, r2
 800135e:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001366:	b2db      	uxtb	r3, r3
 8001368:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	889b      	ldrh	r3, [r3, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	f001 fe53 	bl	8003020 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6998      	ldr	r0, [r3, #24]
 800137e:	f107 0117 	add.w	r1, r7, #23
 8001382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001386:	2201      	movs	r2, #1
 8001388:	f002 ffe1 	bl	800434e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800138c:	bf00      	nop
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fc8c 	bl	8004cb0 <HAL_SPI_GetState>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d1f7      	bne.n	800138e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6998      	ldr	r0, [r3, #24]
 80013a2:	7abb      	ldrb	r3, [r7, #10]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f002 ffcf 	bl	800434e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80013b0:	bf00      	nop
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fc7a 	bl	8004cb0 <HAL_SPI_GetState>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d1f7      	bne.n	80013b2 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	delay_ms(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f000 ff00 	bl	80021c8 <delay_ms>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	889b      	ldrh	r3, [r3, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f001 fe24 	bl	8003020 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	4611      	mov	r1, r2
 8001402:	461a      	mov	r2, r3
 8001404:	460b      	mov	r3, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;
	int mode = _LoRa->current_mode;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001412:	2101      	movs	r1, #1
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff fdb0 	bl	8000f7a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800141a:	210e      	movs	r1, #14
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff ff58 	bl	80012d2 <LoRa_read>
 8001422:	4603      	mov	r3, r0
 8001424:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001426:	7cfb      	ldrb	r3, [r7, #19]
 8001428:	461a      	mov	r2, r3
 800142a:	210d      	movs	r1, #13
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff6d 	bl	800130c <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	461a      	mov	r2, r3
 8001436:	2122      	movs	r1, #34	; 0x22
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7ff ff67 	bl	800130c <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	2100      	movs	r1, #0
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff ff81 	bl	800134c <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800144a:	2103      	movs	r1, #3
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff fd94 	bl	8000f7a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001452:	2112      	movs	r1, #18
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff ff3c 	bl	80012d2 <LoRa_read>
 800145a:	4603      	mov	r3, r0
 800145c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00a      	beq.n	800147e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	2112      	movs	r1, #18
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff ff4d 	bl	800130c <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001472:	6979      	ldr	r1, [r7, #20]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fd80 	bl	8000f7a <LoRa_gotoMode>
			return 1;
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	3b01      	subs	r3, #1
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff fd74 	bl	8000f7a <LoRa_gotoMode>
				return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	e003      	b.n	800149e <LoRa_transmit+0xa8>
			}
		}
		delay_ms(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f000 fe96 	bl	80021c8 <delay_ms>
	while(1){
 800149c:	e7d9      	b.n	8001452 <LoRa_transmit+0x5c>
	}
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014ae:	2105      	movs	r1, #5
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fd62 	bl	8000f7a <LoRa_gotoMode>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80014be:	b590      	push	{r4, r7, lr}
 80014c0:	b089      	sub	sp, #36	; 0x24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	e007      	b.n	80014e6 <LoRa_receive+0x28>
		data[i]=0;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	3301      	adds	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbf3      	blt.n	80014d6 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014ee:	2101      	movs	r1, #1
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fd42 	bl	8000f7a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80014f6:	2112      	movs	r1, #18
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff feea 	bl	80012d2 <LoRa_read>
 80014fe:	4603      	mov	r3, r0
 8001500:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001502:	7cfb      	ldrb	r3, [r7, #19]
 8001504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02f      	beq.n	800156c <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	2112      	movs	r1, #18
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fefb 	bl	800130c <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001516:	2113      	movs	r1, #19
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff feda 	bl	80012d2 <LoRa_read>
 800151e:	4603      	mov	r3, r0
 8001520:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001522:	2110      	movs	r1, #16
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f7ff fed4 	bl	80012d2 <LoRa_read>
 800152a:	4603      	mov	r3, r0
 800152c:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	461a      	mov	r2, r3
 8001532:	210d      	movs	r1, #13
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff fee9 	bl	800130c <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800153a:	7cba      	ldrb	r2, [r7, #18]
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4293      	cmp	r3, r2
 8001540:	bf28      	it	cs
 8001542:	4613      	movcs	r3, r2
 8001544:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e00b      	b.n	8001564 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	18d4      	adds	r4, r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff febc 	bl	80012d2 <LoRa_read>
 800155a:	4603      	mov	r3, r0
 800155c:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbef      	blt.n	800154c <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800156c:	2105      	movs	r1, #5
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fd03 	bl	8000f7a <LoRa_gotoMode>
	return min;
 8001574:	7ffb      	ldrb	r3, [r7, #31]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}

0800157e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff2a 	bl	80013e0 <LoRa_isvalid>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8093 	beq.w	80016ba <LoRa_init+0x13c>
		// goto sleep mode:
		LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001594:	2100      	movs	r1, #0
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fcef 	bl	8000f7a <LoRa_gotoMode>
		HAL_Delay(10);
 800159c:	200a      	movs	r0, #10
 800159e:	f001 f9cb 	bl	8002938 <HAL_Delay>

		// turn on LoRa mode:
		read = LoRa_read(_LoRa, RegOpMode);
 80015a2:	2101      	movs	r1, #1
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fe94 	bl	80012d2 <LoRa_read>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(10);
 80015ae:	200a      	movs	r0, #10
 80015b0:	f001 f9c2 	bl	8002938 <HAL_Delay>
		data = read | 0x80;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ba:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegOpMode, data);
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	461a      	mov	r2, r3
 80015c0:	2101      	movs	r1, #1
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fea2 	bl	800130c <LoRa_write>
		HAL_Delay(100);
 80015c8:	2064      	movs	r0, #100	; 0x64
 80015ca:	f001 f9b5 	bl	8002938 <HAL_Delay>

		// set frequency:
		LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fdb0 	bl	800113a <LoRa_setFrequency>

		// set output power gain:
		LoRa_setPower(_LoRa, _LoRa->power);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe08 	bl	80011f8 <LoRa_setPower>

		// set over current protection:
		LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe15 	bl	8001220 <LoRa_setOCP>

		// set LNA gain:
		LoRa_write(_LoRa, RegLna, 0x23);
 80015f6:	2223      	movs	r2, #35	; 0x23
 80015f8:	210c      	movs	r1, #12
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fe86 	bl	800130c <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
		LoRa_setTOMsb_setCRCon(_LoRa);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fe4b 	bl	800129c <LoRa_setTOMsb_setCRCon>
		LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fdc3 	bl	800119a <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
		LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001614:	22ff      	movs	r2, #255	; 0xff
 8001616:	211f      	movs	r1, #31
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe77 	bl	800130c <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
		// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
		//       bits represent --> |   bandwidth   |     CR    |I/E|
		data = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	73bb      	strb	r3, [r7, #14]
		data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	b2da      	uxtb	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig1, data);
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	461a      	mov	r2, r3
 800163e:	211d      	movs	r1, #29
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fe63 	bl	800130c <LoRa_write>

		// set preamble:
		LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	2120      	movs	r1, #32
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fe59 	bl	800130c <LoRa_write>
		LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	2121      	movs	r1, #33	; 0x21
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fe51 	bl	800130c <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
		read = LoRa_read(_LoRa, RegDioMapping1);
 800166a:	2140      	movs	r1, #64	; 0x40
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe30 	bl	80012d2 <LoRa_read>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
		data = read | 0x3F;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800167c:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegDioMapping1, data);
 800167e:	7bbb      	ldrb	r3, [r7, #14]
 8001680:	461a      	mov	r2, r3
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fe41 	bl	800130c <LoRa_write>

		// goto standby mode:
		LoRa_gotoMode(_LoRa, STNBY_MODE);
 800168a:	2101      	movs	r1, #1
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fc74 	bl	8000f7a <LoRa_gotoMode>
		_LoRa->current_mode = STNBY_MODE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	61da      	str	r2, [r3, #28]
		HAL_Delay(10);
 8001698:	200a      	movs	r0, #10
 800169a:	f001 f94d 	bl	8002938 <HAL_Delay>

		read = LoRa_read(_LoRa, RegVersion);
 800169e:	2142      	movs	r1, #66	; 0x42
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe16 	bl	80012d2 <LoRa_read>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
		if(read == 0x12)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b12      	cmp	r3, #18
 80016ae:	d101      	bne.n	80016b4 <LoRa_init+0x136>
			return LORA_OK;
 80016b0:	23c8      	movs	r3, #200	; 0xc8
 80016b2:	e004      	b.n	80016be <LoRa_init+0x140>
		else
			return LORA_NOT_FOUND;
 80016b4:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80016b8:	e001      	b.n	80016be <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80016ba:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <onInterrupt>:
 *
 * @param   None
 *
 * @return  None
 */
void onInterrupt(){
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

	if (!interruptEnabled) {
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <onInterrupt+0x24>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f083 0301 	eor.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <onInterrupt+0x1a>
		return;
	}
	transmissionReceived = 1;
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <onInterrupt+0x28>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e000      	b.n	80016e4 <onInterrupt+0x1c>
		return;
 80016e2:	bf00      	nop
}
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	2000000b 	.word	0x2000000b
 80016f0:	200002b2 	.word	0x200002b2

080016f4 <sendFrame_Default>:
 * @param   functionId  The function ID to be included in the LoRa frame.
 *
 * @return  None
 */

void sendFrame_Default(uint8_t functionId){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	// build frame
	uint8_t len = PCP_Get_Frame_Length_Default(callsign);
 80016fe:	4817      	ldr	r0, [pc, #92]	; (800175c <sendFrame_Default+0x68>)
 8001700:	f000 fbb3 	bl	8001e6a <PCP_Get_Frame_Length_Default>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	uint8_t* frame = (uint8_t*)malloc(len * sizeof(uint8_t));
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4618      	mov	r0, r3
 800170c:	f004 ffe8 	bl	80066e0 <malloc>
 8001710:	4603      	mov	r3, r0
 8001712:	60bb      	str	r3, [r7, #8]
	PCP_Encode_Default(frame, callsign, functionId);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	461a      	mov	r2, r3
 8001718:	4910      	ldr	r1, [pc, #64]	; (800175c <sendFrame_Default+0x68>)
 800171a:	68b8      	ldr	r0, [r7, #8]
 800171c:	f000 fcb1 	bl	8002082 <PCP_Encode_Default>
	// send data and check transmission success
	if (LoRa_transmit(&myLoRa, frame, len, 100) == 1) {
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	2364      	movs	r3, #100	; 0x64
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <sendFrame_Default+0x6c>)
 8001728:	f7ff fe65 	bl	80013f6 <LoRa_transmit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d106      	bne.n	8001740 <sendFrame_Default+0x4c>
		HAL_UART_Transmit(&huart5, (uint8_t*)"sent successfully!\r\n", strlen("sent successfully!\r\n"), 100);
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	2214      	movs	r2, #20
 8001736:	490b      	ldr	r1, [pc, #44]	; (8001764 <sendFrame_Default+0x70>)
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <sendFrame_Default+0x74>)
 800173a:	f003 fd19 	bl	8005170 <HAL_UART_Transmit>
 800173e:	e005      	b.n	800174c <sendFrame_Default+0x58>
	} else {
		HAL_UART_Transmit(&huart5, (uint8_t*)"failed\r\n", strlen("failed\r\n"), 100);
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	2208      	movs	r2, #8
 8001744:	4909      	ldr	r1, [pc, #36]	; (800176c <sendFrame_Default+0x78>)
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <sendFrame_Default+0x74>)
 8001748:	f003 fd12 	bl	8005170 <HAL_UART_Transmit>
	}
	free(frame);
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f004 ffcf 	bl	80066f0 <free>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000000 	.word	0x20000000
 8001760:	20000204 	.word	0x20000204
 8001764:	08009568 	.word	0x08009568
 8001768:	2000031c 	.word	0x2000031c
 800176c:	08009580 	.word	0x08009580

08001770 <printControls>:
 *
 * @param   None
 *
 * @return  None
 */
void printControls(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5, (uint8_t*)"------------- Controls -------------\r\n", strlen("------------- Controls -------------\r\n"), 100);
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	2226      	movs	r2, #38	; 0x26
 8001778:	490b      	ldr	r1, [pc, #44]	; (80017a8 <printControls+0x38>)
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <printControls+0x3c>)
 800177c:	f003 fcf8 	bl	8005170 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"p - send ping frame\r\n", strlen("p - send ping frame\r\n"), 100);
 8001780:	2364      	movs	r3, #100	; 0x64
 8001782:	2215      	movs	r2, #21
 8001784:	490a      	ldr	r1, [pc, #40]	; (80017b0 <printControls+0x40>)
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <printControls+0x3c>)
 8001788:	f003 fcf2 	bl	8005170 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"l - request last packet info\r\n", strlen("l - request last packet info\r\n"), 100);
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	221e      	movs	r2, #30
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <printControls+0x44>)
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <printControls+0x3c>)
 8001794:	f003 fcec 	bl	8005170 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"------------------------------------\r\n", strlen("------------------------------------\r\n"), 100);
 8001798:	2364      	movs	r3, #100	; 0x64
 800179a:	2226      	movs	r2, #38	; 0x26
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <printControls+0x48>)
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <printControls+0x3c>)
 80017a0:	f003 fce6 	bl	8005170 <HAL_UART_Transmit>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0800958c 	.word	0x0800958c
 80017ac:	2000031c 	.word	0x2000031c
 80017b0:	080095b4 	.word	0x080095b4
 80017b4:	080095cc 	.word	0x080095cc
 80017b8:	080095ec 	.word	0x080095ec

080017bc <decode>:
 * @param   respFrame   A pointer to the received LoRa frame.
 * @param   respLen     The length of the received LoRa frame.
 *
 * @return  None
 */
void decode(uint8_t* respFrame, uint8_t respLen) {
 80017bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017c0:	b095      	sub	sp, #84	; 0x54
 80017c2:	af02      	add	r7, sp, #8
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
	// print raw data
	HAL_UART_Transmit(&huart5, (uint8_t*)"Received ", strlen("Received "), 100);
 80017ca:	2364      	movs	r3, #100	; 0x64
 80017cc:	2209      	movs	r2, #9
 80017ce:	494c      	ldr	r1, [pc, #304]	; (8001900 <decode+0x144>)
 80017d0:	484c      	ldr	r0, [pc, #304]	; (8001904 <decode+0x148>)
 80017d2:	f003 fccd 	bl	8005170 <HAL_UART_Transmit>
	char respLenStr[4];
	sprintf(respLenStr, "%d", respLen);
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	494a      	ldr	r1, [pc, #296]	; (8001908 <decode+0x14c>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fd42 	bl	8007268 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*)respLenStr, strlen(respLenStr), 100);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fd11 	bl	8000210 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	4842      	ldr	r0, [pc, #264]	; (8001904 <decode+0x148>)
 80017fa:	f003 fcb9 	bl	8005170 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)" bytes:\r\n", strlen(" bytes:\r\n"), 100);
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	2209      	movs	r2, #9
 8001802:	4942      	ldr	r1, [pc, #264]	; (800190c <decode+0x150>)
 8001804:	483f      	ldr	r0, [pc, #252]	; (8001904 <decode+0x148>)
 8001806:	f003 fcb3 	bl	8005170 <HAL_UART_Transmit>

	// get function ID
	uint8_t functionId = PCP_Get_FunctionID(callsign, respFrame, respLen);
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	461a      	mov	r2, r3
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	483f      	ldr	r0, [pc, #252]	; (8001910 <decode+0x154>)
 8001812:	f000 fb7f 	bl	8001f14 <PCP_Get_FunctionID>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


	// check optional data
	uint8_t* respOptData = NULL;
 800181c:	2300      	movs	r3, #0
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t respOptDataLen = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	// public frame
	respOptDataLen = PCP_Get_OptData_Length(callsign, respFrame, respLen);
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	461a      	mov	r2, r3
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4838      	ldr	r0, [pc, #224]	; (8001910 <decode+0x154>)
 800182e:	f000 fb29 	bl	8001e84 <PCP_Get_OptData_Length>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit(&huart5, (uint8_t*)"Optional data (", strlen("Optional data ("), 100);
 8001838:	2364      	movs	r3, #100	; 0x64
 800183a:	220f      	movs	r2, #15
 800183c:	4935      	ldr	r1, [pc, #212]	; (8001914 <decode+0x158>)
 800183e:	4831      	ldr	r0, [pc, #196]	; (8001904 <decode+0x148>)
 8001840:	f003 fc96 	bl	8005170 <HAL_UART_Transmit>
	char respOptDataLenStr[4];
	sprintf(respOptDataLenStr, "%d", respOptDataLen);
 8001844:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	492e      	ldr	r1, [pc, #184]	; (8001908 <decode+0x14c>)
 800184e:	4618      	mov	r0, r3
 8001850:	f005 fd0a 	bl	8007268 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*)respOptDataLenStr, strlen(respOptDataLenStr), 100);
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fcd9 	bl	8000210 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	f107 0120 	add.w	r1, r7, #32
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	4826      	ldr	r0, [pc, #152]	; (8001904 <decode+0x148>)
 800186a:	f003 fc81 	bl	8005170 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)" bytes):\r\n", strlen(" bytes):\r\n"), 100);
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	220a      	movs	r2, #10
 8001872:	4929      	ldr	r1, [pc, #164]	; (8001918 <decode+0x15c>)
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <decode+0x148>)
 8001876:	f003 fc7b 	bl	8005170 <HAL_UART_Transmit>

	if (respOptDataLen > 0) {
 800187a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800187e:	2b00      	cmp	r3, #0
 8001880:	d030      	beq.n	80018e4 <decode+0x128>
 8001882:	466b      	mov	r3, sp
 8001884:	461e      	mov	r6, r3
		// read optional data
		uint8_t respOptData[respOptDataLen];
 8001886:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800188a:	460b      	mov	r3, r1
 800188c:	3b01      	subs	r3, #1
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001890:	b2cb      	uxtb	r3, r1
 8001892:	2200      	movs	r2, #0
 8001894:	4698      	mov	r8, r3
 8001896:	4691      	mov	r9, r2
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ac:	b2cb      	uxtb	r3, r1
 80018ae:	2200      	movs	r2, #0
 80018b0:	461c      	mov	r4, r3
 80018b2:	4615      	mov	r5, r2
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	00eb      	lsls	r3, r5, #3
 80018be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c2:	00e2      	lsls	r2, r4, #3
 80018c4:	460b      	mov	r3, r1
 80018c6:	3307      	adds	r3, #7
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	ebad 0d03 	sub.w	sp, sp, r3
 80018d0:	ab02      	add	r3, sp, #8
 80018d2:	3300      	adds	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
		// public frame
		PCP_Get_OptData(callsign, respFrame, respLen, respOptData);
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <decode+0x154>)
 80018de:	f000 fb43 	bl	8001f68 <PCP_Get_OptData>
 80018e2:	46b5      	mov	sp, r6
	}

	// process received frame
	switch (functionId) {
 80018e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d002      	beq.n	80018f2 <decode+0x136>
 80018ec:	2b24      	cmp	r3, #36	; 0x24
 80018ee:	d017      	beq.n	8001920 <decode+0x164>
 80018f0:	e11b      	b.n	8001b2a <decode+0x36e>
	case RESP_PONG:
		HAL_UART_Transmit(&huart5, (uint8_t*)"Pong!\r\n", strlen("Pong!\r\n"), 100);
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	2207      	movs	r2, #7
 80018f6:	4909      	ldr	r1, [pc, #36]	; (800191c <decode+0x160>)
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <decode+0x148>)
 80018fa:	f003 fc39 	bl	8005170 <HAL_UART_Transmit>
		break;
 80018fe:	e11b      	b.n	8001b38 <decode+0x37c>
 8001900:	08009614 	.word	0x08009614
 8001904:	2000031c 	.word	0x2000031c
 8001908:	08009620 	.word	0x08009620
 800190c:	08009624 	.word	0x08009624
 8001910:	20000000 	.word	0x20000000
 8001914:	08009630 	.word	0x08009630
 8001918:	08009640 	.word	0x08009640
 800191c:	0800964c 	.word	0x0800964c

	case RESP_PACKET_INFO: {
		HAL_UART_Transmit(&huart5, (uint8_t*)"Packet info:\r\n", strlen("Packet info:\r\n"), 100);
 8001920:	2364      	movs	r3, #100	; 0x64
 8001922:	220e      	movs	r2, #14
 8001924:	498a      	ldr	r1, [pc, #552]	; (8001b50 <decode+0x394>)
 8001926:	488b      	ldr	r0, [pc, #556]	; (8001b54 <decode+0x398>)
 8001928:	f003 fc22 	bl	8005170 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"SNR = ", strlen("SNR = "), 100);
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	2206      	movs	r2, #6
 8001930:	4989      	ldr	r1, [pc, #548]	; (8001b58 <decode+0x39c>)
 8001932:	4888      	ldr	r0, [pc, #544]	; (8001b54 <decode+0x398>)
 8001934:	f003 fc1c 	bl	8005170 <HAL_UART_Transmit>
		char respOptDataStr[10];
		double calculatedValue = respOptData[0] / 4.0;
 8001938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe11 	bl	8000564 <__aeabi_i2d>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b85      	ldr	r3, [pc, #532]	; (8001b5c <decode+0x3a0>)
 8001948:	f7fe ffa0 	bl	800088c <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		snprintf(respOptDataStr, sizeof(respOptDataStr), "%.2f", calculatedValue);
 8001954:	f107 0014 	add.w	r0, r7, #20
 8001958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800195c:	e9cd 2300 	strd	r2, r3, [sp]
 8001960:	4a7f      	ldr	r2, [pc, #508]	; (8001b60 <decode+0x3a4>)
 8001962:	210a      	movs	r1, #10
 8001964:	f005 fc4c 	bl	8007200 <sniprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)respOptDataStr, strlen(respOptDataStr), 100);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fc4f 	bl	8000210 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	f107 0114 	add.w	r1, r7, #20
 800197a:	2364      	movs	r3, #100	; 0x64
 800197c:	4875      	ldr	r0, [pc, #468]	; (8001b54 <decode+0x398>)
 800197e:	f003 fbf7 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)" dB\r\n", strlen(" dB\r\n"), 100);
 8001982:	2364      	movs	r3, #100	; 0x64
 8001984:	2205      	movs	r2, #5
 8001986:	4977      	ldr	r1, [pc, #476]	; (8001b64 <decode+0x3a8>)
 8001988:	4872      	ldr	r0, [pc, #456]	; (8001b54 <decode+0x398>)
 800198a:	f003 fbf1 	bl	8005170 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"RSSI = ", strlen("RSSI = "), 100);
 800198e:	2364      	movs	r3, #100	; 0x64
 8001990:	2207      	movs	r2, #7
 8001992:	4975      	ldr	r1, [pc, #468]	; (8001b68 <decode+0x3ac>)
 8001994:	486f      	ldr	r0, [pc, #444]	; (8001b54 <decode+0x398>)
 8001996:	f003 fbeb 	bl	8005170 <HAL_UART_Transmit>
		calculatedValue = respOptData[1]/ -2.0;
 800199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199c:	3301      	adds	r3, #1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fddf 	bl	8000564 <__aeabi_i2d>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019ae:	f7fe ff6d 	bl	800088c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		snprintf(respOptDataStr, sizeof(respOptDataStr), "%.2f", calculatedValue);
 80019ba:	f107 0014 	add.w	r0, r7, #20
 80019be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019c2:	e9cd 2300 	strd	r2, r3, [sp]
 80019c6:	4a66      	ldr	r2, [pc, #408]	; (8001b60 <decode+0x3a4>)
 80019c8:	210a      	movs	r1, #10
 80019ca:	f005 fc19 	bl	8007200 <sniprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)respOptDataStr, strlen(respOptDataStr), 100);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fc1c 	bl	8000210 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f107 0114 	add.w	r1, r7, #20
 80019e0:	2364      	movs	r3, #100	; 0x64
 80019e2:	485c      	ldr	r0, [pc, #368]	; (8001b54 <decode+0x398>)
 80019e4:	f003 fbc4 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)" dBm\r\n", strlen(" dBm\r\n"), 100);
 80019e8:	2364      	movs	r3, #100	; 0x64
 80019ea:	2206      	movs	r2, #6
 80019ec:	495f      	ldr	r1, [pc, #380]	; (8001b6c <decode+0x3b0>)
 80019ee:	4859      	ldr	r0, [pc, #356]	; (8001b54 <decode+0x398>)
 80019f0:	f003 fbbe 	bl	8005170 <HAL_UART_Transmit>

		uint16_t counter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	827b      	strh	r3, [r7, #18]
		HAL_UART_Transmit(&huart5, (uint8_t*)"valid LoRa frames = ", strlen("valid LoRa frames = "), 100);
 80019f8:	2364      	movs	r3, #100	; 0x64
 80019fa:	2214      	movs	r2, #20
 80019fc:	495c      	ldr	r1, [pc, #368]	; (8001b70 <decode+0x3b4>)
 80019fe:	4855      	ldr	r0, [pc, #340]	; (8001b54 <decode+0x398>)
 8001a00:	f003 fbb6 	bl	8005170 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 2, sizeof(uint16_t));
 8001a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a06:	3302      	adds	r3, #2
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	827b      	strh	r3, [r7, #18]
		char counterStr[10];
		sprintf(counterStr, "%d", counter);
 8001a0e:	8a7b      	ldrh	r3, [r7, #18]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4957      	ldr	r1, [pc, #348]	; (8001b74 <decode+0x3b8>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f005 fc25 	bl	8007268 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fbf4 	bl	8000210 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f107 0108 	add.w	r1, r7, #8
 8001a30:	2364      	movs	r3, #100	; 0x64
 8001a32:	4848      	ldr	r0, [pc, #288]	; (8001b54 <decode+0x398>)
 8001a34:	f003 fb9c 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001a38:	2364      	movs	r3, #100	; 0x64
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	494e      	ldr	r1, [pc, #312]	; (8001b78 <decode+0x3bc>)
 8001a3e:	4845      	ldr	r0, [pc, #276]	; (8001b54 <decode+0x398>)
 8001a40:	f003 fb96 	bl	8005170 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"invalid LoRa frames = ", strlen("invalid LoRa frames = "), 100);
 8001a44:	2364      	movs	r3, #100	; 0x64
 8001a46:	2216      	movs	r2, #22
 8001a48:	494c      	ldr	r1, [pc, #304]	; (8001b7c <decode+0x3c0>)
 8001a4a:	4842      	ldr	r0, [pc, #264]	; (8001b54 <decode+0x398>)
 8001a4c:	f003 fb90 	bl	8005170 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 4, sizeof(uint16_t));
 8001a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a52:	3304      	adds	r3, #4
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	827b      	strh	r3, [r7, #18]
		sprintf(counterStr, "%d", counter);
 8001a5a:	8a7b      	ldrh	r3, [r7, #18]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4944      	ldr	r1, [pc, #272]	; (8001b74 <decode+0x3b8>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fbff 	bl	8007268 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbce 	bl	8000210 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f107 0108 	add.w	r1, r7, #8
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	4835      	ldr	r0, [pc, #212]	; (8001b54 <decode+0x398>)
 8001a80:	f003 fb76 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001a84:	2364      	movs	r3, #100	; 0x64
 8001a86:	2202      	movs	r2, #2
 8001a88:	493b      	ldr	r1, [pc, #236]	; (8001b78 <decode+0x3bc>)
 8001a8a:	4832      	ldr	r0, [pc, #200]	; (8001b54 <decode+0x398>)
 8001a8c:	f003 fb70 	bl	8005170 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"valid FSK frames = ", strlen("valid FSK frames = "), 100);
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	2213      	movs	r2, #19
 8001a94:	493a      	ldr	r1, [pc, #232]	; (8001b80 <decode+0x3c4>)
 8001a96:	482f      	ldr	r0, [pc, #188]	; (8001b54 <decode+0x398>)
 8001a98:	f003 fb6a 	bl	8005170 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 6, sizeof(uint16_t));
 8001a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	827b      	strh	r3, [r7, #18]
		sprintf(counterStr, "%d", counter);
 8001aa6:	8a7b      	ldrh	r3, [r7, #18]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4931      	ldr	r1, [pc, #196]	; (8001b74 <decode+0x3b8>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 fbd9 	bl	8007268 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fba8 	bl	8000210 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	4822      	ldr	r0, [pc, #136]	; (8001b54 <decode+0x398>)
 8001acc:	f003 fb50 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4928      	ldr	r1, [pc, #160]	; (8001b78 <decode+0x3bc>)
 8001ad6:	481f      	ldr	r0, [pc, #124]	; (8001b54 <decode+0x398>)
 8001ad8:	f003 fb4a 	bl	8005170 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t*)"invalid FSK frames = ", strlen("invalid FSK frames = "), 100);
 8001adc:	2364      	movs	r3, #100	; 0x64
 8001ade:	2215      	movs	r2, #21
 8001ae0:	4928      	ldr	r1, [pc, #160]	; (8001b84 <decode+0x3c8>)
 8001ae2:	481c      	ldr	r0, [pc, #112]	; (8001b54 <decode+0x398>)
 8001ae4:	f003 fb44 	bl	8005170 <HAL_UART_Transmit>
		memcpy(&counter, respOptData + 8, sizeof(uint16_t));
 8001ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aea:	3308      	adds	r3, #8
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	827b      	strh	r3, [r7, #18]
		sprintf(counterStr, "%d", counter);
 8001af2:	8a7b      	ldrh	r3, [r7, #18]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	491e      	ldr	r1, [pc, #120]	; (8001b74 <decode+0x3b8>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 fbb3 	bl	8007268 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*)counterStr, strlen(counterStr), 100);
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fb82 	bl	8000210 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f107 0108 	add.w	r1, r7, #8
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	480f      	ldr	r0, [pc, #60]	; (8001b54 <decode+0x398>)
 8001b18:	f003 fb2a 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001b1c:	2364      	movs	r3, #100	; 0x64
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4915      	ldr	r1, [pc, #84]	; (8001b78 <decode+0x3bc>)
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <decode+0x398>)
 8001b24:	f003 fb24 	bl	8005170 <HAL_UART_Transmit>
	} break;
 8001b28:	e006      	b.n	8001b38 <decode+0x37c>

	default:
		HAL_UART_Transmit(&huart5, (uint8_t*)"Unknown function ID!\r\n", strlen("Unknown function ID!\r\n"), 100);
 8001b2a:	2364      	movs	r3, #100	; 0x64
 8001b2c:	2216      	movs	r2, #22
 8001b2e:	4916      	ldr	r1, [pc, #88]	; (8001b88 <decode+0x3cc>)
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <decode+0x398>)
 8001b32:	f003 fb1d 	bl	8005170 <HAL_UART_Transmit>
		break;
 8001b36:	bf00      	nop
	}

	if (respOptDataLen > 0) {
 8001b38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <decode+0x38a>
		free(respOptData);
 8001b40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b42:	f004 fdd5 	bl	80066f0 <free>
	}
}
 8001b46:	bf00      	nop
 8001b48:	374c      	adds	r7, #76	; 0x4c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b50:	08009654 	.word	0x08009654
 8001b54:	2000031c 	.word	0x2000031c
 8001b58:	08009664 	.word	0x08009664
 8001b5c:	40100000 	.word	0x40100000
 8001b60:	0800966c 	.word	0x0800966c
 8001b64:	08009674 	.word	0x08009674
 8001b68:	0800967c 	.word	0x0800967c
 8001b6c:	08009684 	.word	0x08009684
 8001b70:	0800968c 	.word	0x0800968c
 8001b74:	08009620 	.word	0x08009620
 8001b78:	080096a4 	.word	0x080096a4
 8001b7c:	080096a8 	.word	0x080096a8
 8001b80:	080096c0 	.word	0x080096c0
 8001b84:	080096d4 	.word	0x080096d4
 8001b88:	080096ec 	.word	0x080096ec

08001b8c <sendPing>:
 *
 * @param   None
 *
 * @return  None
 */
void sendPing() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5, (uint8_t*)"Sending ping frame ... ", strlen("Sending ping frame ... "), 100);
 8001b90:	2364      	movs	r3, #100	; 0x64
 8001b92:	2217      	movs	r2, #23
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <sendPing+0x1c>)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <sendPing+0x20>)
 8001b98:	f003 faea 	bl	8005170 <HAL_UART_Transmit>

	// send the frame
	sendFrame_Default(CMD_PING);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fda9 	bl	80016f4 <sendFrame_Default>

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08009704 	.word	0x08009704
 8001bac:	2000031c 	.word	0x2000031c

08001bb0 <requestPacketInfo>:
 *
 * @param   None
 *
 * @return  None
 */
void requestPacketInfo() {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5, (uint8_t*)"Requesting last packet info ... ", strlen("Requesting last packet info ... "), 100);
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	4904      	ldr	r1, [pc, #16]	; (8001bcc <requestPacketInfo+0x1c>)
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <requestPacketInfo+0x20>)
 8001bbc:	f003 fad8 	bl	8005170 <HAL_UART_Transmit>

	// send the frame
	sendFrame_Default(CMD_GET_PACKET_INFO);
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f7ff fd97 	bl	80016f4 <sendFrame_Default>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800971c 	.word	0x0800971c
 8001bd0:	2000031c 	.word	0x2000031c

08001bd4 <setLoRa>:
 *
 * @return  An int16_t status code indicating the initialization status of the LoRa module:
 *          - LORA_OK: Initialization successful.
 *          - LORA_ERROR: Failed to initialize the LoRa module.
 */
uint8_t setLoRa(){
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8001bda:	4c26      	ldr	r4, [pc, #152]	; (8001c74 <setLoRa+0xa0>)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f984 	bl	8000eec <newLoRa>
 8001be4:	4625      	mov	r5, r4
 8001be6:	463c      	mov	r4, r7
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bf4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port         = NSS_GPIO_Port;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <setLoRa+0xa0>)
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <setLoRa+0xa4>)
 8001bfc:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = NSS_Pin;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <setLoRa+0xa0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = RST_GPIO_Port;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <setLoRa+0xa0>)
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <setLoRa+0xa4>)
 8001c08:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = RST_Pin;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <setLoRa+0xa0>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <setLoRa+0xa0>)
 8001c12:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <setLoRa+0xa4>)
 8001c14:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = DIO0_Pin;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <setLoRa+0xa0>)
 8001c18:	2204      	movs	r2, #4
 8001c1a:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <setLoRa+0xa0>)
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <setLoRa+0xa8>)
 8001c20:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = LORA_FREQUENCY;             	// default = 433 MHz
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <setLoRa+0xa0>)
 8001c24:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001c28:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SPREADING_FACTOR;            	// default = SF_7
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <setLoRa+0xa0>)
 8001c2c:	2209      	movs	r2, #9
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth             = BANDWIDTH;       	// default = BW_125KHz
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <setLoRa+0xa0>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate               = CODING_RATE;          	// default = CR_4_5
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <setLoRa+0xa0>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power                 = OUTPUT_POWER;      	// default = 20db
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <setLoRa+0xa0>)
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = CURRENT_LIMIT;             	// default = 100 mA
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <setLoRa+0xa0>)
 8001c4c:	2282      	movs	r2, #130	; 0x82
 8001c4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble              = LORA_PREAMBLE_LEN;              	// default = 8;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <setLoRa+0xa0>)
 8001c54:	2208      	movs	r2, #8
 8001c56:	851a      	strh	r2, [r3, #40]	; 0x28

	// set up radio module
	LoRa_reset(&myLoRa);
 8001c58:	4806      	ldr	r0, [pc, #24]	; (8001c74 <setLoRa+0xa0>)
 8001c5a:	f7ff f970 	bl	8000f3e <LoRa_reset>
	int16_t LoRa_stat = LoRa_init(&myLoRa);
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <setLoRa+0xa0>)
 8001c60:	f7ff fc8d 	bl	800157e <LoRa_init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	86fb      	strh	r3, [r7, #54]	; 0x36
	return LoRa_stat;
 8001c68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c6a:	b2db      	uxtb	r3, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3738      	adds	r7, #56	; 0x38
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bdb0      	pop	{r4, r5, r7, pc}
 8001c74:	20000204 	.word	0x20000204
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	200002b4 	.word	0x200002b4

08001c80 <LoraApp_init>:
 *
 * @param   None
 *
 * @return  None
 */
void LoraApp_init(){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	// Iniciar la recepción UART en modo interrupción
	HAL_UART_Receive_IT(&huart5, (uint8_t *)&uartRxBuffer[uartRxIndex], 1);
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <LoraApp_init+0x64>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <LoraApp_init+0x68>)
 8001c90:	4413      	add	r3, r2
 8001c92:	2201      	movs	r2, #1
 8001c94:	4619      	mov	r1, r3
 8001c96:	4815      	ldr	r0, [pc, #84]	; (8001cec <LoraApp_init+0x6c>)
 8001c98:	f003 faed 	bl	8005276 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart5, (uint8_t*)"PLUTON-UPV Ground Station Demo Code\r\n", strlen("PLUTON-UPV Ground Station Demo Code\r\n"), 100);
 8001c9c:	2364      	movs	r3, #100	; 0x64
 8001c9e:	2225      	movs	r2, #37	; 0x25
 8001ca0:	4913      	ldr	r1, [pc, #76]	; (8001cf0 <LoraApp_init+0x70>)
 8001ca2:	4812      	ldr	r0, [pc, #72]	; (8001cec <LoraApp_init+0x6c>)
 8001ca4:	f003 fa64 	bl	8005170 <HAL_UART_Transmit>

	// initialize the radio
	int state = setLoRa();
 8001ca8:	f7ff ff94 	bl	8001bd4 <setLoRa>
 8001cac:	4603      	mov	r3, r0
 8001cae:	607b      	str	r3, [r7, #4]


	if (state == LORA_OK) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2bc8      	cmp	r3, #200	; 0xc8
 8001cb4:	d106      	bne.n	8001cc4 <LoraApp_init+0x44>
		HAL_UART_Transmit(&huart5, (uint8_t*)"Initialization successful!\r\n", strlen("Initialization successful!\r\n"), 100);
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	221c      	movs	r2, #28
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <LoraApp_init+0x74>)
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <LoraApp_init+0x6c>)
 8001cbe:	f003 fa57 	bl	8005170 <HAL_UART_Transmit>
 8001cc2:	e006      	b.n	8001cd2 <LoraApp_init+0x52>
	} else {
		HAL_UART_Transmit(&huart5, (uint8_t*)"Failed to initialize\r\n", strlen("Failed to initialize\r\n"), 100);
 8001cc4:	2364      	movs	r3, #100	; 0x64
 8001cc6:	2216      	movs	r2, #22
 8001cc8:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <LoraApp_init+0x78>)
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <LoraApp_init+0x6c>)
 8001ccc:	f003 fa50 	bl	8005170 <HAL_UART_Transmit>
		while (1);
 8001cd0:	e7fe      	b.n	8001cd0 <LoraApp_init+0x50>
	}

	// begin listening for packets
	LoRa_startReceiving(&myLoRa);
 8001cd2:	480a      	ldr	r0, [pc, #40]	; (8001cfc <LoraApp_init+0x7c>)
 8001cd4:	f7ff fbe7 	bl	80014a6 <LoRa_startReceiving>
	printControls();
 8001cd8:	f7ff fd4a 	bl	8001770 <printControls>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200002b0 	.word	0x200002b0
 8001ce8:	20000230 	.word	0x20000230
 8001cec:	2000031c 	.word	0x2000031c
 8001cf0:	08009740 	.word	0x08009740
 8001cf4:	08009768 	.word	0x08009768
 8001cf8:	08009788 	.word	0x08009788
 8001cfc:	20000204 	.word	0x20000204

08001d00 <LoraApp_loopSerial>:
 *
 * @param   None
 *
 * @return  None
 */
void LoraApp_loopSerial(){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	// disable reception interrupt
	interruptEnabled = 0;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <LoraApp_loopSerial+0x9c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
	// Carácter recibido en la UART5
	SerialCmd = uartRxBuffer[uartRxIndex]; // Almacena el carácter en la variable global
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <LoraApp_loopSerial+0xa0>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <LoraApp_loopSerial+0xa4>)
 8001d14:	5c9a      	ldrb	r2, [r3, r2]
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <LoraApp_loopSerial+0xa8>)
 8001d18:	701a      	strb	r2, [r3, #0]
	// process serial command
	switch (SerialCmd) {
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <LoraApp_loopSerial+0xa8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b6c      	cmp	r3, #108	; 0x6c
 8001d20:	d004      	beq.n	8001d2c <LoraApp_loopSerial+0x2c>
 8001d22:	2b70      	cmp	r3, #112	; 0x70
 8001d24:	d105      	bne.n	8001d32 <LoraApp_loopSerial+0x32>
	case 'p':
		sendPing();
 8001d26:	f7ff ff31 	bl	8001b8c <sendPing>
		break;
 8001d2a:	e015      	b.n	8001d58 <LoraApp_loopSerial+0x58>
	case 'l':
		requestPacketInfo();
 8001d2c:	f7ff ff40 	bl	8001bb0 <requestPacketInfo>
		break;
 8001d30:	e012      	b.n	8001d58 <LoraApp_loopSerial+0x58>
	default:
		HAL_UART_Transmit(&huart5, (uint8_t*)"Unknown command: ", strlen("Unknown command: "), 100);
 8001d32:	2364      	movs	r3, #100	; 0x64
 8001d34:	2211      	movs	r2, #17
 8001d36:	491d      	ldr	r1, [pc, #116]	; (8001dac <LoraApp_loopSerial+0xac>)
 8001d38:	481d      	ldr	r0, [pc, #116]	; (8001db0 <LoraApp_loopSerial+0xb0>)
 8001d3a:	f003 fa19 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)&SerialCmd, sizeof(SerialCmd), 100);
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	2201      	movs	r2, #1
 8001d42:	4919      	ldr	r1, [pc, #100]	; (8001da8 <LoraApp_loopSerial+0xa8>)
 8001d44:	481a      	ldr	r0, [pc, #104]	; (8001db0 <LoraApp_loopSerial+0xb0>)
 8001d46:	f003 fa13 	bl	8005170 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", strlen("\r\n"), 100);
 8001d4a:	2364      	movs	r3, #100	; 0x64
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4919      	ldr	r1, [pc, #100]	; (8001db4 <LoraApp_loopSerial+0xb4>)
 8001d50:	4817      	ldr	r0, [pc, #92]	; (8001db0 <LoraApp_loopSerial+0xb0>)
 8001d52:	f003 fa0d 	bl	8005170 <HAL_UART_Transmit>
		break;
 8001d56:	bf00      	nop
	}
	LoRa_startReceiving(&myLoRa);
 8001d58:	4817      	ldr	r0, [pc, #92]	; (8001db8 <LoraApp_loopSerial+0xb8>)
 8001d5a:	f7ff fba4 	bl	80014a6 <LoRa_startReceiving>
	interruptEnabled = 1;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <LoraApp_loopSerial+0x9c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
	// Incrementar el índice y evitar desbordamiento
	uartRxIndex = (uartRxIndex + 1) % UART_RX_BUFFER_SIZE;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <LoraApp_loopSerial+0xa0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d76:	bf58      	it	pl
 8001d78:	4253      	negpl	r3, r2
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <LoraApp_loopSerial+0xa0>)
 8001d7e:	701a      	strb	r2, [r3, #0]

	// Reiniciar la recepción para esperar el próximo carácter
	HAL_UART_Receive_IT(&huart5, (uint8_t *)&uartRxBuffer[uartRxIndex], 1);
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <LoraApp_loopSerial+0xa0>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <LoraApp_loopSerial+0xa4>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4807      	ldr	r0, [pc, #28]	; (8001db0 <LoraApp_loopSerial+0xb0>)
 8001d92:	f003 fa70 	bl	8005276 <HAL_UART_Receive_IT>

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000000b 	.word	0x2000000b
 8001da0:	200002b0 	.word	0x200002b0
 8001da4:	20000230 	.word	0x20000230
 8001da8:	200002b1 	.word	0x200002b1
 8001dac:	080097a0 	.word	0x080097a0
 8001db0:	2000031c 	.word	0x2000031c
 8001db4:	080096a4 	.word	0x080096a4
 8001db8:	20000204 	.word	0x20000204

08001dbc <LoraApp_loopReceive>:
 *
 * @param   None
 *
 * @return  None
 */
void LoraApp_loopReceive(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
	// read received data
	uint8_t* respFrame = (uint8_t*)malloc(20 * sizeof(uint8_t));
 8001dc2:	2014      	movs	r0, #20
 8001dc4:	f004 fc8c 	bl	80066e0 <malloc>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	607b      	str	r3, [r7, #4]
	size_t respLen = LoRa_receive(&myLoRa, respFrame, 11);
 8001dcc:	220b      	movs	r2, #11
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4810      	ldr	r0, [pc, #64]	; (8001e14 <LoraApp_loopReceive+0x58>)
 8001dd2:	f7ff fb74 	bl	80014be <LoRa_receive>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	603b      	str	r3, [r7, #0]

	// check if new data were received
	if (transmissionReceived) {
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <LoraApp_loopReceive+0x5c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d011      	beq.n	8001e06 <LoraApp_loopReceive+0x4a>
		// disable reception interrupt
		interruptEnabled = 0;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <LoraApp_loopReceive+0x60>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		transmissionReceived = 0;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <LoraApp_loopReceive+0x5c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]



		// check reception success
		decode(respFrame, respLen);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fce1 	bl	80017bc <decode>
	      Serial.println(state);

	    }*/

		// enable reception interrupt
		LoRa_startReceiving(&myLoRa);
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <LoraApp_loopReceive+0x58>)
 8001dfc:	f7ff fb53 	bl	80014a6 <LoRa_startReceiving>
		interruptEnabled = 1;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <LoraApp_loopReceive+0x60>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
	}
	free(respFrame);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f004 fc72 	bl	80066f0 <free>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000204 	.word	0x20000204
 8001e18:	200002b2 	.word	0x200002b2
 8001e1c:	2000000b 	.word	0x2000000b

08001e20 <PCP_Get_Frame_Length>:
#include "PLUTON-Comms.h"

int16_t PCP_Get_Frame_Length(char* callsign, uint8_t optDataLen) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
	// check callsign
	if(callsign == NULL) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <PCP_Get_Frame_Length+0x18>
		return(ERR_CALLSIGN_INVALID);
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e014      	b.n	8001e62 <PCP_Get_Frame_Length+0x42>
	}

	// callsign and function ID fields are always present
	int16_t frameLen = strlen(callsign) + 1;
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe f9e9 	bl	8000210 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	81fb      	strh	r3, [r7, #14]

	// optDataLen and optData might be present
	if(optDataLen > 0) {
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <PCP_Get_Frame_Length+0x3e>
		frameLen += 1 + optDataLen;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	4413      	add	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	81fb      	strh	r3, [r7, #14]
	}

	return(frameLen);
 8001e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <PCP_Get_Frame_Length_Default>:

int16_t PCP_Get_Frame_Length_Default(char* callsign) {
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	return PCP_Get_Frame_Length(callsign,0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffd3 	bl	8001e20 <PCP_Get_Frame_Length>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <PCP_Get_OptData_Length>:

int16_t PCP_Get_OptData_Length(char* callsign, uint8_t* frame, uint8_t frameLen) {
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	71fb      	strb	r3, [r7, #7]
	// check callsign
	if(callsign == NULL) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <PCP_Get_OptData_Length+0x1a>
		return(ERR_CALLSIGN_INVALID);
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	e036      	b.n	8001f0c <PCP_Get_OptData_Length+0x88>
	}

	// check frame buffer
	if(frame == NULL) {
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <PCP_Get_OptData_Length+0x26>
		return(ERR_FRAME_INVALID);
 8001ea4:	f06f 0301 	mvn.w	r3, #1
 8001ea8:	e030      	b.n	8001f0c <PCP_Get_OptData_Length+0x88>
	}

	// check frame length
	if(frameLen < strlen(callsign) + 1) {
 8001eaa:	79fc      	ldrb	r4, [r7, #7]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7fe f9af 	bl	8000210 <strlen>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	429c      	cmp	r4, r3
 8001eb8:	d202      	bcs.n	8001ec0 <PCP_Get_OptData_Length+0x3c>
		return(ERR_FRAME_INVALID);
 8001eba:	f06f 0301 	mvn.w	r3, #1
 8001ebe:	e025      	b.n	8001f0c <PCP_Get_OptData_Length+0x88>
	} else if(frameLen == strlen(callsign) + 1) {
 8001ec0:	79fc      	ldrb	r4, [r7, #7]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7fe f9a4 	bl	8000210 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	3301      	adds	r3, #1
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	d101      	bne.n	8001ed4 <PCP_Get_OptData_Length+0x50>
		return(0);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e01b      	b.n	8001f0c <PCP_Get_OptData_Length+0x88>
	}

	// unencrypted frame
	int16_t optDataLen = frame[strlen(callsign) + 1];
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7fe f99b 	bl	8000210 <strlen>
 8001eda:	4603      	mov	r3, r0
 8001edc:	3301      	adds	r3, #1
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	82fb      	strh	r3, [r7, #22]

	// check if optDataLen field matches the expected length
	if(optDataLen != (uint8_t)(frameLen - strlen(callsign) - 2)) {
 8001ee6:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7fe f990 	bl	8000210 <strlen>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3b02      	subs	r3, #2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	429c      	cmp	r4, r3
 8001f00:	d002      	beq.n	8001f08 <PCP_Get_OptData_Length+0x84>
		// length mismatch
		return(ERR_LENGTH_MISMATCH);
 8001f02:	f06f 0303 	mvn.w	r3, #3
 8001f06:	e001      	b.n	8001f0c <PCP_Get_OptData_Length+0x88>
	}

	return(optDataLen);
 8001f08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <PCP_Get_FunctionID>:

int16_t PCP_Get_FunctionID(char* callsign, uint8_t* frame, uint8_t frameLen) {
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	71fb      	strb	r3, [r7, #7]
	// check callsign
	if(callsign == NULL) {
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <PCP_Get_FunctionID+0x1a>
		return(ERR_CALLSIGN_INVALID);
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	e018      	b.n	8001f60 <PCP_Get_FunctionID+0x4c>
	}

	// check frame buffer
	if(frame == NULL) {
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <PCP_Get_FunctionID+0x26>
		return(ERR_FRAME_INVALID);
 8001f34:	f06f 0301 	mvn.w	r3, #1
 8001f38:	e012      	b.n	8001f60 <PCP_Get_FunctionID+0x4c>
	}

	// check frame length
	if(frameLen < strlen(callsign) + 1) {
 8001f3a:	79fc      	ldrb	r4, [r7, #7]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7fe f967 	bl	8000210 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	3301      	adds	r3, #1
 8001f46:	429c      	cmp	r4, r3
 8001f48:	d202      	bcs.n	8001f50 <PCP_Get_FunctionID+0x3c>
		return(ERR_FRAME_INVALID);
 8001f4a:	f06f 0301 	mvn.w	r3, #1
 8001f4e:	e007      	b.n	8001f60 <PCP_Get_FunctionID+0x4c>
	}

	return((int16_t)frame[strlen(callsign)]);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7fe f95d 	bl	8000210 <strlen>
 8001f56:	4602      	mov	r2, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b21b      	sxth	r3, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <PCP_Get_OptData>:

int16_t PCP_Get_OptData(char* callsign, uint8_t* frame, uint8_t frameLen, uint8_t* optData) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// check callsign
	if(callsign == NULL) {
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <PCP_Get_OptData+0x1c>
		return(ERR_CALLSIGN_INVALID);
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e03f      	b.n	8002004 <PCP_Get_OptData+0x9c>
	}

	// check frame
	if(frame == NULL) {
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <PCP_Get_OptData+0x28>
		return(ERR_FRAME_INVALID);
 8001f8a:	f06f 0301 	mvn.w	r3, #1
 8001f8e:	e039      	b.n	8002004 <PCP_Get_OptData+0x9c>
	}

	// get frame pointer
	uint8_t* framePtr = frame;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	617b      	str	r3, [r7, #20]

	// check callsign
	if(memcmp(framePtr, callsign, strlen(callsign)) != 0) {
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7fe f93b 	bl	8000210 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f004 fbad 	bl	8006700 <memcmp>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <PCP_Get_OptData+0x4a>
		// incorrect callsign
		return(ERR_CALLSIGN_INVALID);
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	e028      	b.n	8002004 <PCP_Get_OptData+0x9c>
	}
	framePtr += strlen(callsign);
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7fe f92c 	bl	8000210 <strlen>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

	// skip function ID
	framePtr += 1;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
	// get optional data (if present)
	if(frameLen > strlen(callsign) + 1) {
 8001fc6:	79fc      	ldrb	r4, [r7, #7]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7fe f921 	bl	8000210 <strlen>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	429c      	cmp	r4, r3
 8001fd4:	d915      	bls.n	8002002 <PCP_Get_OptData+0x9a>
		if(optData == NULL) {
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <PCP_Get_OptData+0x7a>
			return(ERR_FRAME_INVALID);
 8001fdc:	f06f 0301 	mvn.w	r3, #1
 8001fe0:	e010      	b.n	8002004 <PCP_Get_OptData+0x9c>
		}

		// get option data length
		uint8_t optDataLen = *framePtr;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	74fb      	strb	r3, [r7, #19]
		framePtr += 1;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]

		// get optional data
		memcpy(optData, framePtr, optDataLen);
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	6838      	ldr	r0, [r7, #0]
 8001ff6:	f004 fb93 	bl	8006720 <memcpy>
		framePtr += optDataLen;
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
	}

	return(ERR_NONE);
 8002002:	2300      	movs	r3, #0

}
 8002004:	4618      	mov	r0, r3
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <PCP_Encode>:

int16_t PCP_Encode(uint8_t* frame, char* callsign, uint8_t functionId, uint8_t optDataLen, uint8_t* optData) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	460b      	mov	r3, r1
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	4613      	mov	r3, r2
 8002020:	71bb      	strb	r3, [r7, #6]
	// get frame pointer
	uint8_t* framePtr = frame;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	617b      	str	r3, [r7, #20]

	// set callsign
	memcpy(framePtr, callsign, strlen(callsign));
 8002026:	68b8      	ldr	r0, [r7, #8]
 8002028:	f7fe f8f2 	bl	8000210 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f004 fb74 	bl	8006720 <memcpy>
	framePtr += strlen(callsign);
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	f7fe f8e9 	bl	8000210 <strlen>
 800203e:	4602      	mov	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4413      	add	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

	// set function ID
	*framePtr = functionId;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	79fa      	ldrb	r2, [r7, #7]
 800204a:	701a      	strb	r2, [r3, #0]
	framePtr += 1;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
	if(optDataLen > 0) {
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00f      	beq.n	8002078 <PCP_Encode+0x6c>
		// set optional data length
		*framePtr = optDataLen;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	79ba      	ldrb	r2, [r7, #6]
 800205c:	701a      	strb	r2, [r3, #0]
		framePtr += 1;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]

		// set optional data
		memcpy(framePtr, optData, optDataLen);
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	461a      	mov	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f004 fb58 	bl	8006720 <memcpy>
		framePtr += optDataLen;
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
	}


	return(ERR_NONE);
 8002078:	2300      	movs	r3, #0

}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <PCP_Encode_Default>:

int16_t PCP_Encode_Default(uint8_t* frame, char* callsign, uint8_t functionId) {
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af02      	add	r7, sp, #8
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	4613      	mov	r3, r2
 800208e:	71fb      	strb	r3, [r7, #7]
	return PCP_Encode(frame, callsign, functionId, 0, NULL);
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	2300      	movs	r3, #0
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2300      	movs	r3, #0
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff ffb6 	bl	800200c <PCP_Encode>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <MX_GPIO_Init+0x110>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <MX_GPIO_Init+0x110>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <MX_GPIO_Init+0x110>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020da:	4b38      	ldr	r3, [pc, #224]	; (80021bc <MX_GPIO_Init+0x110>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a37      	ldr	r2, [pc, #220]	; (80021bc <MX_GPIO_Init+0x110>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <MX_GPIO_Init+0x110>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <MX_GPIO_Init+0x110>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a31      	ldr	r2, [pc, #196]	; (80021bc <MX_GPIO_Init+0x110>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <MX_GPIO_Init+0x110>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <MX_GPIO_Init+0x110>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <MX_GPIO_Init+0x110>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <MX_GPIO_Init+0x110>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <MX_GPIO_Init+0x110>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <MX_GPIO_Init+0x110>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <MX_GPIO_Init+0x110>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	2103      	movs	r1, #3
 800213e:	4820      	ldr	r0, [pc, #128]	; (80021c0 <MX_GPIO_Init+0x114>)
 8002140:	f000 ff6e 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800214a:	481d      	ldr	r0, [pc, #116]	; (80021c0 <MX_GPIO_Init+0x114>)
 800214c:	f000 ff68 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4817      	ldr	r0, [pc, #92]	; (80021c4 <MX_GPIO_Init+0x118>)
 8002166:	f000 fdaf 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|LED3_Pin|LED2_Pin;
 800216a:	f244 0383 	movw	r3, #16515	; 0x4083
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <MX_GPIO_Init+0x114>)
 8002184:	f000 fda0 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002188:	2304      	movs	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800218c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4808      	ldr	r0, [pc, #32]	; (80021c0 <MX_GPIO_Init+0x114>)
 800219e:	f000 fd93 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2008      	movs	r0, #8
 80021a8:	f000 fcc5 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021ac:	2008      	movs	r0, #8
 80021ae:	f000 fcde 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020800 	.word	0x40020800

080021c8 <delay_ms>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_ms(uint32_t ms) {
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	// Calcular la cantidad de ciclos de reloj necesarios para 1 ms
	uint32_t cycles = 3645 * ms; // 72,000 ciclos por milisegundo (72 MHz)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f640 623d 	movw	r2, #3645	; 0xe3d
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	60bb      	str	r3, [r7, #8]

	// Utilizar un bucle para esperar
	for (uint32_t i = 0; i < cycles; i++) {
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e003      	b.n	80021ea <delay_ms+0x22>
		// Esto introduce un retraso de 1 ms
		__NOP(); // No operation (instrucción que no hace nada)
 80021e2:	bf00      	nop
	for (uint32_t i = 0; i < cycles; i++) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3f7      	bcc.n	80021e2 <delay_ms+0x1a>
	}
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002204:	f000 fb3b 	bl	800287e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002208:	f000 f810 	bl	800222c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800220c:	f7ff ff4e 	bl	80020ac <MX_GPIO_Init>
	MX_SPI1_Init();
 8002210:	f000 f898 	bl	8002344 <MX_SPI1_Init>
	MX_UART5_Init();
 8002214:	f000 fa50 	bl	80026b8 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */

	//------------MAIN APP INIT-----------------
	LoraApp_init();
 8002218:	f7ff fd32 	bl	8001c80 <LoraApp_init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//------------MAIN APP LOOP-----------------
		LoraApp_loopReceive();
 800221c:	f7ff fdce 	bl	8001dbc <LoraApp_loopReceive>
		HAL_Delay(500);
 8002220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002224:	f000 fb88 	bl	8002938 <HAL_Delay>
	{
 8002228:	e7f8      	b.n	800221c <main+0x1c>
	...

0800222c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b094      	sub	sp, #80	; 0x50
 8002230:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	2230      	movs	r2, #48	; 0x30
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fa7e 	bl	800673c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <SystemClock_Config+0xc8>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <SystemClock_Config+0xc8>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <SystemClock_Config+0xc8>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <SystemClock_Config+0xcc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002270:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <SystemClock_Config+0xcc>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <SystemClock_Config+0xcc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002284:	2301      	movs	r3, #1
 8002286:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228e:	2302      	movs	r3, #2
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002298:	2304      	movs	r3, #4
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 800229c:	2348      	movs	r3, #72	; 0x48
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022a0:	2302      	movs	r3, #2
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a8:	f107 0320 	add.w	r3, r7, #32
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fee9 	bl	8003084 <HAL_RCC_OscConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x90>
	{
		Error_Handler();
 80022b8:	f000 f83e 	bl	8002338 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022bc:	230f      	movs	r3, #15
 80022be:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c0:	2302      	movs	r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	2102      	movs	r1, #2
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 f976 	bl	80035cc <HAL_RCC_ClockConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0xbe>
	{
		Error_Handler();
 80022e6:	f000 f827 	bl	8002338 <Error_Handler>
	}
}
 80022ea:	bf00      	nop
 80022ec:	3750      	adds	r7, #80	; 0x50
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000

080022fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//---------------------UART INTERRUPTION----------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_UART_RxCpltCallback+0x1c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_UART_RxCpltCallback+0x14>
		LoraApp_loopSerial();
 800230c:	f7ff fcf8 	bl	8001d00 <LoraApp_loopSerial>
	}
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000031c 	.word	0x2000031c

0800231c <HAL_GPIO_EXTI_Callback>:
//------------------------------------------------------------------------
//---------------------DIO0 INTERRUPTION----------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin){
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d101      	bne.n	8002330 <HAL_GPIO_EXTI_Callback+0x14>
		//Se ha producido una interupcion en la recepcion
		onInterrupt();
 800232c:	f7ff f9cc 	bl	80016c8 <onInterrupt>
	}
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002340:	e7fe      	b.n	8002340 <Error_Handler+0x8>
	...

08002344 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_SPI1_Init+0x74>)
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <MX_SPI1_Init+0x78>)
 800234c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_SPI1_Init+0x74>)
 800235e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_SPI1_Init+0x74>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_SPI1_Init+0x74>)
 800237a:	2208      	movs	r2, #8
 800237c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_SPI1_Init+0x74>)
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002392:	2207      	movs	r2, #7
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_SPI1_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_SPI1_Init+0x74>)
 800239e:	2208      	movs	r2, #8
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_SPI1_Init+0x74>)
 80023a4:	f001 ff28 	bl	80041f8 <HAL_SPI_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023ae:	f7ff ffc3 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200002b4 	.word	0x200002b4
 80023bc:	40013000 	.word	0x40013000

080023c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_SPI_MspInit+0x7c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d127      	bne.n	8002432 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_SPI_MspInit+0x80>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a16      	ldr	r2, [pc, #88]	; (8002440 <HAL_SPI_MspInit+0x80>)
 80023e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_SPI_MspInit+0x80>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_SPI_MspInit+0x80>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_SPI_MspInit+0x80>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_SPI_MspInit+0x80>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002412:	23e0      	movs	r3, #224	; 0xe0
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002422:	2305      	movs	r3, #5
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_SPI_MspInit+0x84>)
 800242e:	f000 fc4b 	bl	8002cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40013000 	.word	0x40013000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000

08002448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_MspInit+0x44>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_MspInit+0x44>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_MspInit+0x44>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_MspInit+0x44>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_MspInit+0x44>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_MspInit+0x44>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <NMI_Handler+0x4>

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f000 fa0c 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80024e8:	2004      	movs	r0, #4
 80024ea:	f000 fdb3 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <UART5_IRQHandler+0x10>)
 80024fa:	f002 ff01 	bl	8005300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000031c 	.word	0x2000031c

08002508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_kill>:

int _kill(int pid, int sig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002522:	f004 f8b3 	bl	800668c <__errno>
 8002526:	4603      	mov	r3, r0
 8002528:	2216      	movs	r2, #22
 800252a:	601a      	str	r2, [r3, #0]
  return -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_exit>:

void _exit (int status)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffe7 	bl	8002518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800254a:	e7fe      	b.n	800254a <_exit+0x12>

0800254c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e00a      	b.n	8002574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255e:	f3af 8000 	nop.w
 8002562:	4601      	mov	r1, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	b2ca      	uxtb	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	dbf0      	blt.n	800255e <_read+0x12>
  }

  return len;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e009      	b.n	80025ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60ba      	str	r2, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbf1      	blt.n	8002598 <_write+0x12>
  }
  return len;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_close>:

int _close(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e6:	605a      	str	r2, [r3, #4]
  return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_isatty>:

int _isatty(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f004 f818 	bl	800668c <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20050000 	.word	0x20050000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000318 	.word	0x20000318
 8002690:	200003b8 	.word	0x200003b8

08002694 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_UART5_Init+0x58>)
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <MX_UART5_Init+0x5c>)
 80026c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_UART5_Init+0x58>)
 80026c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_UART5_Init+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_UART5_Init+0x58>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_UART5_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_UART5_Init+0x58>)
 80026de:	220c      	movs	r2, #12
 80026e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_UART5_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_UART5_Init+0x58>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_UART5_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_UART5_Init+0x58>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_UART5_Init+0x58>)
 80026fc:	f002 fcea 	bl	80050d4 <HAL_UART_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002706:	f7ff fe17 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000031c 	.word	0x2000031c
 8002714:	40005000 	.word	0x40005000

08002718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0ac      	sub	sp, #176	; 0xb0
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	2284      	movs	r2, #132	; 0x84
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f003 ffff 	bl	800673c <memset>
  if(uartHandle->Instance==UART5)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_UART_MspInit+0x104>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d165      	bne.n	8002814 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800274e:	2300      	movs	r3, #0
 8002750:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002752:	f107 0318 	add.w	r3, r7, #24
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f95e 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002762:	f7ff fde9 	bl	8002338 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_UART_MspInit+0x108>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_UART_MspInit+0x108>)
 800276c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_UART_MspInit+0x108>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_UART_MspInit+0x108>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_UART_MspInit+0x108>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_UART_MspInit+0x108>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_UART_MspInit+0x108>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <HAL_UART_MspInit+0x108>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_UART_MspInit+0x108>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027c8:	2308      	movs	r3, #8
 80027ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4813      	ldr	r0, [pc, #76]	; (8002824 <HAL_UART_MspInit+0x10c>)
 80027d6:	f000 fa77 	bl	8002cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027da:	2304      	movs	r3, #4
 80027dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027f2:	2308      	movs	r3, #8
 80027f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027fc:	4619      	mov	r1, r3
 80027fe:	480a      	ldr	r0, [pc, #40]	; (8002828 <HAL_UART_MspInit+0x110>)
 8002800:	f000 fa62 	bl	8002cc8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	2035      	movs	r0, #53	; 0x35
 800280a:	f000 f994 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800280e:	2035      	movs	r0, #53	; 0x35
 8002810:	f000 f9ad 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002814:	bf00      	nop
 8002816:	37b0      	adds	r7, #176	; 0xb0
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40005000 	.word	0x40005000
 8002820:	40023800 	.word	0x40023800
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002856:	f7ff ff1d 	bl	8002694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f003 ff1d 	bl	8006698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7ff fccf 	bl	8002200 <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002864:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002870:	08009bb4 	.word	0x08009bb4
  ldr r2, =_sbss
 8002874:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002878:	200003b8 	.word	0x200003b8

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>

0800287e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 f94c 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002888:	200f      	movs	r0, #15
 800288a:	f000 f805 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288e:	f7ff fddb 	bl	8002448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f967 	bl	8002b8a <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 f92f 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000000c 	.word	0x2000000c
 80028f0:	20000014 	.word	0x20000014
 80028f4:	20000010 	.word	0x20000010

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000014 	.word	0x20000014
 800291c:	200003a4 	.word	0x200003a4

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200003a4 	.word	0x200003a4

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000014 	.word	0x20000014

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	05fa0000 	.word	0x05fa0000

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff feb6 	bl	8002920 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d008      	beq.n	8002bd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e052      	b.n	8002c7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0216 	bic.w	r2, r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <HAL_DMA_Abort+0x62>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0208 	bic.w	r2, r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c24:	e013      	b.n	8002c4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c26:	f7ff fe7b 	bl	8002920 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d90c      	bls.n	8002c4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e015      	b.n	8002c7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e4      	bne.n	8002c26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d004      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e00c      	b.n	8002cba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	e175      	b.n	8002fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 8164 	bne.w	8002fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d005      	beq.n	8002d1e <HAL_GPIO_Init+0x56>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d130      	bne.n	8002d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 0201 	and.w	r2, r3, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d017      	beq.n	8002dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d123      	bne.n	8002e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0203 	and.w	r2, r3, #3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80be 	beq.w	8002fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e52:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e6a:	4a61      	ldr	r2, [pc, #388]	; (8002ff0 <HAL_GPIO_Init+0x328>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_GPIO_Init+0x32c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d037      	beq.n	8002f06 <HAL_GPIO_Init+0x23e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a57      	ldr	r2, [pc, #348]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d031      	beq.n	8002f02 <HAL_GPIO_Init+0x23a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a56      	ldr	r2, [pc, #344]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02b      	beq.n	8002efe <HAL_GPIO_Init+0x236>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a55      	ldr	r2, [pc, #340]	; (8003000 <HAL_GPIO_Init+0x338>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d025      	beq.n	8002efa <HAL_GPIO_Init+0x232>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a54      	ldr	r2, [pc, #336]	; (8003004 <HAL_GPIO_Init+0x33c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <HAL_GPIO_Init+0x22e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a53      	ldr	r2, [pc, #332]	; (8003008 <HAL_GPIO_Init+0x340>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d019      	beq.n	8002ef2 <HAL_GPIO_Init+0x22a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_GPIO_Init+0x344>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_GPIO_Init+0x226>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a51      	ldr	r2, [pc, #324]	; (8003010 <HAL_GPIO_Init+0x348>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <HAL_GPIO_Init+0x222>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_GPIO_Init+0x34c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <HAL_GPIO_Init+0x21e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4f      	ldr	r2, [pc, #316]	; (8003018 <HAL_GPIO_Init+0x350>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_GPIO_Init+0x21a>
 8002ede:	2309      	movs	r3, #9
 8002ee0:	e012      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	e010      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	e00e      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002eea:	2307      	movs	r3, #7
 8002eec:	e00c      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002eee:	2306      	movs	r3, #6
 8002ef0:	e00a      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	e008      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002efa:	2303      	movs	r3, #3
 8002efc:	e004      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e002      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_GPIO_Init+0x240>
 8002f06:	2300      	movs	r3, #0
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f002 0203 	and.w	r2, r2, #3
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	4093      	lsls	r3, r2
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f18:	4935      	ldr	r1, [pc, #212]	; (8002ff0 <HAL_GPIO_Init+0x328>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <HAL_GPIO_Init+0x354>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4a:	4a34      	ldr	r2, [pc, #208]	; (800301c <HAL_GPIO_Init+0x354>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_GPIO_Init+0x354>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f74:	4a29      	ldr	r2, [pc, #164]	; (800301c <HAL_GPIO_Init+0x354>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_GPIO_Init+0x354>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9e:	4a1f      	ldr	r2, [pc, #124]	; (800301c <HAL_GPIO_Init+0x354>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_GPIO_Init+0x354>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_GPIO_Init+0x354>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	f67f ae86 	bls.w	8002ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020c00 	.word	0x40020c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40021400 	.word	0x40021400
 800300c:	40021800 	.word	0x40021800
 8003010:	40021c00 	.word	0x40021c00
 8003014:	40022000 	.word	0x40022000
 8003018:	40022400 	.word	0x40022400
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
 800302c:	4613      	mov	r3, r2
 800302e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800303c:	e003      	b.n	8003046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	041a      	lsls	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f952 	bl	800231c <HAL_GPIO_EXTI_Callback>
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40013c00 	.word	0x40013c00

08003084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e291      	b.n	80035be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8087 	beq.w	80031b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a8:	4b96      	ldr	r3, [pc, #600]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d00c      	beq.n	80030ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b4:	4b93      	ldr	r3, [pc, #588]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d112      	bne.n	80030e6 <HAL_RCC_OscConfig+0x62>
 80030c0:	4b90      	ldr	r3, [pc, #576]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030cc:	d10b      	bne.n	80030e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x130>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d168      	bne.n	80031b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e26b      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x7a>
 80030f0:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a83      	ldr	r2, [pc, #524]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e02e      	b.n	800315c <HAL_RCC_OscConfig+0xd8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x9c>
 8003106:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800310c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7b      	ldr	r2, [pc, #492]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e01d      	b.n	800315c <HAL_RCC_OscConfig+0xd8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0xc0>
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a72      	ldr	r2, [pc, #456]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0xd8>
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6e      	ldr	r2, [pc, #440]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a6b      	ldr	r2, [pc, #428]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff fbdc 	bl	8002920 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7ff fbd8 	bl	8002920 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e21f      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0xe8>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7ff fbc8 	bl	8002920 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7ff fbc4 	bl	8002920 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e20b      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	4b57      	ldr	r3, [pc, #348]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x110>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d069      	beq.n	8003296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x190>
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x17a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1df      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	493d      	ldr	r1, [pc, #244]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	e040      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a38      	ldr	r2, [pc, #224]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7ff fb7a 	bl	8002920 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7ff fb76 	bl	8002920 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1bd      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4929      	ldr	r1, [pc, #164]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
 8003262:	e018      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7ff fb56 	bl	8002920 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7ff fb52 	bl	8002920 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e199      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d038      	beq.n	8003314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7ff fb33 	bl	8002920 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032be:	f7ff fb2f 	bl	8002920 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e176      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x23a>
 80032dc:	e01a      	b.n	8003314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e2:	4a08      	ldr	r2, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7ff fb19 	bl	8002920 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7ff fb15 	bl	8002920 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d903      	bls.n	8003308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e15c      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
 8003304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b91      	ldr	r3, [pc, #580]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a4 	beq.w	800346a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b8b      	ldr	r3, [pc, #556]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a87      	ldr	r2, [pc, #540]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334a:	4b82      	ldr	r3, [pc, #520]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7ff fadd 	bl	8002920 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7ff fad9 	bl	8002920 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b64      	cmp	r3, #100	; 0x64
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e120      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337c:	4b75      	ldr	r3, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x31a>
 8003390:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a6e      	ldr	r2, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e02d      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x33c>
 80033a6:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e01c      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x35e>
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a60      	ldr	r2, [pc, #384]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
 80033e2:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a5a      	ldr	r2, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7ff fa8d 	bl	8002920 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7ff fa89 	bl	8002920 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0ce      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x386>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7ff fa77 	bl	8002920 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7ff fa73 	bl	8002920 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0b8      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344c:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a3b      	ldr	r2, [pc, #236]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a4 	beq.w	80035bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d06b      	beq.n	8003558 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d149      	bne.n	800351c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a30      	ldr	r2, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800348e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7ff fa44 	bl	8002920 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7ff fa40 	bl	8002920 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e087      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	4313      	orrs	r3, r2
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7ff fa14 	bl	8002920 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff fa10 	bl	8002920 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e057      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x478>
 800351a:	e04f      	b.n	80035bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7ff f9fa 	bl	8002920 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7ff f9f6 	bl	8002920 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e03d      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x4ac>
 800354e:	e035      	b.n	80035bc <HAL_RCC_OscConfig+0x538>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x544>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d121      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0d0      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b67      	ldr	r3, [pc, #412]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 020f 	bic.w	r2, r3, #15
 80035fa:	4965      	ldr	r1, [pc, #404]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0b8      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800364e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	494d      	ldr	r1, [pc, #308]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d040      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e073      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06b      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4936      	ldr	r1, [pc, #216]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7ff f92e 	bl	8002920 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7ff f92a 	bl	8002920 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e053      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d210      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 020f 	bic.w	r2, r3, #15
 8003706:	4922      	ldr	r1, [pc, #136]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e032      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4916      	ldr	r1, [pc, #88]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800375e:	f000 f821 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_RCC_ClockConfig+0x1cc>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	4a09      	ldr	r2, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1d0>)
 8003778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1d4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f88a 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023c00 	.word	0x40023c00
 8003794:	40023800 	.word	0x40023800
 8003798:	080097b4 	.word	0x080097b4
 800379c:	2000000c 	.word	0x2000000c
 80037a0:	20000010 	.word	0x20000010

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b094      	sub	sp, #80	; 0x50
 80037aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	647b      	str	r3, [r7, #68]	; 0x44
 80037b0:	2300      	movs	r3, #0
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	2300      	movs	r3, #0
 80037b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037bc:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x40>
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	f200 80e1 	bhi.w	8003990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x34>
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x3a>
 80037d6:	e0db      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037dc:	e0db      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037de:	4b73      	ldr	r3, [pc, #460]	; (80039ac <HAL_RCC_GetSysClockFreq+0x208>)
 80037e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e2:	e0d8      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ee:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	2200      	movs	r2, #0
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38
 8003804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
 800380e:	2300      	movs	r3, #0
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003816:	4622      	mov	r2, r4
 8003818:	462b      	mov	r3, r5
 800381a:	f04f 0000 	mov.w	r0, #0
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	0159      	lsls	r1, r3, #5
 8003824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003828:	0150      	lsls	r0, r2, #5
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4621      	mov	r1, r4
 8003830:	1a51      	subs	r1, r2, r1
 8003832:	6139      	str	r1, [r7, #16]
 8003834:	4629      	mov	r1, r5
 8003836:	eb63 0301 	sbc.w	r3, r3, r1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003848:	4659      	mov	r1, fp
 800384a:	018b      	lsls	r3, r1, #6
 800384c:	4651      	mov	r1, sl
 800384e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003852:	4651      	mov	r1, sl
 8003854:	018a      	lsls	r2, r1, #6
 8003856:	4651      	mov	r1, sl
 8003858:	ebb2 0801 	subs.w	r8, r2, r1
 800385c:	4659      	mov	r1, fp
 800385e:	eb63 0901 	sbc.w	r9, r3, r1
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800386e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003876:	4690      	mov	r8, r2
 8003878:	4699      	mov	r9, r3
 800387a:	4623      	mov	r3, r4
 800387c:	eb18 0303 	adds.w	r3, r8, r3
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	462b      	mov	r3, r5
 8003884:	eb49 0303 	adc.w	r3, r9, r3
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003896:	4629      	mov	r1, r5
 8003898:	024b      	lsls	r3, r1, #9
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038a0:	4621      	mov	r1, r4
 80038a2:	024a      	lsls	r2, r1, #9
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038b4:	f7fd f998 	bl	8000be8 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c0:	e058      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c2:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	2200      	movs	r2, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	4611      	mov	r1, r2
 80038ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	f04f 0000 	mov.w	r0, #0
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	0159      	lsls	r1, r3, #5
 80038ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ee:	0150      	lsls	r0, r2, #5
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4641      	mov	r1, r8
 80038f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038fa:	4649      	mov	r1, r9
 80038fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800390c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003914:	ebb2 040a 	subs.w	r4, r2, sl
 8003918:	eb63 050b 	sbc.w	r5, r3, fp
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	00eb      	lsls	r3, r5, #3
 8003926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392a:	00e2      	lsls	r2, r4, #3
 800392c:	4614      	mov	r4, r2
 800392e:	461d      	mov	r5, r3
 8003930:	4643      	mov	r3, r8
 8003932:	18e3      	adds	r3, r4, r3
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	464b      	mov	r3, r9
 8003938:	eb45 0303 	adc.w	r3, r5, r3
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394a:	4629      	mov	r1, r5
 800394c:	028b      	lsls	r3, r1, #10
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003954:	4621      	mov	r1, r4
 8003956:	028a      	lsls	r2, r1, #10
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	61fa      	str	r2, [r7, #28]
 8003964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003968:	f7fd f93e 	bl	8000be8 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	3301      	adds	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003998:	4618      	mov	r0, r3
 800399a:	3750      	adds	r7, #80	; 0x50
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	007a1200 	.word	0x007a1200

080039b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039cc:	f7ff fff0 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	080097c4 	.word	0x080097c4

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f4:	f7ff ffdc 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0b5b      	lsrs	r3, r3, #13
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	080097c4 	.word	0x080097c4

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a40:	4b69      	ldr	r3, [pc, #420]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a68      	ldr	r2, [pc, #416]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	4964      	ldr	r1, [pc, #400]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d017      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a72:	4b5d      	ldr	r3, [pc, #372]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	4959      	ldr	r1, [pc, #356]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d017      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aae:	4b4e      	ldr	r3, [pc, #312]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	494a      	ldr	r1, [pc, #296]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 808b 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a39      	ldr	r2, [pc, #228]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
 8003b08:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fe fefe 	bl	8002920 <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fe fefa 	bl	8002920 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e357      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d035      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d02e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d114      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fec2 	bl	8002920 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fe febe 	bl	8002920 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e319      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ee      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	4901      	ldr	r1, [pc, #4]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
 8003be6:	e00b      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	0ffffcff 	.word	0x0ffffcff
 8003bf4:	4baa      	ldr	r3, [pc, #680]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4aa9      	ldr	r2, [pc, #676]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	4ba7      	ldr	r3, [pc, #668]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	49a4      	ldr	r1, [pc, #656]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c24:	4a9e      	ldr	r2, [pc, #632]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c2e:	4b9c      	ldr	r3, [pc, #624]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	4999      	ldr	r1, [pc, #612]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c4c:	4b94      	ldr	r3, [pc, #592]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5a:	4991      	ldr	r1, [pc, #580]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c6e:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7c:	4988      	ldr	r1, [pc, #544]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c90:	4b83      	ldr	r3, [pc, #524]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9e:	4980      	ldr	r1, [pc, #512]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cb2:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4977      	ldr	r1, [pc, #476]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd4:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	496f      	ldr	r1, [pc, #444]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf6:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f023 020c 	bic.w	r2, r3, #12
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	4966      	ldr	r1, [pc, #408]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d18:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	495e      	ldr	r1, [pc, #376]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	4955      	ldr	r1, [pc, #340]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d5c:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	494d      	ldr	r1, [pc, #308]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d7e:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	4944      	ldr	r1, [pc, #272]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003da0:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	493c      	ldr	r1, [pc, #240]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dc2:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	4933      	ldr	r1, [pc, #204]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de4:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df2:	492b      	ldr	r1, [pc, #172]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d011      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e14:	4922      	ldr	r1, [pc, #136]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	4912      	ldr	r1, [pc, #72]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e68:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e78:	4909      	ldr	r1, [pc, #36]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d006      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80d9 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a01      	ldr	r2, [pc, #4]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e9e:	e001      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea6:	f7fe fd3b 	bl	8002920 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eae:	f7fe fd37 	bl	8002920 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e194      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ec0:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d021      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11d      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee0:	4b64      	ldr	r3, [pc, #400]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eee:	4b61      	ldr	r3, [pc, #388]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef4:	0e1b      	lsrs	r3, r3, #24
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	019a      	lsls	r2, r3, #6
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	071b      	lsls	r3, r3, #28
 8003f14:	4957      	ldr	r1, [pc, #348]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02e      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f46:	d129      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f48:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	0f1b      	lsrs	r3, r3, #28
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	019a      	lsls	r2, r3, #6
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	071b      	lsls	r3, r3, #28
 8003f7c:	493d      	ldr	r1, [pc, #244]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f023 021f 	bic.w	r2, r3, #31
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	3b01      	subs	r3, #1
 8003f94:	4937      	ldr	r1, [pc, #220]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fae:	0e1b      	lsrs	r3, r3, #24
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	0f1b      	lsrs	r3, r3, #28
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	019a      	lsls	r2, r3, #6
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	071b      	lsls	r3, r3, #28
 8003fdc:	4925      	ldr	r1, [pc, #148]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	019a      	lsls	r2, r3, #6
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	071b      	lsls	r3, r3, #28
 800400c:	4919      	ldr	r1, [pc, #100]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800401e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fe fc7e 	bl	8002920 <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004028:	f7fe fc7a 	bl	8002920 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0d7      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 80cd 	bne.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fe fc61 	bl	8002920 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004062:	f7fe fc5d 	bl	8002920 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d903      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0ba      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004074:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004078:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004084:	d0ed      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02e      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d12a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040ae:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040bc:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	0f1b      	lsrs	r3, r3, #28
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	019a      	lsls	r2, r3, #6
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	061b      	lsls	r3, r3, #24
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	071b      	lsls	r3, r3, #28
 80040e2:	4944      	ldr	r1, [pc, #272]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040ea:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	493d      	ldr	r1, [pc, #244]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d022      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004118:	d11d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800411a:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	0e1b      	lsrs	r3, r3, #24
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	0f1b      	lsrs	r3, r3, #28
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	019a      	lsls	r2, r3, #6
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	4929      	ldr	r1, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d028      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	019a      	lsls	r2, r3, #6
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	4917      	ldr	r1, [pc, #92]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	4911      	ldr	r1, [pc, #68]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fe fbae 	bl	8002920 <HAL_GetTick>
 80041c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041c8:	f7fe fbaa 	bl	8002920 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e007      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e6:	d1ef      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e09d      	b.n	8004346 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421a:	d009      	beq.n	8004230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
 8004222:	e005      	b.n	8004230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fe f8b8 	bl	80023c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004270:	d902      	bls.n	8004278 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e002      	b.n	800427e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004286:	d007      	beq.n	8004298 <HAL_SPI_Init+0xa0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004290:	d002      	beq.n	8004298 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	ea42 0103 	orr.w	r1, r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	f003 0204 	and.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b088      	sub	sp, #32
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_SPI_Transmit+0x22>
 800436c:	2302      	movs	r3, #2
 800436e:	e158      	b.n	8004622 <HAL_SPI_Transmit+0x2d4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004378:	f7fe fad2 	bl	8002920 <HAL_GetTick>
 800437c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004392:	e13d      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_Transmit+0x52>
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a4:	e134      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d10f      	bne.n	8004412 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d007      	beq.n	8004430 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004438:	d94b      	bls.n	80044d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Transmit+0xfa>
 8004442:	8afb      	ldrh	r3, [r7, #22]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d13e      	bne.n	80044c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	881a      	ldrh	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800446c:	e02b      	b.n	80044c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d112      	bne.n	80044a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a0:	e011      	b.n	80044c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a2:	f7fe fa3d 	bl	8002920 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d803      	bhi.n	80044ba <HAL_SPI_Transmit+0x16c>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d102      	bne.n	80044c0 <HAL_SPI_Transmit+0x172>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044c4:	e0a4      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ce      	bne.n	800446e <HAL_SPI_Transmit+0x120>
 80044d0:	e07c      	b.n	80045cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0x192>
 80044da:	8afb      	ldrh	r3, [r7, #22]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d170      	bne.n	80045c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d912      	bls.n	8004510 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b02      	subs	r3, #2
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800450e:	e058      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004536:	e044      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d12b      	bne.n	800459e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d912      	bls.n	8004576 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	1c9a      	adds	r2, r3, #2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b02      	subs	r3, #2
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004574:	e025      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800459c:	e011      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459e:	f7fe f9bf 	bl	8002920 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d803      	bhi.n	80045b6 <HAL_SPI_Transmit+0x268>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d102      	bne.n	80045bc <HAL_SPI_Transmit+0x26e>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045c0:	e026      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1b5      	bne.n	8004538 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fd15 	bl	8005000 <SPI_EndRxTxTransaction>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e000      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800460e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004620:	7ffb      	ldrb	r3, [r7, #31]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b088      	sub	sp, #32
 800462e:	af02      	add	r7, sp, #8
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004646:	d112      	bne.n	800466e <HAL_SPI_Receive+0x44>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10e      	bne.n	800466e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2204      	movs	r2, #4
 8004654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f910 	bl	800488a <HAL_SPI_TransmitReceive>
 800466a:	4603      	mov	r3, r0
 800466c:	e109      	b.n	8004882 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_SPI_Receive+0x52>
 8004678:	2302      	movs	r3, #2
 800467a:	e102      	b.n	8004882 <HAL_SPI_Receive+0x258>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004684:	f7fe f94c 	bl	8002920 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d002      	beq.n	800469c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004696:	2302      	movs	r3, #2
 8004698:	75fb      	strb	r3, [r7, #23]
    goto error;
 800469a:	e0e9      	b.n	8004870 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_SPI_Receive+0x7e>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ac:	e0e0      	b.n	8004870 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2204      	movs	r2, #4
 80046b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046f8:	d908      	bls.n	800470c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	e007      	b.n	800471c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d10f      	bne.n	8004746 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d867      	bhi.n	800483e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800476e:	e030      	b.n	80047d2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d117      	bne.n	80047ae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f103 020c 	add.w	r2, r3, #12
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	7812      	ldrb	r2, [r2, #0]
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80047ac:	e011      	b.n	80047d2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ae:	f7fe f8b7 	bl	8002920 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d803      	bhi.n	80047c6 <HAL_SPI_Receive+0x19c>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_Receive+0x1a2>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047d0:	e04e      	b.n	8004870 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1c8      	bne.n	8004770 <HAL_SPI_Receive+0x146>
 80047de:	e034      	b.n	800484a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d115      	bne.n	800481a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	b292      	uxth	r2, r2
 80047fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004818:	e011      	b.n	800483e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800481a:	f7fe f881 	bl	8002920 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d803      	bhi.n	8004832 <HAL_SPI_Receive+0x208>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d102      	bne.n	8004838 <HAL_SPI_Receive+0x20e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800483c:	e018      	b.n	8004870 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ca      	bne.n	80047e0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fb5a 	bl	8004f08 <SPI_EndRxTransaction>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
 800486c:	e000      	b.n	8004870 <HAL_SPI_Receive+0x246>
  }

error :
 800486e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b08a      	sub	sp, #40	; 0x28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x26>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e1fb      	b.n	8004ca8 <HAL_SPI_TransmitReceive+0x41e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b8:	f7fe f832 	bl	8002920 <HAL_GetTick>
 80048bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048cc:	887b      	ldrh	r3, [r7, #2]
 80048ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048d4:	7efb      	ldrb	r3, [r7, #27]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d00e      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x6e>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e0:	d106      	bne.n	80048f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d102      	bne.n	80048f0 <HAL_SPI_TransmitReceive+0x66>
 80048ea:	7efb      	ldrb	r3, [r7, #27]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d003      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048f6:	e1cd      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_SPI_TransmitReceive+0x80>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_SPI_TransmitReceive+0x80>
 8004904:	887b      	ldrh	r3, [r7, #2]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004910:	e1c0      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b04      	cmp	r3, #4
 800491c:	d003      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2205      	movs	r2, #5
 8004922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	887a      	ldrh	r2, [r7, #2]
 8004936:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	887a      	ldrh	r2, [r7, #2]
 800493e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	887a      	ldrh	r2, [r7, #2]
 8004952:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004968:	d802      	bhi.n	8004970 <HAL_SPI_TransmitReceive+0xe6>
 800496a:	8a3b      	ldrh	r3, [r7, #16]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d908      	bls.n	8004982 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	e007      	b.n	8004992 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d007      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b8:	d97c      	bls.n	8004ab4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x13e>
 80049c2:	8a7b      	ldrh	r3, [r7, #18]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d169      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	1c9a      	adds	r2, r3, #2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ec:	e056      	b.n	8004a9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11b      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x1aa>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0x1aa>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d113      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	881a      	ldrh	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d11c      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x1f2>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a7c:	f7fd ff50 	bl	8002920 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d807      	bhi.n	8004a9c <HAL_SPI_TransmitReceive+0x212>
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d003      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a9a:	e0fb      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1a3      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x164>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d19d      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x164>
 8004ab2:	e0df      	b.n	8004c74 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x23a>
 8004abc:	8a7b      	ldrh	r3, [r7, #18]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	f040 80cb 	bne.w	8004c5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d912      	bls.n	8004af4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	881a      	ldrh	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b02      	subs	r3, #2
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004af2:	e0b2      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1a:	e09e      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d134      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x30a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d02f      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x30a>
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d12c      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d912      	bls.n	8004b6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b02      	subs	r3, #2
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b68:	e012      	b.n	8004b90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	7812      	ldrb	r2, [r2, #0]
 8004b76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d148      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x3aa>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d042      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d923      	bls.n	8004c02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b02      	subs	r3, #2
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d81f      	bhi.n	8004c30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	e016      	b.n	8004c30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f103 020c 	add.w	r2, r3, #12
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c30:	2301      	movs	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c34:	f7fd fe74 	bl	8002920 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d803      	bhi.n	8004c4c <HAL_SPI_TransmitReceive+0x3c2>
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d102      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x3c8>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c58:	e01c      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f47f af5b 	bne.w	8004b1c <HAL_SPI_TransmitReceive+0x292>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f47f af54 	bne.w	8004b1c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f9c1 	bl	8005000 <SPI_EndRxTxTransaction>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
 8004c90:	e000      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3728      	adds	r7, #40	; 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cbe:	b2db      	uxtb	r3, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cdc:	f7fd fe20 	bl	8002920 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cec:	f7fd fe18 	bl	8002920 <HAL_GetTick>
 8004cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	015b      	lsls	r3, r3, #5
 8004cf8:	0d1b      	lsrs	r3, r3, #20
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d02:	e054      	b.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d050      	beq.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d0c:	f7fd fe08 	bl	8002920 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d902      	bls.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d13d      	bne.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3a:	d111      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d004      	beq.n	8004d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d107      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	d10f      	bne.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e017      	b.n	8004dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d19b      	bne.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2000000c 	.word	0x2000000c

08004ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dee:	f7fd fd97 	bl	8002920 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004dfe:	f7fd fd8f 	bl	8002920 <HAL_GetTick>
 8004e02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	00da      	lsls	r2, r3, #3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	0d1b      	lsrs	r3, r3, #20
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e24:	e060      	b.n	8004ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e2c:	d107      	bne.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d050      	beq.n	8004ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e46:	f7fd fd6b 	bl	8002920 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d902      	bls.n	8004e5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13d      	bne.n	8004ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e74:	d111      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7e:	d004      	beq.n	8004e8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e88:	d107      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea2:	d10f      	bne.n	8004ec4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e010      	b.n	8004efa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d196      	bne.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3728      	adds	r7, #40	; 0x28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	2000000c 	.word	0x2000000c

08004f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1c:	d111      	bne.n	8004f42 <SPI_EndRxTransaction+0x3a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f26:	d004      	beq.n	8004f32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f30:	d107      	bne.n	8004f42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4a:	d112      	bne.n	8004f72 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff feb8 	bl	8004ccc <SPI_WaitFlagStateUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d021      	beq.n	8004fa6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e03d      	b.n	8004fee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <SPI_EndRxTransaction+0xf0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <SPI_EndRxTransaction+0xf4>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	0d5b      	lsrs	r3, r3, #21
 8004f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d0f2      	beq.n	8004f88 <SPI_EndRxTransaction+0x80>
 8004fa2:	e000      	b.n	8004fa6 <SPI_EndRxTransaction+0x9e>
        break;
 8004fa4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d11d      	bne.n	8004fec <SPI_EndRxTransaction+0xe4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d004      	beq.n	8004fc4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d113      	bne.n	8004fec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ff03 	bl	8004ddc <SPI_WaitFifoStateUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe0:	f043 0220 	orr.w	r2, r3, #32
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e000      	b.n	8004fee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	165e9f81 	.word	0x165e9f81

08005000 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2200      	movs	r2, #0
 8005014:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff fedf 	bl	8004ddc <SPI_WaitFifoStateUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e046      	b.n	80050c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <SPI_EndRxTxTransaction+0xcc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <SPI_EndRxTxTransaction+0xd0>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0d5b      	lsrs	r3, r3, #21
 8005040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005052:	d112      	bne.n	800507a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fe34 	bl	8004ccc <SPI_WaitFlagStateUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d016      	beq.n	8005098 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e023      	b.n	80050c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3b01      	subs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005090:	2b80      	cmp	r3, #128	; 0x80
 8005092:	d0f2      	beq.n	800507a <SPI_EndRxTxTransaction+0x7a>
 8005094:	e000      	b.n	8005098 <SPI_EndRxTxTransaction+0x98>
        break;
 8005096:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fe99 	bl	8004ddc <SPI_WaitFifoStateUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e000      	b.n	80050c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	165e9f81 	.word	0x165e9f81

080050d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e040      	b.n	8005168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fd fb0e 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fbe6 	bl	80058e4 <UART_SetConfig>
 8005118:	4603      	mov	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e022      	b.n	8005168 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fe3e 	bl	8005dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fec5 	bl	8005ef0 <UART_CheckIdleState>
 8005166:	4603      	mov	r3, r0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005184:	2b20      	cmp	r3, #32
 8005186:	d171      	bne.n	800526c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Transmit+0x24>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e06a      	b.n	800526e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2221      	movs	r2, #33	; 0x21
 80051a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051a6:	f7fd fbbb 	bl	8002920 <HAL_GetTick>
 80051aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d108      	bne.n	80051d8 <HAL_UART_Transmit+0x68>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e003      	b.n	80051e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e0:	e02c      	b.n	800523c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 feb6 	bl	8005f5e <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e038      	b.n	800526e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3302      	adds	r3, #2
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e007      	b.n	800522a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1cc      	bne.n	80051e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	2140      	movs	r1, #64	; 0x40
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fe83 	bl	8005f5e <UART_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e005      	b.n	800526e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b08a      	sub	sp, #40	; 0x28
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	4613      	mov	r3, r2
 8005282:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528a:	2b20      	cmp	r3, #32
 800528c:	d132      	bne.n	80052f4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_Receive_IT+0x24>
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e02b      	b.n	80052f6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	613b      	str	r3, [r7, #16]
   return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	69f9      	ldr	r1, [r7, #28]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fefe 	bl	80060ec <UART_Start_Receive_IT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	e000      	b.n	80052f6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	; 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b0ba      	sub	sp, #232	; 0xe8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005326:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800532a:	f640 030f 	movw	r3, #2063	; 0x80f
 800532e:	4013      	ands	r3, r2
 8005330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d115      	bne.n	8005368 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00f      	beq.n	8005368 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8297 	beq.w	800588c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4798      	blx	r3
      }
      return;
 8005366:	e291      	b.n	800588c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8117 	beq.w	80055a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800537e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005382:	4b85      	ldr	r3, [pc, #532]	; (8005598 <HAL_UART_IRQHandler+0x298>)
 8005384:	4013      	ands	r3, r2
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 810a 	beq.w	80055a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d011      	beq.n	80053bc <HAL_UART_IRQHandler+0xbc>
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00b      	beq.n	80053bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b2:	f043 0201 	orr.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <HAL_UART_IRQHandler+0xec>
 80053c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <HAL_UART_IRQHandler+0x11c>
 80053f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2204      	movs	r2, #4
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005412:	f043 0202 	orr.w	r2, r3, #2
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005438:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2208      	movs	r2, #8
 8005446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800544e:	f043 0208 	orr.w	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005460:	2b00      	cmp	r3, #0
 8005462:	d012      	beq.n	800548a <HAL_UART_IRQHandler+0x18a>
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 81fd 	beq.w	8005890 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d04f      	beq.n	8005582 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fec8 	bl	8006278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d141      	bne.n	800557a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800550c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800552e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800553a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1d9      	bne.n	80054f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	2b00      	cmp	r3, #0
 8005548:	d013      	beq.n	8005572 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	4a13      	ldr	r2, [pc, #76]	; (800559c <HAL_UART_IRQHandler+0x29c>)
 8005550:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005556:	4618      	mov	r0, r3
 8005558:	f7fd fb93 	bl	8002c82 <HAL_DMA_Abort_IT>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d017      	beq.n	8005592 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800556c:	4610      	mov	r0, r2
 800556e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005570:	e00f      	b.n	8005592 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9a0 	bl	80058b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	e00b      	b.n	8005592 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f99c 	bl	80058b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e007      	b.n	8005592 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f998 	bl	80058b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005590:	e17e      	b.n	8005890 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005592:	bf00      	nop
    return;
 8005594:	e17c      	b.n	8005890 <HAL_UART_IRQHandler+0x590>
 8005596:	bf00      	nop
 8005598:	04000120 	.word	0x04000120
 800559c:	08006341 	.word	0x08006341

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	f040 814c 	bne.w	8005842 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8145 	beq.w	8005842 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 813e 	beq.w	8005842 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2210      	movs	r2, #16
 80055cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	f040 80b6 	bne.w	800574a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8150 	beq.w	8005894 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055fe:	429a      	cmp	r2, r3
 8005600:	f080 8148 	bcs.w	8005894 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800560a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005618:	f000 8086 	beq.w	8005728 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800564a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800565e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1da      	bne.n	800561c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3308      	adds	r3, #8
 8005686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800568a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800568e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800569c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e1      	bne.n	8005666 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e3      	bne.n	80056a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f8:	f023 0310 	bic.w	r3, r3, #16
 80056fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800570a:	65bb      	str	r3, [r7, #88]	; 0x58
 800570c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e4      	bne.n	80056e8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005722:	4618      	mov	r0, r3
 8005724:	f7fd fa3d 	bl	8002ba2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800573a:	b29b      	uxth	r3, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	b29b      	uxth	r3, r3
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8c2 	bl	80058cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005748:	e0a4      	b.n	8005894 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005756:	b29b      	uxth	r3, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8096 	beq.w	8005898 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800576c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8091 	beq.w	8005898 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005798:	647b      	str	r3, [r7, #68]	; 0x44
 800579a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800579e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e4      	bne.n	8005776 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	623b      	str	r3, [r7, #32]
   return(result);
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057d0:	633a      	str	r2, [r7, #48]	; 0x30
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e3      	bne.n	80057ac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	60fb      	str	r3, [r7, #12]
   return(result);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f023 0310 	bic.w	r3, r3, #16
 800580c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	617b      	str	r3, [r7, #20]
   return(result);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e4      	bne.n	80057f8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f846 	bl	80058cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005840:	e02a      	b.n	8005898 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00e      	beq.n	800586c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01c      	beq.n	800589c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
    }
    return;
 800586a:	e017      	b.n	800589c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800586c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d012      	beq.n	800589e <HAL_UART_IRQHandler+0x59e>
 8005878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fd71 	bl	800636c <UART_EndTransmit_IT>
    return;
 800588a:	e008      	b.n	800589e <HAL_UART_IRQHandler+0x59e>
      return;
 800588c:	bf00      	nop
 800588e:	e006      	b.n	800589e <HAL_UART_IRQHandler+0x59e>
    return;
 8005890:	bf00      	nop
 8005892:	e004      	b.n	800589e <HAL_UART_IRQHandler+0x59e>
      return;
 8005894:	bf00      	nop
 8005896:	e002      	b.n	800589e <HAL_UART_IRQHandler+0x59e>
      return;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <HAL_UART_IRQHandler+0x59e>
    return;
 800589c:	bf00      	nop
  }

}
 800589e:	37e8      	adds	r7, #232	; 0xe8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4ba6      	ldr	r3, [pc, #664]	; (8005ba8 <UART_SetConfig+0x2c4>)
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	6979      	ldr	r1, [r7, #20]
 8005918:	430b      	orrs	r3, r1
 800591a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a94      	ldr	r2, [pc, #592]	; (8005bac <UART_SetConfig+0x2c8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d120      	bne.n	80059a2 <UART_SetConfig+0xbe>
 8005960:	4b93      	ldr	r3, [pc, #588]	; (8005bb0 <UART_SetConfig+0x2cc>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b03      	cmp	r3, #3
 800596c:	d816      	bhi.n	800599c <UART_SetConfig+0xb8>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0x90>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	08005985 	.word	0x08005985
 8005978:	08005991 	.word	0x08005991
 800597c:	0800598b 	.word	0x0800598b
 8005980:	08005997 	.word	0x08005997
 8005984:	2301      	movs	r3, #1
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e150      	b.n	8005c2c <UART_SetConfig+0x348>
 800598a:	2302      	movs	r3, #2
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e14d      	b.n	8005c2c <UART_SetConfig+0x348>
 8005990:	2304      	movs	r3, #4
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e14a      	b.n	8005c2c <UART_SetConfig+0x348>
 8005996:	2308      	movs	r3, #8
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e147      	b.n	8005c2c <UART_SetConfig+0x348>
 800599c:	2310      	movs	r3, #16
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e144      	b.n	8005c2c <UART_SetConfig+0x348>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a83      	ldr	r2, [pc, #524]	; (8005bb4 <UART_SetConfig+0x2d0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d132      	bne.n	8005a12 <UART_SetConfig+0x12e>
 80059ac:	4b80      	ldr	r3, [pc, #512]	; (8005bb0 <UART_SetConfig+0x2cc>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d828      	bhi.n	8005a0c <UART_SetConfig+0x128>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0xdc>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	08005a0d 	.word	0x08005a0d
 80059cc:	08005a0d 	.word	0x08005a0d
 80059d0:	08005a01 	.word	0x08005a01
 80059d4:	08005a0d 	.word	0x08005a0d
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005a0d 	.word	0x08005a0d
 80059e0:	080059fb 	.word	0x080059fb
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a0d 	.word	0x08005a0d
 80059f0:	08005a07 	.word	0x08005a07
 80059f4:	2300      	movs	r3, #0
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e118      	b.n	8005c2c <UART_SetConfig+0x348>
 80059fa:	2302      	movs	r3, #2
 80059fc:	77fb      	strb	r3, [r7, #31]
 80059fe:	e115      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a00:	2304      	movs	r3, #4
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e112      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a06:	2308      	movs	r3, #8
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e10f      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e10c      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a68      	ldr	r2, [pc, #416]	; (8005bb8 <UART_SetConfig+0x2d4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d120      	bne.n	8005a5e <UART_SetConfig+0x17a>
 8005a1c:	4b64      	ldr	r3, [pc, #400]	; (8005bb0 <UART_SetConfig+0x2cc>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a26:	2b30      	cmp	r3, #48	; 0x30
 8005a28:	d013      	beq.n	8005a52 <UART_SetConfig+0x16e>
 8005a2a:	2b30      	cmp	r3, #48	; 0x30
 8005a2c:	d814      	bhi.n	8005a58 <UART_SetConfig+0x174>
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d009      	beq.n	8005a46 <UART_SetConfig+0x162>
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d810      	bhi.n	8005a58 <UART_SetConfig+0x174>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <UART_SetConfig+0x15c>
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d006      	beq.n	8005a4c <UART_SetConfig+0x168>
 8005a3e:	e00b      	b.n	8005a58 <UART_SetConfig+0x174>
 8005a40:	2300      	movs	r3, #0
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e0f2      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a46:	2302      	movs	r3, #2
 8005a48:	77fb      	strb	r3, [r7, #31]
 8005a4a:	e0ef      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e0ec      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a52:	2308      	movs	r3, #8
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e0e9      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e0e6      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a56      	ldr	r2, [pc, #344]	; (8005bbc <UART_SetConfig+0x2d8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d120      	bne.n	8005aaa <UART_SetConfig+0x1c6>
 8005a68:	4b51      	ldr	r3, [pc, #324]	; (8005bb0 <UART_SetConfig+0x2cc>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a72:	2bc0      	cmp	r3, #192	; 0xc0
 8005a74:	d013      	beq.n	8005a9e <UART_SetConfig+0x1ba>
 8005a76:	2bc0      	cmp	r3, #192	; 0xc0
 8005a78:	d814      	bhi.n	8005aa4 <UART_SetConfig+0x1c0>
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d009      	beq.n	8005a92 <UART_SetConfig+0x1ae>
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d810      	bhi.n	8005aa4 <UART_SetConfig+0x1c0>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <UART_SetConfig+0x1a8>
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d006      	beq.n	8005a98 <UART_SetConfig+0x1b4>
 8005a8a:	e00b      	b.n	8005aa4 <UART_SetConfig+0x1c0>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e0cc      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a92:	2302      	movs	r3, #2
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e0c9      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e0c6      	b.n	8005c2c <UART_SetConfig+0x348>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e0c3      	b.n	8005c2c <UART_SetConfig+0x348>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e0c0      	b.n	8005c2c <UART_SetConfig+0x348>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a44      	ldr	r2, [pc, #272]	; (8005bc0 <UART_SetConfig+0x2dc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d125      	bne.n	8005b00 <UART_SetConfig+0x21c>
 8005ab4:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <UART_SetConfig+0x2cc>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac2:	d017      	beq.n	8005af4 <UART_SetConfig+0x210>
 8005ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac8:	d817      	bhi.n	8005afa <UART_SetConfig+0x216>
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d00b      	beq.n	8005ae8 <UART_SetConfig+0x204>
 8005ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad4:	d811      	bhi.n	8005afa <UART_SetConfig+0x216>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <UART_SetConfig+0x1fe>
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ade:	d006      	beq.n	8005aee <UART_SetConfig+0x20a>
 8005ae0:	e00b      	b.n	8005afa <UART_SetConfig+0x216>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e0a1      	b.n	8005c2c <UART_SetConfig+0x348>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e09e      	b.n	8005c2c <UART_SetConfig+0x348>
 8005aee:	2304      	movs	r3, #4
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e09b      	b.n	8005c2c <UART_SetConfig+0x348>
 8005af4:	2308      	movs	r3, #8
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e098      	b.n	8005c2c <UART_SetConfig+0x348>
 8005afa:	2310      	movs	r3, #16
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e095      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <UART_SetConfig+0x2e0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d125      	bne.n	8005b56 <UART_SetConfig+0x272>
 8005b0a:	4b29      	ldr	r3, [pc, #164]	; (8005bb0 <UART_SetConfig+0x2cc>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b18:	d017      	beq.n	8005b4a <UART_SetConfig+0x266>
 8005b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b1e:	d817      	bhi.n	8005b50 <UART_SetConfig+0x26c>
 8005b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b24:	d00b      	beq.n	8005b3e <UART_SetConfig+0x25a>
 8005b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2a:	d811      	bhi.n	8005b50 <UART_SetConfig+0x26c>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <UART_SetConfig+0x254>
 8005b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b34:	d006      	beq.n	8005b44 <UART_SetConfig+0x260>
 8005b36:	e00b      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e076      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e073      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b44:	2304      	movs	r3, #4
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e070      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e06d      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b50:	2310      	movs	r3, #16
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e06a      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	; (8005bc8 <UART_SetConfig+0x2e4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d138      	bne.n	8005bd2 <UART_SetConfig+0x2ee>
 8005b60:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <UART_SetConfig+0x2cc>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6e:	d017      	beq.n	8005ba0 <UART_SetConfig+0x2bc>
 8005b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b74:	d82a      	bhi.n	8005bcc <UART_SetConfig+0x2e8>
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7a:	d00b      	beq.n	8005b94 <UART_SetConfig+0x2b0>
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b80:	d824      	bhi.n	8005bcc <UART_SetConfig+0x2e8>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <UART_SetConfig+0x2aa>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	d006      	beq.n	8005b9a <UART_SetConfig+0x2b6>
 8005b8c:	e01e      	b.n	8005bcc <UART_SetConfig+0x2e8>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e04b      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b94:	2302      	movs	r3, #2
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e048      	b.n	8005c2c <UART_SetConfig+0x348>
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e045      	b.n	8005c2c <UART_SetConfig+0x348>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e042      	b.n	8005c2c <UART_SetConfig+0x348>
 8005ba6:	bf00      	nop
 8005ba8:	efff69f3 	.word	0xefff69f3
 8005bac:	40011000 	.word	0x40011000
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40004400 	.word	0x40004400
 8005bb8:	40004800 	.word	0x40004800
 8005bbc:	40004c00 	.word	0x40004c00
 8005bc0:	40005000 	.word	0x40005000
 8005bc4:	40011400 	.word	0x40011400
 8005bc8:	40007800 	.word	0x40007800
 8005bcc:	2310      	movs	r3, #16
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e02c      	b.n	8005c2c <UART_SetConfig+0x348>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a72      	ldr	r2, [pc, #456]	; (8005da0 <UART_SetConfig+0x4bc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d125      	bne.n	8005c28 <UART_SetConfig+0x344>
 8005bdc:	4b71      	ldr	r3, [pc, #452]	; (8005da4 <UART_SetConfig+0x4c0>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005be6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bea:	d017      	beq.n	8005c1c <UART_SetConfig+0x338>
 8005bec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bf0:	d817      	bhi.n	8005c22 <UART_SetConfig+0x33e>
 8005bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf6:	d00b      	beq.n	8005c10 <UART_SetConfig+0x32c>
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d811      	bhi.n	8005c22 <UART_SetConfig+0x33e>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <UART_SetConfig+0x326>
 8005c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c06:	d006      	beq.n	8005c16 <UART_SetConfig+0x332>
 8005c08:	e00b      	b.n	8005c22 <UART_SetConfig+0x33e>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e00d      	b.n	8005c2c <UART_SetConfig+0x348>
 8005c10:	2302      	movs	r3, #2
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e00a      	b.n	8005c2c <UART_SetConfig+0x348>
 8005c16:	2304      	movs	r3, #4
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e007      	b.n	8005c2c <UART_SetConfig+0x348>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e004      	b.n	8005c2c <UART_SetConfig+0x348>
 8005c22:	2310      	movs	r3, #16
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e001      	b.n	8005c2c <UART_SetConfig+0x348>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c34:	d15b      	bne.n	8005cee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d828      	bhi.n	8005c8e <UART_SetConfig+0x3aa>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x360>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	08005c8f 	.word	0x08005c8f
 8005c54:	08005c7f 	.word	0x08005c7f
 8005c58:	08005c8f 	.word	0x08005c8f
 8005c5c:	08005c8f 	.word	0x08005c8f
 8005c60:	08005c8f 	.word	0x08005c8f
 8005c64:	08005c87 	.word	0x08005c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fd feae 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8005c6c:	61b8      	str	r0, [r7, #24]
        break;
 8005c6e:	e013      	b.n	8005c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c70:	f7fd febe 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005c74:	61b8      	str	r0, [r7, #24]
        break;
 8005c76:	e00f      	b.n	8005c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c78:	4b4b      	ldr	r3, [pc, #300]	; (8005da8 <UART_SetConfig+0x4c4>)
 8005c7a:	61bb      	str	r3, [r7, #24]
        break;
 8005c7c:	e00c      	b.n	8005c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7e:	f7fd fd91 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005c82:	61b8      	str	r0, [r7, #24]
        break;
 8005c84:	e008      	b.n	8005c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8a:	61bb      	str	r3, [r7, #24]
        break;
 8005c8c:	e004      	b.n	8005c98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	77bb      	strb	r3, [r7, #30]
        break;
 8005c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d074      	beq.n	8005d88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	005a      	lsls	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	085b      	lsrs	r3, r3, #1
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d916      	bls.n	8005ce8 <UART_SetConfig+0x404>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc0:	d212      	bcs.n	8005ce8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f023 030f 	bic.w	r3, r3, #15
 8005cca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	89fb      	ldrh	r3, [r7, #14]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	89fa      	ldrh	r2, [r7, #14]
 8005ce4:	60da      	str	r2, [r3, #12]
 8005ce6:	e04f      	b.n	8005d88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77bb      	strb	r3, [r7, #30]
 8005cec:	e04c      	b.n	8005d88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cee:	7ffb      	ldrb	r3, [r7, #31]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d828      	bhi.n	8005d46 <UART_SetConfig+0x462>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x418>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d47 	.word	0x08005d47
 8005d0c:	08005d37 	.word	0x08005d37
 8005d10:	08005d47 	.word	0x08005d47
 8005d14:	08005d47 	.word	0x08005d47
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d3f 	.word	0x08005d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fd fe52 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8005d24:	61b8      	str	r0, [r7, #24]
        break;
 8005d26:	e013      	b.n	8005d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fd fe62 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005d2c:	61b8      	str	r0, [r7, #24]
        break;
 8005d2e:	e00f      	b.n	8005d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <UART_SetConfig+0x4c4>)
 8005d32:	61bb      	str	r3, [r7, #24]
        break;
 8005d34:	e00c      	b.n	8005d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d36:	f7fd fd35 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005d3a:	61b8      	str	r0, [r7, #24]
        break;
 8005d3c:	e008      	b.n	8005d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d42:	61bb      	str	r3, [r7, #24]
        break;
 8005d44:	e004      	b.n	8005d50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d018      	beq.n	8005d88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	085a      	lsrs	r2, r3, #1
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	441a      	add	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b0f      	cmp	r3, #15
 8005d6e:	d909      	bls.n	8005d84 <UART_SetConfig+0x4a0>
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d76:	d205      	bcs.n	8005d84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e001      	b.n	8005d88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40007c00 	.word	0x40007c00
 8005da4:	40023800 	.word	0x40023800
 8005da8:	00f42400 	.word	0x00f42400

08005dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01a      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eaa:	d10a      	bne.n	8005ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f00:	f7fc fd0e 	bl	8002920 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d10e      	bne.n	8005f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f81b 	bl	8005f5e <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e011      	b.n	8005f56 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b09c      	sub	sp, #112	; 0x70
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6e:	e0a7      	b.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	f000 80a3 	beq.w	80060c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fc fcd1 	bl	8002920 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d13f      	bne.n	8006010 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fe2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fe4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e5      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e068      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d050      	beq.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602c:	d148      	bne.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006036:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800604c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
 8006058:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800605c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e6      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	613b      	str	r3, [r7, #16]
   return(result);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	66bb      	str	r3, [r7, #104]	; 0x68
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800608a:	623a      	str	r2, [r7, #32]
 800608c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	69f9      	ldr	r1, [r7, #28]
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	61bb      	str	r3, [r7, #24]
   return(result);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e010      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4013      	ands	r3, r2
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	429a      	cmp	r2, r3
 80060dc:	f43f af48 	beq.w	8005f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3770      	adds	r7, #112	; 0x70
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b097      	sub	sp, #92	; 0x5c
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611e:	d10e      	bne.n	800613e <UART_Start_Receive_IT+0x52>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <UART_Start_Receive_IT+0x48>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800612e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006132:	e02d      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800613c:	e028      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <UART_Start_Receive_IT+0x76>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <UART_Start_Receive_IT+0x6c>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	22ff      	movs	r2, #255	; 0xff
 8006152:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006156:	e01b      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	227f      	movs	r2, #127	; 0x7f
 800615c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006160:	e016      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616a:	d10d      	bne.n	8006188 <UART_Start_Receive_IT+0x9c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <UART_Start_Receive_IT+0x92>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	227f      	movs	r2, #127	; 0x7f
 8006178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800617c:	e008      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	223f      	movs	r2, #63	; 0x3f
 8006182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006186:	e003      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2222      	movs	r2, #34	; 0x22
 800619c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	657b      	str	r3, [r7, #84]	; 0x54
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80061c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e5      	bne.n	80061a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061dc:	d107      	bne.n	80061ee <UART_Start_Receive_IT+0x102>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <UART_Start_Receive_IT+0x184>)
 80061ea:	669a      	str	r2, [r3, #104]	; 0x68
 80061ec:	e002      	b.n	80061f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <UART_Start_Receive_IT+0x188>)
 80061f2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d019      	beq.n	8006230 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e6      	bne.n	80061fc <UART_Start_Receive_IT+0x110>
 800622e:	e018      	b.n	8006262 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f043 0320 	orr.w	r3, r3, #32
 8006244:	653b      	str	r3, [r7, #80]	; 0x50
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624e:	623b      	str	r3, [r7, #32]
 8006250:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	69f9      	ldr	r1, [r7, #28]
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	61bb      	str	r3, [r7, #24]
   return(result);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e6      	bne.n	8006230 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	375c      	adds	r7, #92	; 0x5c
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	08006527 	.word	0x08006527
 8006274:	080063c1 	.word	0x080063c1

08006278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b095      	sub	sp, #84	; 0x54
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
 80062a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e6      	bne.n	8006280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d118      	bne.n	8006320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0310 	bic.w	r3, r3, #16
 8006302:	647b      	str	r3, [r7, #68]	; 0x44
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6979      	ldr	r1, [r7, #20]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	613b      	str	r3, [r7, #16]
   return(result);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e6      	bne.n	80062ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006334:	bf00      	nop
 8006336:	3754      	adds	r7, #84	; 0x54
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff faaa 	bl	80058b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60bb      	str	r3, [r7, #8]
   return(result);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e6      	bne.n	8006374 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fa76 	bl	80058a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b8:	bf00      	nop
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b096      	sub	sp, #88	; 0x58
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d8:	2b22      	cmp	r3, #34	; 0x22
 80063da:	f040 8098 	bne.w	800650e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80063ec:	b2d9      	uxtb	r1, r3
 80063ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	400a      	ands	r2, r1
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d17b      	bne.n	800651e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643a:	653b      	str	r3, [r7, #80]	; 0x50
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800644a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e6      	bne.n	8006426 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	623b      	str	r3, [r7, #32]
   return(result);
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006478:	633a      	str	r2, [r7, #48]	; 0x30
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800647e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e5      	bne.n	8006458 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d12e      	bne.n	8006506 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d103      	bne.n	80064f6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff f9e4 	bl	80058cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006504:	e00b      	b.n	800651e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb fef8 	bl	80022fc <HAL_UART_RxCpltCallback>
}
 800650c:	e007      	b.n	800651e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0208 	orr.w	r2, r2, #8
 800651c:	619a      	str	r2, [r3, #24]
}
 800651e:	bf00      	nop
 8006520:	3758      	adds	r7, #88	; 0x58
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b096      	sub	sp, #88	; 0x58
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800653e:	2b22      	cmp	r3, #34	; 0x22
 8006540:	f040 8098 	bne.w	8006674 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006554:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006558:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800655c:	4013      	ands	r3, r2
 800655e:	b29a      	uxth	r2, r3
 8006560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006562:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d17b      	bne.n	8006684 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
 80065ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e6      	bne.n	800658c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660a:	2b01      	cmp	r3, #1
 800660c:	d12e      	bne.n	800666c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	60bb      	str	r3, [r7, #8]
   return(result);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f023 0310 	bic.w	r3, r3, #16
 8006628:	647b      	str	r3, [r7, #68]	; 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	613b      	str	r3, [r7, #16]
   return(result);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e6      	bne.n	8006614 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b10      	cmp	r3, #16
 8006652:	d103      	bne.n	800665c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff f931 	bl	80058cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800666a:	e00b      	b.n	8006684 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7fb fe45 	bl	80022fc <HAL_UART_RxCpltCallback>
}
 8006672:	e007      	b.n	8006684 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0208 	orr.w	r2, r2, #8
 8006682:	619a      	str	r2, [r3, #24]
}
 8006684:	bf00      	nop
 8006686:	3758      	adds	r7, #88	; 0x58
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <__errno>:
 800668c:	4b01      	ldr	r3, [pc, #4]	; (8006694 <__errno+0x8>)
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000018 	.word	0x20000018

08006698 <__libc_init_array>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4d0d      	ldr	r5, [pc, #52]	; (80066d0 <__libc_init_array+0x38>)
 800669c:	4c0d      	ldr	r4, [pc, #52]	; (80066d4 <__libc_init_array+0x3c>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	2600      	movs	r6, #0
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	d109      	bne.n	80066bc <__libc_init_array+0x24>
 80066a8:	4d0b      	ldr	r5, [pc, #44]	; (80066d8 <__libc_init_array+0x40>)
 80066aa:	4c0c      	ldr	r4, [pc, #48]	; (80066dc <__libc_init_array+0x44>)
 80066ac:	f002 ff4e 	bl	800954c <_init>
 80066b0:	1b64      	subs	r4, r4, r5
 80066b2:	10a4      	asrs	r4, r4, #2
 80066b4:	2600      	movs	r6, #0
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	d105      	bne.n	80066c6 <__libc_init_array+0x2e>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c0:	4798      	blx	r3
 80066c2:	3601      	adds	r6, #1
 80066c4:	e7ee      	b.n	80066a4 <__libc_init_array+0xc>
 80066c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ca:	4798      	blx	r3
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7f2      	b.n	80066b6 <__libc_init_array+0x1e>
 80066d0:	08009bac 	.word	0x08009bac
 80066d4:	08009bac 	.word	0x08009bac
 80066d8:	08009bac 	.word	0x08009bac
 80066dc:	08009bb0 	.word	0x08009bb0

080066e0 <malloc>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <malloc+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f000 b89d 	b.w	8006824 <_malloc_r>
 80066ea:	bf00      	nop
 80066ec:	20000018 	.word	0x20000018

080066f0 <free>:
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <free+0xc>)
 80066f2:	4601      	mov	r1, r0
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f000 b829 	b.w	800674c <_free_r>
 80066fa:	bf00      	nop
 80066fc:	20000018 	.word	0x20000018

08006700 <memcmp>:
 8006700:	b510      	push	{r4, lr}
 8006702:	3901      	subs	r1, #1
 8006704:	4402      	add	r2, r0
 8006706:	4290      	cmp	r0, r2
 8006708:	d101      	bne.n	800670e <memcmp+0xe>
 800670a:	2000      	movs	r0, #0
 800670c:	e005      	b.n	800671a <memcmp+0x1a>
 800670e:	7803      	ldrb	r3, [r0, #0]
 8006710:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006714:	42a3      	cmp	r3, r4
 8006716:	d001      	beq.n	800671c <memcmp+0x1c>
 8006718:	1b18      	subs	r0, r3, r4
 800671a:	bd10      	pop	{r4, pc}
 800671c:	3001      	adds	r0, #1
 800671e:	e7f2      	b.n	8006706 <memcmp+0x6>

08006720 <memcpy>:
 8006720:	440a      	add	r2, r1
 8006722:	4291      	cmp	r1, r2
 8006724:	f100 33ff 	add.w	r3, r0, #4294967295
 8006728:	d100      	bne.n	800672c <memcpy+0xc>
 800672a:	4770      	bx	lr
 800672c:	b510      	push	{r4, lr}
 800672e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006736:	4291      	cmp	r1, r2
 8006738:	d1f9      	bne.n	800672e <memcpy+0xe>
 800673a:	bd10      	pop	{r4, pc}

0800673c <memset>:
 800673c:	4402      	add	r2, r0
 800673e:	4603      	mov	r3, r0
 8006740:	4293      	cmp	r3, r2
 8006742:	d100      	bne.n	8006746 <memset+0xa>
 8006744:	4770      	bx	lr
 8006746:	f803 1b01 	strb.w	r1, [r3], #1
 800674a:	e7f9      	b.n	8006740 <memset+0x4>

0800674c <_free_r>:
 800674c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800674e:	2900      	cmp	r1, #0
 8006750:	d044      	beq.n	80067dc <_free_r+0x90>
 8006752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006756:	9001      	str	r0, [sp, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f1a1 0404 	sub.w	r4, r1, #4
 800675e:	bfb8      	it	lt
 8006760:	18e4      	addlt	r4, r4, r3
 8006762:	f001 fc1f 	bl	8007fa4 <__malloc_lock>
 8006766:	4a1e      	ldr	r2, [pc, #120]	; (80067e0 <_free_r+0x94>)
 8006768:	9801      	ldr	r0, [sp, #4]
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	b933      	cbnz	r3, 800677c <_free_r+0x30>
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	b003      	add	sp, #12
 8006774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006778:	f001 bc1a 	b.w	8007fb0 <__malloc_unlock>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d908      	bls.n	8006792 <_free_r+0x46>
 8006780:	6825      	ldr	r5, [r4, #0]
 8006782:	1961      	adds	r1, r4, r5
 8006784:	428b      	cmp	r3, r1
 8006786:	bf01      	itttt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	1949      	addeq	r1, r1, r5
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	e7ed      	b.n	800676e <_free_r+0x22>
 8006792:	461a      	mov	r2, r3
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b10b      	cbz	r3, 800679c <_free_r+0x50>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x46>
 800679c:	6811      	ldr	r1, [r2, #0]
 800679e:	1855      	adds	r5, r2, r1
 80067a0:	42a5      	cmp	r5, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x70>
 80067a4:	6824      	ldr	r4, [r4, #0]
 80067a6:	4421      	add	r1, r4
 80067a8:	1854      	adds	r4, r2, r1
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	d1e0      	bne.n	8006772 <_free_r+0x26>
 80067b0:	681c      	ldr	r4, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	6053      	str	r3, [r2, #4]
 80067b6:	4421      	add	r1, r4
 80067b8:	6011      	str	r1, [r2, #0]
 80067ba:	e7da      	b.n	8006772 <_free_r+0x26>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x78>
 80067be:	230c      	movs	r3, #12
 80067c0:	6003      	str	r3, [r0, #0]
 80067c2:	e7d6      	b.n	8006772 <_free_r+0x26>
 80067c4:	6825      	ldr	r5, [r4, #0]
 80067c6:	1961      	adds	r1, r4, r5
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf04      	itt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	6063      	str	r3, [r4, #4]
 80067d2:	bf04      	itt	eq
 80067d4:	1949      	addeq	r1, r1, r5
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	6054      	str	r4, [r2, #4]
 80067da:	e7ca      	b.n	8006772 <_free_r+0x26>
 80067dc:	b003      	add	sp, #12
 80067de:	bd30      	pop	{r4, r5, pc}
 80067e0:	200003a8 	.word	0x200003a8

080067e4 <sbrk_aligned>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4e0e      	ldr	r6, [pc, #56]	; (8006820 <sbrk_aligned+0x3c>)
 80067e8:	460c      	mov	r4, r1
 80067ea:	6831      	ldr	r1, [r6, #0]
 80067ec:	4605      	mov	r5, r0
 80067ee:	b911      	cbnz	r1, 80067f6 <sbrk_aligned+0x12>
 80067f0:	f000 fcf6 	bl	80071e0 <_sbrk_r>
 80067f4:	6030      	str	r0, [r6, #0]
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 fcf1 	bl	80071e0 <_sbrk_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d00a      	beq.n	8006818 <sbrk_aligned+0x34>
 8006802:	1cc4      	adds	r4, r0, #3
 8006804:	f024 0403 	bic.w	r4, r4, #3
 8006808:	42a0      	cmp	r0, r4
 800680a:	d007      	beq.n	800681c <sbrk_aligned+0x38>
 800680c:	1a21      	subs	r1, r4, r0
 800680e:	4628      	mov	r0, r5
 8006810:	f000 fce6 	bl	80071e0 <_sbrk_r>
 8006814:	3001      	adds	r0, #1
 8006816:	d101      	bne.n	800681c <sbrk_aligned+0x38>
 8006818:	f04f 34ff 	mov.w	r4, #4294967295
 800681c:	4620      	mov	r0, r4
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	200003ac 	.word	0x200003ac

08006824 <_malloc_r>:
 8006824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006828:	1ccd      	adds	r5, r1, #3
 800682a:	f025 0503 	bic.w	r5, r5, #3
 800682e:	3508      	adds	r5, #8
 8006830:	2d0c      	cmp	r5, #12
 8006832:	bf38      	it	cc
 8006834:	250c      	movcc	r5, #12
 8006836:	2d00      	cmp	r5, #0
 8006838:	4607      	mov	r7, r0
 800683a:	db01      	blt.n	8006840 <_malloc_r+0x1c>
 800683c:	42a9      	cmp	r1, r5
 800683e:	d905      	bls.n	800684c <_malloc_r+0x28>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	2600      	movs	r6, #0
 8006846:	4630      	mov	r0, r6
 8006848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800684c:	4e2e      	ldr	r6, [pc, #184]	; (8006908 <_malloc_r+0xe4>)
 800684e:	f001 fba9 	bl	8007fa4 <__malloc_lock>
 8006852:	6833      	ldr	r3, [r6, #0]
 8006854:	461c      	mov	r4, r3
 8006856:	bb34      	cbnz	r4, 80068a6 <_malloc_r+0x82>
 8006858:	4629      	mov	r1, r5
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ffc2 	bl	80067e4 <sbrk_aligned>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	4604      	mov	r4, r0
 8006864:	d14d      	bne.n	8006902 <_malloc_r+0xde>
 8006866:	6834      	ldr	r4, [r6, #0]
 8006868:	4626      	mov	r6, r4
 800686a:	2e00      	cmp	r6, #0
 800686c:	d140      	bne.n	80068f0 <_malloc_r+0xcc>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	4631      	mov	r1, r6
 8006872:	4638      	mov	r0, r7
 8006874:	eb04 0803 	add.w	r8, r4, r3
 8006878:	f000 fcb2 	bl	80071e0 <_sbrk_r>
 800687c:	4580      	cmp	r8, r0
 800687e:	d13a      	bne.n	80068f6 <_malloc_r+0xd2>
 8006880:	6821      	ldr	r1, [r4, #0]
 8006882:	3503      	adds	r5, #3
 8006884:	1a6d      	subs	r5, r5, r1
 8006886:	f025 0503 	bic.w	r5, r5, #3
 800688a:	3508      	adds	r5, #8
 800688c:	2d0c      	cmp	r5, #12
 800688e:	bf38      	it	cc
 8006890:	250c      	movcc	r5, #12
 8006892:	4629      	mov	r1, r5
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff ffa5 	bl	80067e4 <sbrk_aligned>
 800689a:	3001      	adds	r0, #1
 800689c:	d02b      	beq.n	80068f6 <_malloc_r+0xd2>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	442b      	add	r3, r5
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	e00e      	b.n	80068c4 <_malloc_r+0xa0>
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	1b52      	subs	r2, r2, r5
 80068aa:	d41e      	bmi.n	80068ea <_malloc_r+0xc6>
 80068ac:	2a0b      	cmp	r2, #11
 80068ae:	d916      	bls.n	80068de <_malloc_r+0xba>
 80068b0:	1961      	adds	r1, r4, r5
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	6025      	str	r5, [r4, #0]
 80068b6:	bf18      	it	ne
 80068b8:	6059      	strne	r1, [r3, #4]
 80068ba:	6863      	ldr	r3, [r4, #4]
 80068bc:	bf08      	it	eq
 80068be:	6031      	streq	r1, [r6, #0]
 80068c0:	5162      	str	r2, [r4, r5]
 80068c2:	604b      	str	r3, [r1, #4]
 80068c4:	4638      	mov	r0, r7
 80068c6:	f104 060b 	add.w	r6, r4, #11
 80068ca:	f001 fb71 	bl	8007fb0 <__malloc_unlock>
 80068ce:	f026 0607 	bic.w	r6, r6, #7
 80068d2:	1d23      	adds	r3, r4, #4
 80068d4:	1af2      	subs	r2, r6, r3
 80068d6:	d0b6      	beq.n	8006846 <_malloc_r+0x22>
 80068d8:	1b9b      	subs	r3, r3, r6
 80068da:	50a3      	str	r3, [r4, r2]
 80068dc:	e7b3      	b.n	8006846 <_malloc_r+0x22>
 80068de:	6862      	ldr	r2, [r4, #4]
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	bf0c      	ite	eq
 80068e4:	6032      	streq	r2, [r6, #0]
 80068e6:	605a      	strne	r2, [r3, #4]
 80068e8:	e7ec      	b.n	80068c4 <_malloc_r+0xa0>
 80068ea:	4623      	mov	r3, r4
 80068ec:	6864      	ldr	r4, [r4, #4]
 80068ee:	e7b2      	b.n	8006856 <_malloc_r+0x32>
 80068f0:	4634      	mov	r4, r6
 80068f2:	6876      	ldr	r6, [r6, #4]
 80068f4:	e7b9      	b.n	800686a <_malloc_r+0x46>
 80068f6:	230c      	movs	r3, #12
 80068f8:	603b      	str	r3, [r7, #0]
 80068fa:	4638      	mov	r0, r7
 80068fc:	f001 fb58 	bl	8007fb0 <__malloc_unlock>
 8006900:	e7a1      	b.n	8006846 <_malloc_r+0x22>
 8006902:	6025      	str	r5, [r4, #0]
 8006904:	e7de      	b.n	80068c4 <_malloc_r+0xa0>
 8006906:	bf00      	nop
 8006908:	200003a8 	.word	0x200003a8

0800690c <__cvt>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	ec55 4b10 	vmov	r4, r5, d0
 8006914:	2d00      	cmp	r5, #0
 8006916:	460e      	mov	r6, r1
 8006918:	4619      	mov	r1, r3
 800691a:	462b      	mov	r3, r5
 800691c:	bfbb      	ittet	lt
 800691e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006922:	461d      	movlt	r5, r3
 8006924:	2300      	movge	r3, #0
 8006926:	232d      	movlt	r3, #45	; 0x2d
 8006928:	700b      	strb	r3, [r1, #0]
 800692a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800692c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006930:	4691      	mov	r9, r2
 8006932:	f023 0820 	bic.w	r8, r3, #32
 8006936:	bfbc      	itt	lt
 8006938:	4622      	movlt	r2, r4
 800693a:	4614      	movlt	r4, r2
 800693c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006940:	d005      	beq.n	800694e <__cvt+0x42>
 8006942:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006946:	d100      	bne.n	800694a <__cvt+0x3e>
 8006948:	3601      	adds	r6, #1
 800694a:	2102      	movs	r1, #2
 800694c:	e000      	b.n	8006950 <__cvt+0x44>
 800694e:	2103      	movs	r1, #3
 8006950:	ab03      	add	r3, sp, #12
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	ab02      	add	r3, sp, #8
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	ec45 4b10 	vmov	d0, r4, r5
 800695c:	4653      	mov	r3, sl
 800695e:	4632      	mov	r2, r6
 8006960:	f000 fd2e 	bl	80073c0 <_dtoa_r>
 8006964:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006968:	4607      	mov	r7, r0
 800696a:	d102      	bne.n	8006972 <__cvt+0x66>
 800696c:	f019 0f01 	tst.w	r9, #1
 8006970:	d022      	beq.n	80069b8 <__cvt+0xac>
 8006972:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006976:	eb07 0906 	add.w	r9, r7, r6
 800697a:	d110      	bne.n	800699e <__cvt+0x92>
 800697c:	783b      	ldrb	r3, [r7, #0]
 800697e:	2b30      	cmp	r3, #48	; 0x30
 8006980:	d10a      	bne.n	8006998 <__cvt+0x8c>
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7fa f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800698e:	b918      	cbnz	r0, 8006998 <__cvt+0x8c>
 8006990:	f1c6 0601 	rsb	r6, r6, #1
 8006994:	f8ca 6000 	str.w	r6, [sl]
 8006998:	f8da 3000 	ldr.w	r3, [sl]
 800699c:	4499      	add	r9, r3
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7fa f8af 	bl	8000b08 <__aeabi_dcmpeq>
 80069aa:	b108      	cbz	r0, 80069b0 <__cvt+0xa4>
 80069ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80069b0:	2230      	movs	r2, #48	; 0x30
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	454b      	cmp	r3, r9
 80069b6:	d307      	bcc.n	80069c8 <__cvt+0xbc>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069bc:	1bdb      	subs	r3, r3, r7
 80069be:	4638      	mov	r0, r7
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	b004      	add	sp, #16
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	9103      	str	r1, [sp, #12]
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e7f0      	b.n	80069b2 <__cvt+0xa6>

080069d0 <__exponent>:
 80069d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069d2:	4603      	mov	r3, r0
 80069d4:	2900      	cmp	r1, #0
 80069d6:	bfb8      	it	lt
 80069d8:	4249      	neglt	r1, r1
 80069da:	f803 2b02 	strb.w	r2, [r3], #2
 80069de:	bfb4      	ite	lt
 80069e0:	222d      	movlt	r2, #45	; 0x2d
 80069e2:	222b      	movge	r2, #43	; 0x2b
 80069e4:	2909      	cmp	r1, #9
 80069e6:	7042      	strb	r2, [r0, #1]
 80069e8:	dd2a      	ble.n	8006a40 <__exponent+0x70>
 80069ea:	f10d 0407 	add.w	r4, sp, #7
 80069ee:	46a4      	mov	ip, r4
 80069f0:	270a      	movs	r7, #10
 80069f2:	46a6      	mov	lr, r4
 80069f4:	460a      	mov	r2, r1
 80069f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80069fa:	fb07 1516 	mls	r5, r7, r6, r1
 80069fe:	3530      	adds	r5, #48	; 0x30
 8006a00:	2a63      	cmp	r2, #99	; 0x63
 8006a02:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	dcf1      	bgt.n	80069f2 <__exponent+0x22>
 8006a0e:	3130      	adds	r1, #48	; 0x30
 8006a10:	f1ae 0502 	sub.w	r5, lr, #2
 8006a14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a18:	1c44      	adds	r4, r0, #1
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4561      	cmp	r1, ip
 8006a1e:	d30a      	bcc.n	8006a36 <__exponent+0x66>
 8006a20:	f10d 0209 	add.w	r2, sp, #9
 8006a24:	eba2 020e 	sub.w	r2, r2, lr
 8006a28:	4565      	cmp	r5, ip
 8006a2a:	bf88      	it	hi
 8006a2c:	2200      	movhi	r2, #0
 8006a2e:	4413      	add	r3, r2
 8006a30:	1a18      	subs	r0, r3, r0
 8006a32:	b003      	add	sp, #12
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a3e:	e7ed      	b.n	8006a1c <__exponent+0x4c>
 8006a40:	2330      	movs	r3, #48	; 0x30
 8006a42:	3130      	adds	r1, #48	; 0x30
 8006a44:	7083      	strb	r3, [r0, #2]
 8006a46:	70c1      	strb	r1, [r0, #3]
 8006a48:	1d03      	adds	r3, r0, #4
 8006a4a:	e7f1      	b.n	8006a30 <__exponent+0x60>

08006a4c <_printf_float>:
 8006a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a50:	ed2d 8b02 	vpush	{d8}
 8006a54:	b08d      	sub	sp, #52	; 0x34
 8006a56:	460c      	mov	r4, r1
 8006a58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	461f      	mov	r7, r3
 8006a60:	4605      	mov	r5, r0
 8006a62:	f001 fa9b 	bl	8007f9c <_localeconv_r>
 8006a66:	f8d0 a000 	ldr.w	sl, [r0]
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	f7f9 fbd0 	bl	8000210 <strlen>
 8006a70:	2300      	movs	r3, #0
 8006a72:	930a      	str	r3, [sp, #40]	; 0x28
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	9305      	str	r3, [sp, #20]
 8006a78:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a80:	3307      	adds	r3, #7
 8006a82:	f023 0307 	bic.w	r3, r3, #7
 8006a86:	f103 0208 	add.w	r2, r3, #8
 8006a8a:	f8c8 2000 	str.w	r2, [r8]
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a9e:	9307      	str	r3, [sp, #28]
 8006aa0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aa4:	ee08 0a10 	vmov	s16, r0
 8006aa8:	4b9f      	ldr	r3, [pc, #636]	; (8006d28 <_printf_float+0x2dc>)
 8006aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aae:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab2:	f7fa f85b 	bl	8000b6c <__aeabi_dcmpun>
 8006ab6:	bb88      	cbnz	r0, 8006b1c <_printf_float+0xd0>
 8006ab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006abc:	4b9a      	ldr	r3, [pc, #616]	; (8006d28 <_printf_float+0x2dc>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	f7fa f835 	bl	8000b30 <__aeabi_dcmple>
 8006ac6:	bb48      	cbnz	r0, 8006b1c <_printf_float+0xd0>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	4640      	mov	r0, r8
 8006ace:	4649      	mov	r1, r9
 8006ad0:	f7fa f824 	bl	8000b1c <__aeabi_dcmplt>
 8006ad4:	b110      	cbz	r0, 8006adc <_printf_float+0x90>
 8006ad6:	232d      	movs	r3, #45	; 0x2d
 8006ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006adc:	4b93      	ldr	r3, [pc, #588]	; (8006d2c <_printf_float+0x2e0>)
 8006ade:	4894      	ldr	r0, [pc, #592]	; (8006d30 <_printf_float+0x2e4>)
 8006ae0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ae4:	bf94      	ite	ls
 8006ae6:	4698      	movls	r8, r3
 8006ae8:	4680      	movhi	r8, r0
 8006aea:	2303      	movs	r3, #3
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	9b05      	ldr	r3, [sp, #20]
 8006af0:	f023 0204 	bic.w	r2, r3, #4
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	9700      	str	r7, [sp, #0]
 8006afc:	4633      	mov	r3, r6
 8006afe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b00:	4621      	mov	r1, r4
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f9d8 	bl	8006eb8 <_printf_common>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f040 8090 	bne.w	8006c2e <_printf_float+0x1e2>
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b12:	b00d      	add	sp, #52	; 0x34
 8006b14:	ecbd 8b02 	vpop	{d8}
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7fa f822 	bl	8000b6c <__aeabi_dcmpun>
 8006b28:	b140      	cbz	r0, 8006b3c <_printf_float+0xf0>
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bfbc      	itt	lt
 8006b30:	232d      	movlt	r3, #45	; 0x2d
 8006b32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b36:	487f      	ldr	r0, [pc, #508]	; (8006d34 <_printf_float+0x2e8>)
 8006b38:	4b7f      	ldr	r3, [pc, #508]	; (8006d38 <_printf_float+0x2ec>)
 8006b3a:	e7d1      	b.n	8006ae0 <_printf_float+0x94>
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b42:	9206      	str	r2, [sp, #24]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	d13f      	bne.n	8006bc8 <_printf_float+0x17c>
 8006b48:	2306      	movs	r3, #6
 8006b4a:	6063      	str	r3, [r4, #4]
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	6861      	ldr	r1, [r4, #4]
 8006b50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b54:	2300      	movs	r3, #0
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	ab0a      	add	r3, sp, #40	; 0x28
 8006b5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b5e:	ab09      	add	r3, sp, #36	; 0x24
 8006b60:	ec49 8b10 	vmov	d0, r8, r9
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f7ff fecd 	bl	800690c <__cvt>
 8006b72:	9b06      	ldr	r3, [sp, #24]
 8006b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b76:	2b47      	cmp	r3, #71	; 0x47
 8006b78:	4680      	mov	r8, r0
 8006b7a:	d108      	bne.n	8006b8e <_printf_float+0x142>
 8006b7c:	1cc8      	adds	r0, r1, #3
 8006b7e:	db02      	blt.n	8006b86 <_printf_float+0x13a>
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	4299      	cmp	r1, r3
 8006b84:	dd41      	ble.n	8006c0a <_printf_float+0x1be>
 8006b86:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b8a:	fa5f fb8b 	uxtb.w	fp, fp
 8006b8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b92:	d820      	bhi.n	8006bd6 <_printf_float+0x18a>
 8006b94:	3901      	subs	r1, #1
 8006b96:	465a      	mov	r2, fp
 8006b98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006b9e:	f7ff ff17 	bl	80069d0 <__exponent>
 8006ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba4:	1813      	adds	r3, r2, r0
 8006ba6:	2a01      	cmp	r2, #1
 8006ba8:	4681      	mov	r9, r0
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	dc02      	bgt.n	8006bb4 <_printf_float+0x168>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	07d2      	lsls	r2, r2, #31
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_float+0x16c>
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d09c      	beq.n	8006afa <_printf_float+0xae>
 8006bc0:	232d      	movs	r3, #45	; 0x2d
 8006bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc6:	e798      	b.n	8006afa <_printf_float+0xae>
 8006bc8:	9a06      	ldr	r2, [sp, #24]
 8006bca:	2a47      	cmp	r2, #71	; 0x47
 8006bcc:	d1be      	bne.n	8006b4c <_printf_float+0x100>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1bc      	bne.n	8006b4c <_printf_float+0x100>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e7b9      	b.n	8006b4a <_printf_float+0xfe>
 8006bd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bda:	d118      	bne.n	8006c0e <_printf_float+0x1c2>
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	6863      	ldr	r3, [r4, #4]
 8006be0:	dd0b      	ble.n	8006bfa <_printf_float+0x1ae>
 8006be2:	6121      	str	r1, [r4, #16]
 8006be4:	b913      	cbnz	r3, 8006bec <_printf_float+0x1a0>
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	07d0      	lsls	r0, r2, #31
 8006bea:	d502      	bpl.n	8006bf2 <_printf_float+0x1a6>
 8006bec:	3301      	adds	r3, #1
 8006bee:	440b      	add	r3, r1
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bf4:	f04f 0900 	mov.w	r9, #0
 8006bf8:	e7de      	b.n	8006bb8 <_printf_float+0x16c>
 8006bfa:	b913      	cbnz	r3, 8006c02 <_printf_float+0x1b6>
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	07d2      	lsls	r2, r2, #31
 8006c00:	d501      	bpl.n	8006c06 <_printf_float+0x1ba>
 8006c02:	3302      	adds	r3, #2
 8006c04:	e7f4      	b.n	8006bf0 <_printf_float+0x1a4>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7f2      	b.n	8006bf0 <_printf_float+0x1a4>
 8006c0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c10:	4299      	cmp	r1, r3
 8006c12:	db05      	blt.n	8006c20 <_printf_float+0x1d4>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	6121      	str	r1, [r4, #16]
 8006c18:	07d8      	lsls	r0, r3, #31
 8006c1a:	d5ea      	bpl.n	8006bf2 <_printf_float+0x1a6>
 8006c1c:	1c4b      	adds	r3, r1, #1
 8006c1e:	e7e7      	b.n	8006bf0 <_printf_float+0x1a4>
 8006c20:	2900      	cmp	r1, #0
 8006c22:	bfd4      	ite	le
 8006c24:	f1c1 0202 	rsble	r2, r1, #2
 8006c28:	2201      	movgt	r2, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	e7e0      	b.n	8006bf0 <_printf_float+0x1a4>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	055a      	lsls	r2, r3, #21
 8006c32:	d407      	bmi.n	8006c44 <_printf_float+0x1f8>
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	4642      	mov	r2, r8
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d12c      	bne.n	8006c9c <_printf_float+0x250>
 8006c42:	e764      	b.n	8006b0e <_printf_float+0xc2>
 8006c44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c48:	f240 80e0 	bls.w	8006e0c <_printf_float+0x3c0>
 8006c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c50:	2200      	movs	r2, #0
 8006c52:	2300      	movs	r3, #0
 8006c54:	f7f9 ff58 	bl	8000b08 <__aeabi_dcmpeq>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d034      	beq.n	8006cc6 <_printf_float+0x27a>
 8006c5c:	4a37      	ldr	r2, [pc, #220]	; (8006d3c <_printf_float+0x2f0>)
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f af51 	beq.w	8006b0e <_printf_float+0xc2>
 8006c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c70:	429a      	cmp	r2, r3
 8006c72:	db02      	blt.n	8006c7a <_printf_float+0x22e>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	07d8      	lsls	r0, r3, #31
 8006c78:	d510      	bpl.n	8006c9c <_printf_float+0x250>
 8006c7a:	ee18 3a10 	vmov	r3, s16
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f af41 	beq.w	8006b0e <_printf_float+0xc2>
 8006c8c:	f04f 0800 	mov.w	r8, #0
 8006c90:	f104 091a 	add.w	r9, r4, #26
 8006c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c96:	3b01      	subs	r3, #1
 8006c98:	4543      	cmp	r3, r8
 8006c9a:	dc09      	bgt.n	8006cb0 <_printf_float+0x264>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	079b      	lsls	r3, r3, #30
 8006ca0:	f100 8105 	bmi.w	8006eae <_printf_float+0x462>
 8006ca4:	68e0      	ldr	r0, [r4, #12]
 8006ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ca8:	4298      	cmp	r0, r3
 8006caa:	bfb8      	it	lt
 8006cac:	4618      	movlt	r0, r3
 8006cae:	e730      	b.n	8006b12 <_printf_float+0xc6>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	464a      	mov	r2, r9
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f43f af27 	beq.w	8006b0e <_printf_float+0xc2>
 8006cc0:	f108 0801 	add.w	r8, r8, #1
 8006cc4:	e7e6      	b.n	8006c94 <_printf_float+0x248>
 8006cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dc39      	bgt.n	8006d40 <_printf_float+0x2f4>
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	; (8006d3c <_printf_float+0x2f0>)
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f af19 	beq.w	8006b0e <_printf_float+0xc2>
 8006cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d102      	bne.n	8006cea <_printf_float+0x29e>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	07d9      	lsls	r1, r3, #31
 8006ce8:	d5d8      	bpl.n	8006c9c <_printf_float+0x250>
 8006cea:	ee18 3a10 	vmov	r3, s16
 8006cee:	4652      	mov	r2, sl
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af09 	beq.w	8006b0e <_printf_float+0xc2>
 8006cfc:	f04f 0900 	mov.w	r9, #0
 8006d00:	f104 0a1a 	add.w	sl, r4, #26
 8006d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d06:	425b      	negs	r3, r3
 8006d08:	454b      	cmp	r3, r9
 8006d0a:	dc01      	bgt.n	8006d10 <_printf_float+0x2c4>
 8006d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0e:	e792      	b.n	8006c36 <_printf_float+0x1ea>
 8006d10:	2301      	movs	r3, #1
 8006d12:	4652      	mov	r2, sl
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f aef7 	beq.w	8006b0e <_printf_float+0xc2>
 8006d20:	f109 0901 	add.w	r9, r9, #1
 8006d24:	e7ee      	b.n	8006d04 <_printf_float+0x2b8>
 8006d26:	bf00      	nop
 8006d28:	7fefffff 	.word	0x7fefffff
 8006d2c:	080097d0 	.word	0x080097d0
 8006d30:	080097d4 	.word	0x080097d4
 8006d34:	080097dc 	.word	0x080097dc
 8006d38:	080097d8 	.word	0x080097d8
 8006d3c:	080097e0 	.word	0x080097e0
 8006d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d44:	429a      	cmp	r2, r3
 8006d46:	bfa8      	it	ge
 8006d48:	461a      	movge	r2, r3
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	4691      	mov	r9, r2
 8006d4e:	dc37      	bgt.n	8006dc0 <_printf_float+0x374>
 8006d50:	f04f 0b00 	mov.w	fp, #0
 8006d54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d58:	f104 021a 	add.w	r2, r4, #26
 8006d5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	eba3 0309 	sub.w	r3, r3, r9
 8006d64:	455b      	cmp	r3, fp
 8006d66:	dc33      	bgt.n	8006dd0 <_printf_float+0x384>
 8006d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	db3b      	blt.n	8006de8 <_printf_float+0x39c>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07da      	lsls	r2, r3, #31
 8006d74:	d438      	bmi.n	8006de8 <_printf_float+0x39c>
 8006d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d78:	9a05      	ldr	r2, [sp, #20]
 8006d7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d7c:	1a9a      	subs	r2, r3, r2
 8006d7e:	eba3 0901 	sub.w	r9, r3, r1
 8006d82:	4591      	cmp	r9, r2
 8006d84:	bfa8      	it	ge
 8006d86:	4691      	movge	r9, r2
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	dc35      	bgt.n	8006dfa <_printf_float+0x3ae>
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d96:	f104 0a1a 	add.w	sl, r4, #26
 8006d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	eba3 0309 	sub.w	r3, r3, r9
 8006da4:	4543      	cmp	r3, r8
 8006da6:	f77f af79 	ble.w	8006c9c <_printf_float+0x250>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4652      	mov	r2, sl
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f aeaa 	beq.w	8006b0e <_printf_float+0xc2>
 8006dba:	f108 0801 	add.w	r8, r8, #1
 8006dbe:	e7ec      	b.n	8006d9a <_printf_float+0x34e>
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d1c0      	bne.n	8006d50 <_printf_float+0x304>
 8006dce:	e69e      	b.n	8006b0e <_printf_float+0xc2>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	9205      	str	r2, [sp, #20]
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f ae97 	beq.w	8006b0e <_printf_float+0xc2>
 8006de0:	9a05      	ldr	r2, [sp, #20]
 8006de2:	f10b 0b01 	add.w	fp, fp, #1
 8006de6:	e7b9      	b.n	8006d5c <_printf_float+0x310>
 8006de8:	ee18 3a10 	vmov	r3, s16
 8006dec:	4652      	mov	r2, sl
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	d1be      	bne.n	8006d76 <_printf_float+0x32a>
 8006df8:	e689      	b.n	8006b0e <_printf_float+0xc2>
 8006dfa:	9a05      	ldr	r2, [sp, #20]
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	4442      	add	r2, r8
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	d1c1      	bne.n	8006d8e <_printf_float+0x342>
 8006e0a:	e680      	b.n	8006b0e <_printf_float+0xc2>
 8006e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e0e:	2a01      	cmp	r2, #1
 8006e10:	dc01      	bgt.n	8006e16 <_printf_float+0x3ca>
 8006e12:	07db      	lsls	r3, r3, #31
 8006e14:	d538      	bpl.n	8006e88 <_printf_float+0x43c>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4642      	mov	r2, r8
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae74 	beq.w	8006b0e <_printf_float+0xc2>
 8006e26:	ee18 3a10 	vmov	r3, s16
 8006e2a:	4652      	mov	r2, sl
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	f43f ae6b 	beq.w	8006b0e <_printf_float+0xc2>
 8006e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f7f9 fe62 	bl	8000b08 <__aeabi_dcmpeq>
 8006e44:	b9d8      	cbnz	r0, 8006e7e <_printf_float+0x432>
 8006e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e48:	f108 0201 	add.w	r2, r8, #1
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d10e      	bne.n	8006e76 <_printf_float+0x42a>
 8006e58:	e659      	b.n	8006b0e <_printf_float+0xc2>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae52 	beq.w	8006b0e <_printf_float+0xc2>
 8006e6a:	f108 0801 	add.w	r8, r8, #1
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	4543      	cmp	r3, r8
 8006e74:	dcf1      	bgt.n	8006e5a <_printf_float+0x40e>
 8006e76:	464b      	mov	r3, r9
 8006e78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e7c:	e6dc      	b.n	8006c38 <_printf_float+0x1ec>
 8006e7e:	f04f 0800 	mov.w	r8, #0
 8006e82:	f104 0a1a 	add.w	sl, r4, #26
 8006e86:	e7f2      	b.n	8006e6e <_printf_float+0x422>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	e7df      	b.n	8006e4e <_printf_float+0x402>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	464a      	mov	r2, r9
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f43f ae38 	beq.w	8006b0e <_printf_float+0xc2>
 8006e9e:	f108 0801 	add.w	r8, r8, #1
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ea6:	1a5b      	subs	r3, r3, r1
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	dcf0      	bgt.n	8006e8e <_printf_float+0x442>
 8006eac:	e6fa      	b.n	8006ca4 <_printf_float+0x258>
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	f104 0919 	add.w	r9, r4, #25
 8006eb6:	e7f4      	b.n	8006ea2 <_printf_float+0x456>

08006eb8 <_printf_common>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	4699      	mov	r9, r3
 8006ec0:	688a      	ldr	r2, [r1, #8]
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	bfb8      	it	lt
 8006ecc:	4613      	movlt	r3, r2
 8006ece:	6033      	str	r3, [r6, #0]
 8006ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	b10a      	cbz	r2, 8006ede <_printf_common+0x26>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	6833      	ldrmi	r3, [r6, #0]
 8006ee6:	3302      	addmi	r3, #2
 8006ee8:	6033      	strmi	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d106      	bne.n	8006f00 <_printf_common+0x48>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc26      	bgt.n	8006f4e <_printf_common+0x96>
 8006f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f04:	1e13      	subs	r3, r2, #0
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	bf18      	it	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d42b      	bmi.n	8006f68 <_printf_common+0xb0>
 8006f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f14:	4649      	mov	r1, r9
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d01e      	beq.n	8006f5c <_printf_common+0xa4>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	68e5      	ldr	r5, [r4, #12]
 8006f22:	6832      	ldr	r2, [r6, #0]
 8006f24:	f003 0306 	and.w	r3, r3, #6
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	bf08      	it	eq
 8006f2c:	1aad      	subeq	r5, r5, r2
 8006f2e:	68a3      	ldr	r3, [r4, #8]
 8006f30:	6922      	ldr	r2, [r4, #16]
 8006f32:	bf0c      	ite	eq
 8006f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f38:	2500      	movne	r5, #0
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bfc4      	itt	gt
 8006f3e:	1a9b      	subgt	r3, r3, r2
 8006f40:	18ed      	addgt	r5, r5, r3
 8006f42:	2600      	movs	r6, #0
 8006f44:	341a      	adds	r4, #26
 8006f46:	42b5      	cmp	r5, r6
 8006f48:	d11a      	bne.n	8006f80 <_printf_common+0xc8>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e008      	b.n	8006f60 <_printf_common+0xa8>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	4649      	mov	r1, r9
 8006f54:	4638      	mov	r0, r7
 8006f56:	47c0      	blx	r8
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d103      	bne.n	8006f64 <_printf_common+0xac>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f64:	3501      	adds	r5, #1
 8006f66:	e7c6      	b.n	8006ef6 <_printf_common+0x3e>
 8006f68:	18e1      	adds	r1, r4, r3
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	2030      	movs	r0, #48	; 0x30
 8006f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f72:	4422      	add	r2, r4
 8006f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	e7c7      	b.n	8006f10 <_printf_common+0x58>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4622      	mov	r2, r4
 8006f84:	4649      	mov	r1, r9
 8006f86:	4638      	mov	r0, r7
 8006f88:	47c0      	blx	r8
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d0e6      	beq.n	8006f5c <_printf_common+0xa4>
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7d9      	b.n	8006f46 <_printf_common+0x8e>
	...

08006f94 <_printf_i>:
 8006f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	7e0f      	ldrb	r7, [r1, #24]
 8006f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f9c:	2f78      	cmp	r7, #120	; 0x78
 8006f9e:	4691      	mov	r9, r2
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	469a      	mov	sl, r3
 8006fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006faa:	d807      	bhi.n	8006fbc <_printf_i+0x28>
 8006fac:	2f62      	cmp	r7, #98	; 0x62
 8006fae:	d80a      	bhi.n	8006fc6 <_printf_i+0x32>
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	f000 80d8 	beq.w	8007166 <_printf_i+0x1d2>
 8006fb6:	2f58      	cmp	r7, #88	; 0x58
 8006fb8:	f000 80a3 	beq.w	8007102 <_printf_i+0x16e>
 8006fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fc4:	e03a      	b.n	800703c <_printf_i+0xa8>
 8006fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fca:	2b15      	cmp	r3, #21
 8006fcc:	d8f6      	bhi.n	8006fbc <_printf_i+0x28>
 8006fce:	a101      	add	r1, pc, #4	; (adr r1, 8006fd4 <_printf_i+0x40>)
 8006fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd4:	0800702d 	.word	0x0800702d
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08006fbd 	.word	0x08006fbd
 8006fe0:	08006fbd 	.word	0x08006fbd
 8006fe4:	08006fbd 	.word	0x08006fbd
 8006fe8:	08006fbd 	.word	0x08006fbd
 8006fec:	08007041 	.word	0x08007041
 8006ff0:	08006fbd 	.word	0x08006fbd
 8006ff4:	08006fbd 	.word	0x08006fbd
 8006ff8:	08006fbd 	.word	0x08006fbd
 8006ffc:	08006fbd 	.word	0x08006fbd
 8007000:	0800714d 	.word	0x0800714d
 8007004:	08007071 	.word	0x08007071
 8007008:	0800712f 	.word	0x0800712f
 800700c:	08006fbd 	.word	0x08006fbd
 8007010:	08006fbd 	.word	0x08006fbd
 8007014:	0800716f 	.word	0x0800716f
 8007018:	08006fbd 	.word	0x08006fbd
 800701c:	08007071 	.word	0x08007071
 8007020:	08006fbd 	.word	0x08006fbd
 8007024:	08006fbd 	.word	0x08006fbd
 8007028:	08007137 	.word	0x08007137
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	1d1a      	adds	r2, r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	602a      	str	r2, [r5, #0]
 8007034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800703c:	2301      	movs	r3, #1
 800703e:	e0a3      	b.n	8007188 <_printf_i+0x1f4>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	6829      	ldr	r1, [r5, #0]
 8007044:	0606      	lsls	r6, r0, #24
 8007046:	f101 0304 	add.w	r3, r1, #4
 800704a:	d50a      	bpl.n	8007062 <_printf_i+0xce>
 800704c:	680e      	ldr	r6, [r1, #0]
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	2e00      	cmp	r6, #0
 8007052:	da03      	bge.n	800705c <_printf_i+0xc8>
 8007054:	232d      	movs	r3, #45	; 0x2d
 8007056:	4276      	negs	r6, r6
 8007058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800705c:	485e      	ldr	r0, [pc, #376]	; (80071d8 <_printf_i+0x244>)
 800705e:	230a      	movs	r3, #10
 8007060:	e019      	b.n	8007096 <_printf_i+0x102>
 8007062:	680e      	ldr	r6, [r1, #0]
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	f010 0f40 	tst.w	r0, #64	; 0x40
 800706a:	bf18      	it	ne
 800706c:	b236      	sxthne	r6, r6
 800706e:	e7ef      	b.n	8007050 <_printf_i+0xbc>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	6820      	ldr	r0, [r4, #0]
 8007074:	1d19      	adds	r1, r3, #4
 8007076:	6029      	str	r1, [r5, #0]
 8007078:	0601      	lsls	r1, r0, #24
 800707a:	d501      	bpl.n	8007080 <_printf_i+0xec>
 800707c:	681e      	ldr	r6, [r3, #0]
 800707e:	e002      	b.n	8007086 <_printf_i+0xf2>
 8007080:	0646      	lsls	r6, r0, #25
 8007082:	d5fb      	bpl.n	800707c <_printf_i+0xe8>
 8007084:	881e      	ldrh	r6, [r3, #0]
 8007086:	4854      	ldr	r0, [pc, #336]	; (80071d8 <_printf_i+0x244>)
 8007088:	2f6f      	cmp	r7, #111	; 0x6f
 800708a:	bf0c      	ite	eq
 800708c:	2308      	moveq	r3, #8
 800708e:	230a      	movne	r3, #10
 8007090:	2100      	movs	r1, #0
 8007092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007096:	6865      	ldr	r5, [r4, #4]
 8007098:	60a5      	str	r5, [r4, #8]
 800709a:	2d00      	cmp	r5, #0
 800709c:	bfa2      	ittt	ge
 800709e:	6821      	ldrge	r1, [r4, #0]
 80070a0:	f021 0104 	bicge.w	r1, r1, #4
 80070a4:	6021      	strge	r1, [r4, #0]
 80070a6:	b90e      	cbnz	r6, 80070ac <_printf_i+0x118>
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	d04d      	beq.n	8007148 <_printf_i+0x1b4>
 80070ac:	4615      	mov	r5, r2
 80070ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80070b2:	fb03 6711 	mls	r7, r3, r1, r6
 80070b6:	5dc7      	ldrb	r7, [r0, r7]
 80070b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070bc:	4637      	mov	r7, r6
 80070be:	42bb      	cmp	r3, r7
 80070c0:	460e      	mov	r6, r1
 80070c2:	d9f4      	bls.n	80070ae <_printf_i+0x11a>
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d10b      	bne.n	80070e0 <_printf_i+0x14c>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	07de      	lsls	r6, r3, #31
 80070cc:	d508      	bpl.n	80070e0 <_printf_i+0x14c>
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	6861      	ldr	r1, [r4, #4]
 80070d2:	4299      	cmp	r1, r3
 80070d4:	bfde      	ittt	le
 80070d6:	2330      	movle	r3, #48	; 0x30
 80070d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070e0:	1b52      	subs	r2, r2, r5
 80070e2:	6122      	str	r2, [r4, #16]
 80070e4:	f8cd a000 	str.w	sl, [sp]
 80070e8:	464b      	mov	r3, r9
 80070ea:	aa03      	add	r2, sp, #12
 80070ec:	4621      	mov	r1, r4
 80070ee:	4640      	mov	r0, r8
 80070f0:	f7ff fee2 	bl	8006eb8 <_printf_common>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d14c      	bne.n	8007192 <_printf_i+0x1fe>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	b004      	add	sp, #16
 80070fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007102:	4835      	ldr	r0, [pc, #212]	; (80071d8 <_printf_i+0x244>)
 8007104:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007108:	6829      	ldr	r1, [r5, #0]
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007110:	6029      	str	r1, [r5, #0]
 8007112:	061d      	lsls	r5, r3, #24
 8007114:	d514      	bpl.n	8007140 <_printf_i+0x1ac>
 8007116:	07df      	lsls	r7, r3, #31
 8007118:	bf44      	itt	mi
 800711a:	f043 0320 	orrmi.w	r3, r3, #32
 800711e:	6023      	strmi	r3, [r4, #0]
 8007120:	b91e      	cbnz	r6, 800712a <_printf_i+0x196>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	f023 0320 	bic.w	r3, r3, #32
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	2310      	movs	r3, #16
 800712c:	e7b0      	b.n	8007090 <_printf_i+0xfc>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	f043 0320 	orr.w	r3, r3, #32
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	2378      	movs	r3, #120	; 0x78
 8007138:	4828      	ldr	r0, [pc, #160]	; (80071dc <_printf_i+0x248>)
 800713a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800713e:	e7e3      	b.n	8007108 <_printf_i+0x174>
 8007140:	0659      	lsls	r1, r3, #25
 8007142:	bf48      	it	mi
 8007144:	b2b6      	uxthmi	r6, r6
 8007146:	e7e6      	b.n	8007116 <_printf_i+0x182>
 8007148:	4615      	mov	r5, r2
 800714a:	e7bb      	b.n	80070c4 <_printf_i+0x130>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	6826      	ldr	r6, [r4, #0]
 8007150:	6961      	ldr	r1, [r4, #20]
 8007152:	1d18      	adds	r0, r3, #4
 8007154:	6028      	str	r0, [r5, #0]
 8007156:	0635      	lsls	r5, r6, #24
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	d501      	bpl.n	8007160 <_printf_i+0x1cc>
 800715c:	6019      	str	r1, [r3, #0]
 800715e:	e002      	b.n	8007166 <_printf_i+0x1d2>
 8007160:	0670      	lsls	r0, r6, #25
 8007162:	d5fb      	bpl.n	800715c <_printf_i+0x1c8>
 8007164:	8019      	strh	r1, [r3, #0]
 8007166:	2300      	movs	r3, #0
 8007168:	6123      	str	r3, [r4, #16]
 800716a:	4615      	mov	r5, r2
 800716c:	e7ba      	b.n	80070e4 <_printf_i+0x150>
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	1d1a      	adds	r2, r3, #4
 8007172:	602a      	str	r2, [r5, #0]
 8007174:	681d      	ldr	r5, [r3, #0]
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	2100      	movs	r1, #0
 800717a:	4628      	mov	r0, r5
 800717c:	f7f9 f850 	bl	8000220 <memchr>
 8007180:	b108      	cbz	r0, 8007186 <_printf_i+0x1f2>
 8007182:	1b40      	subs	r0, r0, r5
 8007184:	6060      	str	r0, [r4, #4]
 8007186:	6863      	ldr	r3, [r4, #4]
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	2300      	movs	r3, #0
 800718c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007190:	e7a8      	b.n	80070e4 <_printf_i+0x150>
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	462a      	mov	r2, r5
 8007196:	4649      	mov	r1, r9
 8007198:	4640      	mov	r0, r8
 800719a:	47d0      	blx	sl
 800719c:	3001      	adds	r0, #1
 800719e:	d0ab      	beq.n	80070f8 <_printf_i+0x164>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	079b      	lsls	r3, r3, #30
 80071a4:	d413      	bmi.n	80071ce <_printf_i+0x23a>
 80071a6:	68e0      	ldr	r0, [r4, #12]
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	4298      	cmp	r0, r3
 80071ac:	bfb8      	it	lt
 80071ae:	4618      	movlt	r0, r3
 80071b0:	e7a4      	b.n	80070fc <_printf_i+0x168>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4632      	mov	r2, r6
 80071b6:	4649      	mov	r1, r9
 80071b8:	4640      	mov	r0, r8
 80071ba:	47d0      	blx	sl
 80071bc:	3001      	adds	r0, #1
 80071be:	d09b      	beq.n	80070f8 <_printf_i+0x164>
 80071c0:	3501      	adds	r5, #1
 80071c2:	68e3      	ldr	r3, [r4, #12]
 80071c4:	9903      	ldr	r1, [sp, #12]
 80071c6:	1a5b      	subs	r3, r3, r1
 80071c8:	42ab      	cmp	r3, r5
 80071ca:	dcf2      	bgt.n	80071b2 <_printf_i+0x21e>
 80071cc:	e7eb      	b.n	80071a6 <_printf_i+0x212>
 80071ce:	2500      	movs	r5, #0
 80071d0:	f104 0619 	add.w	r6, r4, #25
 80071d4:	e7f5      	b.n	80071c2 <_printf_i+0x22e>
 80071d6:	bf00      	nop
 80071d8:	080097e2 	.word	0x080097e2
 80071dc:	080097f3 	.word	0x080097f3

080071e0 <_sbrk_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d06      	ldr	r5, [pc, #24]	; (80071fc <_sbrk_r+0x1c>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	f7fb fa1c 	bl	8002628 <_sbrk>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_sbrk_r+0x1a>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_sbrk_r+0x1a>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	200003b0 	.word	0x200003b0

08007200 <sniprintf>:
 8007200:	b40c      	push	{r2, r3}
 8007202:	b530      	push	{r4, r5, lr}
 8007204:	4b17      	ldr	r3, [pc, #92]	; (8007264 <sniprintf+0x64>)
 8007206:	1e0c      	subs	r4, r1, #0
 8007208:	681d      	ldr	r5, [r3, #0]
 800720a:	b09d      	sub	sp, #116	; 0x74
 800720c:	da08      	bge.n	8007220 <sniprintf+0x20>
 800720e:	238b      	movs	r3, #139	; 0x8b
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	b01d      	add	sp, #116	; 0x74
 8007218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721c:	b002      	add	sp, #8
 800721e:	4770      	bx	lr
 8007220:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007224:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007228:	bf14      	ite	ne
 800722a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800722e:	4623      	moveq	r3, r4
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007240:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007242:	ab21      	add	r3, sp, #132	; 0x84
 8007244:	a902      	add	r1, sp, #8
 8007246:	4628      	mov	r0, r5
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	f001 faad 	bl	80087a8 <_svfiprintf_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	bfbc      	itt	lt
 8007252:	238b      	movlt	r3, #139	; 0x8b
 8007254:	602b      	strlt	r3, [r5, #0]
 8007256:	2c00      	cmp	r4, #0
 8007258:	d0dd      	beq.n	8007216 <sniprintf+0x16>
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e7d9      	b.n	8007216 <sniprintf+0x16>
 8007262:	bf00      	nop
 8007264:	20000018 	.word	0x20000018

08007268 <siprintf>:
 8007268:	b40e      	push	{r1, r2, r3}
 800726a:	b500      	push	{lr}
 800726c:	b09c      	sub	sp, #112	; 0x70
 800726e:	ab1d      	add	r3, sp, #116	; 0x74
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	9006      	str	r0, [sp, #24]
 8007274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007278:	4809      	ldr	r0, [pc, #36]	; (80072a0 <siprintf+0x38>)
 800727a:	9107      	str	r1, [sp, #28]
 800727c:	9104      	str	r1, [sp, #16]
 800727e:	4909      	ldr	r1, [pc, #36]	; (80072a4 <siprintf+0x3c>)
 8007280:	f853 2b04 	ldr.w	r2, [r3], #4
 8007284:	9105      	str	r1, [sp, #20]
 8007286:	6800      	ldr	r0, [r0, #0]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	a902      	add	r1, sp, #8
 800728c:	f001 fa8c 	bl	80087a8 <_svfiprintf_r>
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	b01c      	add	sp, #112	; 0x70
 8007298:	f85d eb04 	ldr.w	lr, [sp], #4
 800729c:	b003      	add	sp, #12
 800729e:	4770      	bx	lr
 80072a0:	20000018 	.word	0x20000018
 80072a4:	ffff0208 	.word	0xffff0208

080072a8 <quorem>:
 80072a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	6903      	ldr	r3, [r0, #16]
 80072ae:	690c      	ldr	r4, [r1, #16]
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	4607      	mov	r7, r0
 80072b4:	f2c0 8081 	blt.w	80073ba <quorem+0x112>
 80072b8:	3c01      	subs	r4, #1
 80072ba:	f101 0814 	add.w	r8, r1, #20
 80072be:	f100 0514 	add.w	r5, r0, #20
 80072c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d0:	3301      	adds	r3, #1
 80072d2:	429a      	cmp	r2, r3
 80072d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80072e0:	d331      	bcc.n	8007346 <quorem+0x9e>
 80072e2:	f04f 0e00 	mov.w	lr, #0
 80072e6:	4640      	mov	r0, r8
 80072e8:	46ac      	mov	ip, r5
 80072ea:	46f2      	mov	sl, lr
 80072ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80072f0:	b293      	uxth	r3, r2
 80072f2:	fb06 e303 	mla	r3, r6, r3, lr
 80072f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007300:	f8dc a000 	ldr.w	sl, [ip]
 8007304:	0c12      	lsrs	r2, r2, #16
 8007306:	fa13 f38a 	uxtah	r3, r3, sl
 800730a:	fb06 e202 	mla	r2, r6, r2, lr
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	9b00      	ldr	r3, [sp, #0]
 8007312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007316:	b292      	uxth	r2, r2
 8007318:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800731c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007320:	f8bd 3000 	ldrh.w	r3, [sp]
 8007324:	4581      	cmp	r9, r0
 8007326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800732a:	f84c 3b04 	str.w	r3, [ip], #4
 800732e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007332:	d2db      	bcs.n	80072ec <quorem+0x44>
 8007334:	f855 300b 	ldr.w	r3, [r5, fp]
 8007338:	b92b      	cbnz	r3, 8007346 <quorem+0x9e>
 800733a:	9b01      	ldr	r3, [sp, #4]
 800733c:	3b04      	subs	r3, #4
 800733e:	429d      	cmp	r5, r3
 8007340:	461a      	mov	r2, r3
 8007342:	d32e      	bcc.n	80073a2 <quorem+0xfa>
 8007344:	613c      	str	r4, [r7, #16]
 8007346:	4638      	mov	r0, r7
 8007348:	f001 f8ba 	bl	80084c0 <__mcmp>
 800734c:	2800      	cmp	r0, #0
 800734e:	db24      	blt.n	800739a <quorem+0xf2>
 8007350:	3601      	adds	r6, #1
 8007352:	4628      	mov	r0, r5
 8007354:	f04f 0c00 	mov.w	ip, #0
 8007358:	f858 2b04 	ldr.w	r2, [r8], #4
 800735c:	f8d0 e000 	ldr.w	lr, [r0]
 8007360:	b293      	uxth	r3, r2
 8007362:	ebac 0303 	sub.w	r3, ip, r3
 8007366:	0c12      	lsrs	r2, r2, #16
 8007368:	fa13 f38e 	uxtah	r3, r3, lr
 800736c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007374:	b29b      	uxth	r3, r3
 8007376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737a:	45c1      	cmp	r9, r8
 800737c:	f840 3b04 	str.w	r3, [r0], #4
 8007380:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007384:	d2e8      	bcs.n	8007358 <quorem+0xb0>
 8007386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800738a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800738e:	b922      	cbnz	r2, 800739a <quorem+0xf2>
 8007390:	3b04      	subs	r3, #4
 8007392:	429d      	cmp	r5, r3
 8007394:	461a      	mov	r2, r3
 8007396:	d30a      	bcc.n	80073ae <quorem+0x106>
 8007398:	613c      	str	r4, [r7, #16]
 800739a:	4630      	mov	r0, r6
 800739c:	b003      	add	sp, #12
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	3b04      	subs	r3, #4
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	d1cc      	bne.n	8007344 <quorem+0x9c>
 80073aa:	3c01      	subs	r4, #1
 80073ac:	e7c7      	b.n	800733e <quorem+0x96>
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	3b04      	subs	r3, #4
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	d1f0      	bne.n	8007398 <quorem+0xf0>
 80073b6:	3c01      	subs	r4, #1
 80073b8:	e7eb      	b.n	8007392 <quorem+0xea>
 80073ba:	2000      	movs	r0, #0
 80073bc:	e7ee      	b.n	800739c <quorem+0xf4>
	...

080073c0 <_dtoa_r>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	ed2d 8b04 	vpush	{d8-d9}
 80073c8:	ec57 6b10 	vmov	r6, r7, d0
 80073cc:	b093      	sub	sp, #76	; 0x4c
 80073ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073d4:	9106      	str	r1, [sp, #24]
 80073d6:	ee10 aa10 	vmov	sl, s0
 80073da:	4604      	mov	r4, r0
 80073dc:	9209      	str	r2, [sp, #36]	; 0x24
 80073de:	930c      	str	r3, [sp, #48]	; 0x30
 80073e0:	46bb      	mov	fp, r7
 80073e2:	b975      	cbnz	r5, 8007402 <_dtoa_r+0x42>
 80073e4:	2010      	movs	r0, #16
 80073e6:	f7ff f97b 	bl	80066e0 <malloc>
 80073ea:	4602      	mov	r2, r0
 80073ec:	6260      	str	r0, [r4, #36]	; 0x24
 80073ee:	b920      	cbnz	r0, 80073fa <_dtoa_r+0x3a>
 80073f0:	4ba7      	ldr	r3, [pc, #668]	; (8007690 <_dtoa_r+0x2d0>)
 80073f2:	21ea      	movs	r1, #234	; 0xea
 80073f4:	48a7      	ldr	r0, [pc, #668]	; (8007694 <_dtoa_r+0x2d4>)
 80073f6:	f001 fad7 	bl	80089a8 <__assert_func>
 80073fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073fe:	6005      	str	r5, [r0, #0]
 8007400:	60c5      	str	r5, [r0, #12]
 8007402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007404:	6819      	ldr	r1, [r3, #0]
 8007406:	b151      	cbz	r1, 800741e <_dtoa_r+0x5e>
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	604a      	str	r2, [r1, #4]
 800740c:	2301      	movs	r3, #1
 800740e:	4093      	lsls	r3, r2
 8007410:	608b      	str	r3, [r1, #8]
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fe12 	bl	800803c <_Bfree>
 8007418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	1e3b      	subs	r3, r7, #0
 8007420:	bfaa      	itet	ge
 8007422:	2300      	movge	r3, #0
 8007424:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007428:	f8c8 3000 	strge.w	r3, [r8]
 800742c:	4b9a      	ldr	r3, [pc, #616]	; (8007698 <_dtoa_r+0x2d8>)
 800742e:	bfbc      	itt	lt
 8007430:	2201      	movlt	r2, #1
 8007432:	f8c8 2000 	strlt.w	r2, [r8]
 8007436:	ea33 030b 	bics.w	r3, r3, fp
 800743a:	d11b      	bne.n	8007474 <_dtoa_r+0xb4>
 800743c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800743e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007448:	4333      	orrs	r3, r6
 800744a:	f000 8592 	beq.w	8007f72 <_dtoa_r+0xbb2>
 800744e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007450:	b963      	cbnz	r3, 800746c <_dtoa_r+0xac>
 8007452:	4b92      	ldr	r3, [pc, #584]	; (800769c <_dtoa_r+0x2dc>)
 8007454:	e022      	b.n	800749c <_dtoa_r+0xdc>
 8007456:	4b92      	ldr	r3, [pc, #584]	; (80076a0 <_dtoa_r+0x2e0>)
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	3308      	adds	r3, #8
 800745c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	9801      	ldr	r0, [sp, #4]
 8007462:	b013      	add	sp, #76	; 0x4c
 8007464:	ecbd 8b04 	vpop	{d8-d9}
 8007468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746c:	4b8b      	ldr	r3, [pc, #556]	; (800769c <_dtoa_r+0x2dc>)
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	3303      	adds	r3, #3
 8007472:	e7f3      	b.n	800745c <_dtoa_r+0x9c>
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	4650      	mov	r0, sl
 800747a:	4659      	mov	r1, fp
 800747c:	f7f9 fb44 	bl	8000b08 <__aeabi_dcmpeq>
 8007480:	ec4b ab19 	vmov	d9, sl, fp
 8007484:	4680      	mov	r8, r0
 8007486:	b158      	cbz	r0, 80074a0 <_dtoa_r+0xe0>
 8007488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800748a:	2301      	movs	r3, #1
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 856b 	beq.w	8007f6c <_dtoa_r+0xbac>
 8007496:	4883      	ldr	r0, [pc, #524]	; (80076a4 <_dtoa_r+0x2e4>)
 8007498:	6018      	str	r0, [r3, #0]
 800749a:	1e43      	subs	r3, r0, #1
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	e7df      	b.n	8007460 <_dtoa_r+0xa0>
 80074a0:	ec4b ab10 	vmov	d0, sl, fp
 80074a4:	aa10      	add	r2, sp, #64	; 0x40
 80074a6:	a911      	add	r1, sp, #68	; 0x44
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 f8af 	bl	800860c <__d2b>
 80074ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074b2:	ee08 0a10 	vmov	s16, r0
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	f000 8084 	beq.w	80075c4 <_dtoa_r+0x204>
 80074bc:	ee19 3a90 	vmov	r3, s19
 80074c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074c8:	4656      	mov	r6, sl
 80074ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074d6:	4b74      	ldr	r3, [pc, #464]	; (80076a8 <_dtoa_r+0x2e8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f8 fef3 	bl	80002c8 <__aeabi_dsub>
 80074e2:	a365      	add	r3, pc, #404	; (adr r3, 8007678 <_dtoa_r+0x2b8>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f9 f8a6 	bl	8000638 <__aeabi_dmul>
 80074ec:	a364      	add	r3, pc, #400	; (adr r3, 8007680 <_dtoa_r+0x2c0>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 feeb 	bl	80002cc <__adddf3>
 80074f6:	4606      	mov	r6, r0
 80074f8:	4628      	mov	r0, r5
 80074fa:	460f      	mov	r7, r1
 80074fc:	f7f9 f832 	bl	8000564 <__aeabi_i2d>
 8007500:	a361      	add	r3, pc, #388	; (adr r3, 8007688 <_dtoa_r+0x2c8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 f897 	bl	8000638 <__aeabi_dmul>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f8 fedb 	bl	80002cc <__adddf3>
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	f7f9 fb3d 	bl	8000b98 <__aeabi_d2iz>
 800751e:	2200      	movs	r2, #0
 8007520:	9000      	str	r0, [sp, #0]
 8007522:	2300      	movs	r3, #0
 8007524:	4630      	mov	r0, r6
 8007526:	4639      	mov	r1, r7
 8007528:	f7f9 faf8 	bl	8000b1c <__aeabi_dcmplt>
 800752c:	b150      	cbz	r0, 8007544 <_dtoa_r+0x184>
 800752e:	9800      	ldr	r0, [sp, #0]
 8007530:	f7f9 f818 	bl	8000564 <__aeabi_i2d>
 8007534:	4632      	mov	r2, r6
 8007536:	463b      	mov	r3, r7
 8007538:	f7f9 fae6 	bl	8000b08 <__aeabi_dcmpeq>
 800753c:	b910      	cbnz	r0, 8007544 <_dtoa_r+0x184>
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	2b16      	cmp	r3, #22
 8007548:	d85a      	bhi.n	8007600 <_dtoa_r+0x240>
 800754a:	9a00      	ldr	r2, [sp, #0]
 800754c:	4b57      	ldr	r3, [pc, #348]	; (80076ac <_dtoa_r+0x2ec>)
 800754e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	ec51 0b19 	vmov	r0, r1, d9
 800755a:	f7f9 fadf 	bl	8000b1c <__aeabi_dcmplt>
 800755e:	2800      	cmp	r0, #0
 8007560:	d050      	beq.n	8007604 <_dtoa_r+0x244>
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	3b01      	subs	r3, #1
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	2300      	movs	r3, #0
 800756a:	930b      	str	r3, [sp, #44]	; 0x2c
 800756c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800756e:	1b5d      	subs	r5, r3, r5
 8007570:	1e6b      	subs	r3, r5, #1
 8007572:	9305      	str	r3, [sp, #20]
 8007574:	bf45      	ittet	mi
 8007576:	f1c5 0301 	rsbmi	r3, r5, #1
 800757a:	9304      	strmi	r3, [sp, #16]
 800757c:	2300      	movpl	r3, #0
 800757e:	2300      	movmi	r3, #0
 8007580:	bf4c      	ite	mi
 8007582:	9305      	strmi	r3, [sp, #20]
 8007584:	9304      	strpl	r3, [sp, #16]
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	db3d      	blt.n	8007608 <_dtoa_r+0x248>
 800758c:	9b05      	ldr	r3, [sp, #20]
 800758e:	9a00      	ldr	r2, [sp, #0]
 8007590:	920a      	str	r2, [sp, #40]	; 0x28
 8007592:	4413      	add	r3, r2
 8007594:	9305      	str	r3, [sp, #20]
 8007596:	2300      	movs	r3, #0
 8007598:	9307      	str	r3, [sp, #28]
 800759a:	9b06      	ldr	r3, [sp, #24]
 800759c:	2b09      	cmp	r3, #9
 800759e:	f200 8089 	bhi.w	80076b4 <_dtoa_r+0x2f4>
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	bfc4      	itt	gt
 80075a6:	3b04      	subgt	r3, #4
 80075a8:	9306      	strgt	r3, [sp, #24]
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	f1a3 0302 	sub.w	r3, r3, #2
 80075b0:	bfcc      	ite	gt
 80075b2:	2500      	movgt	r5, #0
 80075b4:	2501      	movle	r5, #1
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f200 8087 	bhi.w	80076ca <_dtoa_r+0x30a>
 80075bc:	e8df f003 	tbb	[pc, r3]
 80075c0:	59383a2d 	.word	0x59383a2d
 80075c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075c8:	441d      	add	r5, r3
 80075ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	bfc1      	itttt	gt
 80075d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075da:	fa0b f303 	lslgt.w	r3, fp, r3
 80075de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075e2:	bfda      	itte	le
 80075e4:	f1c3 0320 	rsble	r3, r3, #32
 80075e8:	fa06 f003 	lslle.w	r0, r6, r3
 80075ec:	4318      	orrgt	r0, r3
 80075ee:	f7f8 ffa9 	bl	8000544 <__aeabi_ui2d>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4606      	mov	r6, r0
 80075f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075fa:	3d01      	subs	r5, #1
 80075fc:	930e      	str	r3, [sp, #56]	; 0x38
 80075fe:	e76a      	b.n	80074d6 <_dtoa_r+0x116>
 8007600:	2301      	movs	r3, #1
 8007602:	e7b2      	b.n	800756a <_dtoa_r+0x1aa>
 8007604:	900b      	str	r0, [sp, #44]	; 0x2c
 8007606:	e7b1      	b.n	800756c <_dtoa_r+0x1ac>
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	9a00      	ldr	r2, [sp, #0]
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	9304      	str	r3, [sp, #16]
 8007610:	4253      	negs	r3, r2
 8007612:	9307      	str	r3, [sp, #28]
 8007614:	2300      	movs	r3, #0
 8007616:	930a      	str	r3, [sp, #40]	; 0x28
 8007618:	e7bf      	b.n	800759a <_dtoa_r+0x1da>
 800761a:	2300      	movs	r3, #0
 800761c:	9308      	str	r3, [sp, #32]
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	dc55      	bgt.n	80076d0 <_dtoa_r+0x310>
 8007624:	2301      	movs	r3, #1
 8007626:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800762a:	461a      	mov	r2, r3
 800762c:	9209      	str	r2, [sp, #36]	; 0x24
 800762e:	e00c      	b.n	800764a <_dtoa_r+0x28a>
 8007630:	2301      	movs	r3, #1
 8007632:	e7f3      	b.n	800761c <_dtoa_r+0x25c>
 8007634:	2300      	movs	r3, #0
 8007636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007638:	9308      	str	r3, [sp, #32]
 800763a:	9b00      	ldr	r3, [sp, #0]
 800763c:	4413      	add	r3, r2
 800763e:	9302      	str	r3, [sp, #8]
 8007640:	3301      	adds	r3, #1
 8007642:	2b01      	cmp	r3, #1
 8007644:	9303      	str	r3, [sp, #12]
 8007646:	bfb8      	it	lt
 8007648:	2301      	movlt	r3, #1
 800764a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800764c:	2200      	movs	r2, #0
 800764e:	6042      	str	r2, [r0, #4]
 8007650:	2204      	movs	r2, #4
 8007652:	f102 0614 	add.w	r6, r2, #20
 8007656:	429e      	cmp	r6, r3
 8007658:	6841      	ldr	r1, [r0, #4]
 800765a:	d93d      	bls.n	80076d8 <_dtoa_r+0x318>
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fcad 	bl	8007fbc <_Balloc>
 8007662:	9001      	str	r0, [sp, #4]
 8007664:	2800      	cmp	r0, #0
 8007666:	d13b      	bne.n	80076e0 <_dtoa_r+0x320>
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <_dtoa_r+0x2f0>)
 800766a:	4602      	mov	r2, r0
 800766c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007670:	e6c0      	b.n	80073f4 <_dtoa_r+0x34>
 8007672:	2301      	movs	r3, #1
 8007674:	e7df      	b.n	8007636 <_dtoa_r+0x276>
 8007676:	bf00      	nop
 8007678:	636f4361 	.word	0x636f4361
 800767c:	3fd287a7 	.word	0x3fd287a7
 8007680:	8b60c8b3 	.word	0x8b60c8b3
 8007684:	3fc68a28 	.word	0x3fc68a28
 8007688:	509f79fb 	.word	0x509f79fb
 800768c:	3fd34413 	.word	0x3fd34413
 8007690:	08009811 	.word	0x08009811
 8007694:	08009828 	.word	0x08009828
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	0800980d 	.word	0x0800980d
 80076a0:	08009804 	.word	0x08009804
 80076a4:	080097e1 	.word	0x080097e1
 80076a8:	3ff80000 	.word	0x3ff80000
 80076ac:	08009918 	.word	0x08009918
 80076b0:	08009883 	.word	0x08009883
 80076b4:	2501      	movs	r5, #1
 80076b6:	2300      	movs	r3, #0
 80076b8:	9306      	str	r3, [sp, #24]
 80076ba:	9508      	str	r5, [sp, #32]
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295
 80076c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2312      	movs	r3, #18
 80076c8:	e7b0      	b.n	800762c <_dtoa_r+0x26c>
 80076ca:	2301      	movs	r3, #1
 80076cc:	9308      	str	r3, [sp, #32]
 80076ce:	e7f5      	b.n	80076bc <_dtoa_r+0x2fc>
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076d6:	e7b8      	b.n	800764a <_dtoa_r+0x28a>
 80076d8:	3101      	adds	r1, #1
 80076da:	6041      	str	r1, [r0, #4]
 80076dc:	0052      	lsls	r2, r2, #1
 80076de:	e7b8      	b.n	8007652 <_dtoa_r+0x292>
 80076e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e2:	9a01      	ldr	r2, [sp, #4]
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	2b0e      	cmp	r3, #14
 80076ea:	f200 809d 	bhi.w	8007828 <_dtoa_r+0x468>
 80076ee:	2d00      	cmp	r5, #0
 80076f0:	f000 809a 	beq.w	8007828 <_dtoa_r+0x468>
 80076f4:	9b00      	ldr	r3, [sp, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dd32      	ble.n	8007760 <_dtoa_r+0x3a0>
 80076fa:	4ab7      	ldr	r2, [pc, #732]	; (80079d8 <_dtoa_r+0x618>)
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	05d8      	lsls	r0, r3, #23
 800770c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007710:	d516      	bpl.n	8007740 <_dtoa_r+0x380>
 8007712:	4bb2      	ldr	r3, [pc, #712]	; (80079dc <_dtoa_r+0x61c>)
 8007714:	ec51 0b19 	vmov	r0, r1, d9
 8007718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800771c:	f7f9 f8b6 	bl	800088c <__aeabi_ddiv>
 8007720:	f007 070f 	and.w	r7, r7, #15
 8007724:	4682      	mov	sl, r0
 8007726:	468b      	mov	fp, r1
 8007728:	2503      	movs	r5, #3
 800772a:	4eac      	ldr	r6, [pc, #688]	; (80079dc <_dtoa_r+0x61c>)
 800772c:	b957      	cbnz	r7, 8007744 <_dtoa_r+0x384>
 800772e:	4642      	mov	r2, r8
 8007730:	464b      	mov	r3, r9
 8007732:	4650      	mov	r0, sl
 8007734:	4659      	mov	r1, fp
 8007736:	f7f9 f8a9 	bl	800088c <__aeabi_ddiv>
 800773a:	4682      	mov	sl, r0
 800773c:	468b      	mov	fp, r1
 800773e:	e028      	b.n	8007792 <_dtoa_r+0x3d2>
 8007740:	2502      	movs	r5, #2
 8007742:	e7f2      	b.n	800772a <_dtoa_r+0x36a>
 8007744:	07f9      	lsls	r1, r7, #31
 8007746:	d508      	bpl.n	800775a <_dtoa_r+0x39a>
 8007748:	4640      	mov	r0, r8
 800774a:	4649      	mov	r1, r9
 800774c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007750:	f7f8 ff72 	bl	8000638 <__aeabi_dmul>
 8007754:	3501      	adds	r5, #1
 8007756:	4680      	mov	r8, r0
 8007758:	4689      	mov	r9, r1
 800775a:	107f      	asrs	r7, r7, #1
 800775c:	3608      	adds	r6, #8
 800775e:	e7e5      	b.n	800772c <_dtoa_r+0x36c>
 8007760:	f000 809b 	beq.w	800789a <_dtoa_r+0x4da>
 8007764:	9b00      	ldr	r3, [sp, #0]
 8007766:	4f9d      	ldr	r7, [pc, #628]	; (80079dc <_dtoa_r+0x61c>)
 8007768:	425e      	negs	r6, r3
 800776a:	4b9b      	ldr	r3, [pc, #620]	; (80079d8 <_dtoa_r+0x618>)
 800776c:	f006 020f 	and.w	r2, r6, #15
 8007770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	ec51 0b19 	vmov	r0, r1, d9
 800777c:	f7f8 ff5c 	bl	8000638 <__aeabi_dmul>
 8007780:	1136      	asrs	r6, r6, #4
 8007782:	4682      	mov	sl, r0
 8007784:	468b      	mov	fp, r1
 8007786:	2300      	movs	r3, #0
 8007788:	2502      	movs	r5, #2
 800778a:	2e00      	cmp	r6, #0
 800778c:	d17a      	bne.n	8007884 <_dtoa_r+0x4c4>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1d3      	bne.n	800773a <_dtoa_r+0x37a>
 8007792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8082 	beq.w	800789e <_dtoa_r+0x4de>
 800779a:	4b91      	ldr	r3, [pc, #580]	; (80079e0 <_dtoa_r+0x620>)
 800779c:	2200      	movs	r2, #0
 800779e:	4650      	mov	r0, sl
 80077a0:	4659      	mov	r1, fp
 80077a2:	f7f9 f9bb 	bl	8000b1c <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d079      	beq.n	800789e <_dtoa_r+0x4de>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d076      	beq.n	800789e <_dtoa_r+0x4de>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	dd36      	ble.n	8007824 <_dtoa_r+0x464>
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	1e5f      	subs	r7, r3, #1
 80077be:	2200      	movs	r2, #0
 80077c0:	4b88      	ldr	r3, [pc, #544]	; (80079e4 <_dtoa_r+0x624>)
 80077c2:	f7f8 ff39 	bl	8000638 <__aeabi_dmul>
 80077c6:	9e02      	ldr	r6, [sp, #8]
 80077c8:	4682      	mov	sl, r0
 80077ca:	468b      	mov	fp, r1
 80077cc:	3501      	adds	r5, #1
 80077ce:	4628      	mov	r0, r5
 80077d0:	f7f8 fec8 	bl	8000564 <__aeabi_i2d>
 80077d4:	4652      	mov	r2, sl
 80077d6:	465b      	mov	r3, fp
 80077d8:	f7f8 ff2e 	bl	8000638 <__aeabi_dmul>
 80077dc:	4b82      	ldr	r3, [pc, #520]	; (80079e8 <_dtoa_r+0x628>)
 80077de:	2200      	movs	r2, #0
 80077e0:	f7f8 fd74 	bl	80002cc <__adddf3>
 80077e4:	46d0      	mov	r8, sl
 80077e6:	46d9      	mov	r9, fp
 80077e8:	4682      	mov	sl, r0
 80077ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	d158      	bne.n	80078a4 <_dtoa_r+0x4e4>
 80077f2:	4b7e      	ldr	r3, [pc, #504]	; (80079ec <_dtoa_r+0x62c>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f8 fd65 	bl	80002c8 <__aeabi_dsub>
 80077fe:	4652      	mov	r2, sl
 8007800:	465b      	mov	r3, fp
 8007802:	4680      	mov	r8, r0
 8007804:	4689      	mov	r9, r1
 8007806:	f7f9 f9a7 	bl	8000b58 <__aeabi_dcmpgt>
 800780a:	2800      	cmp	r0, #0
 800780c:	f040 8295 	bne.w	8007d3a <_dtoa_r+0x97a>
 8007810:	4652      	mov	r2, sl
 8007812:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007816:	4640      	mov	r0, r8
 8007818:	4649      	mov	r1, r9
 800781a:	f7f9 f97f 	bl	8000b1c <__aeabi_dcmplt>
 800781e:	2800      	cmp	r0, #0
 8007820:	f040 8289 	bne.w	8007d36 <_dtoa_r+0x976>
 8007824:	ec5b ab19 	vmov	sl, fp, d9
 8007828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800782a:	2b00      	cmp	r3, #0
 800782c:	f2c0 8148 	blt.w	8007ac0 <_dtoa_r+0x700>
 8007830:	9a00      	ldr	r2, [sp, #0]
 8007832:	2a0e      	cmp	r2, #14
 8007834:	f300 8144 	bgt.w	8007ac0 <_dtoa_r+0x700>
 8007838:	4b67      	ldr	r3, [pc, #412]	; (80079d8 <_dtoa_r+0x618>)
 800783a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	f280 80d5 	bge.w	80079f4 <_dtoa_r+0x634>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f300 80d1 	bgt.w	80079f4 <_dtoa_r+0x634>
 8007852:	f040 826f 	bne.w	8007d34 <_dtoa_r+0x974>
 8007856:	4b65      	ldr	r3, [pc, #404]	; (80079ec <_dtoa_r+0x62c>)
 8007858:	2200      	movs	r2, #0
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 feeb 	bl	8000638 <__aeabi_dmul>
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	f7f9 f96d 	bl	8000b44 <__aeabi_dcmpge>
 800786a:	9e03      	ldr	r6, [sp, #12]
 800786c:	4637      	mov	r7, r6
 800786e:	2800      	cmp	r0, #0
 8007870:	f040 8245 	bne.w	8007cfe <_dtoa_r+0x93e>
 8007874:	9d01      	ldr	r5, [sp, #4]
 8007876:	2331      	movs	r3, #49	; 0x31
 8007878:	f805 3b01 	strb.w	r3, [r5], #1
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	e240      	b.n	8007d06 <_dtoa_r+0x946>
 8007884:	07f2      	lsls	r2, r6, #31
 8007886:	d505      	bpl.n	8007894 <_dtoa_r+0x4d4>
 8007888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788c:	f7f8 fed4 	bl	8000638 <__aeabi_dmul>
 8007890:	3501      	adds	r5, #1
 8007892:	2301      	movs	r3, #1
 8007894:	1076      	asrs	r6, r6, #1
 8007896:	3708      	adds	r7, #8
 8007898:	e777      	b.n	800778a <_dtoa_r+0x3ca>
 800789a:	2502      	movs	r5, #2
 800789c:	e779      	b.n	8007792 <_dtoa_r+0x3d2>
 800789e:	9f00      	ldr	r7, [sp, #0]
 80078a0:	9e03      	ldr	r6, [sp, #12]
 80078a2:	e794      	b.n	80077ce <_dtoa_r+0x40e>
 80078a4:	9901      	ldr	r1, [sp, #4]
 80078a6:	4b4c      	ldr	r3, [pc, #304]	; (80079d8 <_dtoa_r+0x618>)
 80078a8:	4431      	add	r1, r6
 80078aa:	910d      	str	r1, [sp, #52]	; 0x34
 80078ac:	9908      	ldr	r1, [sp, #32]
 80078ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d043      	beq.n	8007942 <_dtoa_r+0x582>
 80078ba:	494d      	ldr	r1, [pc, #308]	; (80079f0 <_dtoa_r+0x630>)
 80078bc:	2000      	movs	r0, #0
 80078be:	f7f8 ffe5 	bl	800088c <__aeabi_ddiv>
 80078c2:	4652      	mov	r2, sl
 80078c4:	465b      	mov	r3, fp
 80078c6:	f7f8 fcff 	bl	80002c8 <__aeabi_dsub>
 80078ca:	9d01      	ldr	r5, [sp, #4]
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	4649      	mov	r1, r9
 80078d2:	4640      	mov	r0, r8
 80078d4:	f7f9 f960 	bl	8000b98 <__aeabi_d2iz>
 80078d8:	4606      	mov	r6, r0
 80078da:	f7f8 fe43 	bl	8000564 <__aeabi_i2d>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4640      	mov	r0, r8
 80078e4:	4649      	mov	r1, r9
 80078e6:	f7f8 fcef 	bl	80002c8 <__aeabi_dsub>
 80078ea:	3630      	adds	r6, #48	; 0x30
 80078ec:	f805 6b01 	strb.w	r6, [r5], #1
 80078f0:	4652      	mov	r2, sl
 80078f2:	465b      	mov	r3, fp
 80078f4:	4680      	mov	r8, r0
 80078f6:	4689      	mov	r9, r1
 80078f8:	f7f9 f910 	bl	8000b1c <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d163      	bne.n	80079c8 <_dtoa_r+0x608>
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	4936      	ldr	r1, [pc, #216]	; (80079e0 <_dtoa_r+0x620>)
 8007906:	2000      	movs	r0, #0
 8007908:	f7f8 fcde 	bl	80002c8 <__aeabi_dsub>
 800790c:	4652      	mov	r2, sl
 800790e:	465b      	mov	r3, fp
 8007910:	f7f9 f904 	bl	8000b1c <__aeabi_dcmplt>
 8007914:	2800      	cmp	r0, #0
 8007916:	f040 80b5 	bne.w	8007a84 <_dtoa_r+0x6c4>
 800791a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800791c:	429d      	cmp	r5, r3
 800791e:	d081      	beq.n	8007824 <_dtoa_r+0x464>
 8007920:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <_dtoa_r+0x624>)
 8007922:	2200      	movs	r2, #0
 8007924:	4650      	mov	r0, sl
 8007926:	4659      	mov	r1, fp
 8007928:	f7f8 fe86 	bl	8000638 <__aeabi_dmul>
 800792c:	4b2d      	ldr	r3, [pc, #180]	; (80079e4 <_dtoa_r+0x624>)
 800792e:	4682      	mov	sl, r0
 8007930:	468b      	mov	fp, r1
 8007932:	4640      	mov	r0, r8
 8007934:	4649      	mov	r1, r9
 8007936:	2200      	movs	r2, #0
 8007938:	f7f8 fe7e 	bl	8000638 <__aeabi_dmul>
 800793c:	4680      	mov	r8, r0
 800793e:	4689      	mov	r9, r1
 8007940:	e7c6      	b.n	80078d0 <_dtoa_r+0x510>
 8007942:	4650      	mov	r0, sl
 8007944:	4659      	mov	r1, fp
 8007946:	f7f8 fe77 	bl	8000638 <__aeabi_dmul>
 800794a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800794c:	9d01      	ldr	r5, [sp, #4]
 800794e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	4649      	mov	r1, r9
 8007956:	4640      	mov	r0, r8
 8007958:	f7f9 f91e 	bl	8000b98 <__aeabi_d2iz>
 800795c:	4606      	mov	r6, r0
 800795e:	f7f8 fe01 	bl	8000564 <__aeabi_i2d>
 8007962:	3630      	adds	r6, #48	; 0x30
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4640      	mov	r0, r8
 800796a:	4649      	mov	r1, r9
 800796c:	f7f8 fcac 	bl	80002c8 <__aeabi_dsub>
 8007970:	f805 6b01 	strb.w	r6, [r5], #1
 8007974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007976:	429d      	cmp	r5, r3
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	d124      	bne.n	80079cc <_dtoa_r+0x60c>
 8007982:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <_dtoa_r+0x630>)
 8007984:	4650      	mov	r0, sl
 8007986:	4659      	mov	r1, fp
 8007988:	f7f8 fca0 	bl	80002cc <__adddf3>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4640      	mov	r0, r8
 8007992:	4649      	mov	r1, r9
 8007994:	f7f9 f8e0 	bl	8000b58 <__aeabi_dcmpgt>
 8007998:	2800      	cmp	r0, #0
 800799a:	d173      	bne.n	8007a84 <_dtoa_r+0x6c4>
 800799c:	4652      	mov	r2, sl
 800799e:	465b      	mov	r3, fp
 80079a0:	4913      	ldr	r1, [pc, #76]	; (80079f0 <_dtoa_r+0x630>)
 80079a2:	2000      	movs	r0, #0
 80079a4:	f7f8 fc90 	bl	80002c8 <__aeabi_dsub>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f9 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f43f af35 	beq.w	8007824 <_dtoa_r+0x464>
 80079ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079bc:	1e6b      	subs	r3, r5, #1
 80079be:	930f      	str	r3, [sp, #60]	; 0x3c
 80079c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079c4:	2b30      	cmp	r3, #48	; 0x30
 80079c6:	d0f8      	beq.n	80079ba <_dtoa_r+0x5fa>
 80079c8:	9700      	str	r7, [sp, #0]
 80079ca:	e049      	b.n	8007a60 <_dtoa_r+0x6a0>
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <_dtoa_r+0x624>)
 80079ce:	f7f8 fe33 	bl	8000638 <__aeabi_dmul>
 80079d2:	4680      	mov	r8, r0
 80079d4:	4689      	mov	r9, r1
 80079d6:	e7bd      	b.n	8007954 <_dtoa_r+0x594>
 80079d8:	08009918 	.word	0x08009918
 80079dc:	080098f0 	.word	0x080098f0
 80079e0:	3ff00000 	.word	0x3ff00000
 80079e4:	40240000 	.word	0x40240000
 80079e8:	401c0000 	.word	0x401c0000
 80079ec:	40140000 	.word	0x40140000
 80079f0:	3fe00000 	.word	0x3fe00000
 80079f4:	9d01      	ldr	r5, [sp, #4]
 80079f6:	4656      	mov	r6, sl
 80079f8:	465f      	mov	r7, fp
 80079fa:	4642      	mov	r2, r8
 80079fc:	464b      	mov	r3, r9
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f8 ff43 	bl	800088c <__aeabi_ddiv>
 8007a06:	f7f9 f8c7 	bl	8000b98 <__aeabi_d2iz>
 8007a0a:	4682      	mov	sl, r0
 8007a0c:	f7f8 fdaa 	bl	8000564 <__aeabi_i2d>
 8007a10:	4642      	mov	r2, r8
 8007a12:	464b      	mov	r3, r9
 8007a14:	f7f8 fe10 	bl	8000638 <__aeabi_dmul>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a24:	f7f8 fc50 	bl	80002c8 <__aeabi_dsub>
 8007a28:	f805 6b01 	strb.w	r6, [r5], #1
 8007a2c:	9e01      	ldr	r6, [sp, #4]
 8007a2e:	9f03      	ldr	r7, [sp, #12]
 8007a30:	1bae      	subs	r6, r5, r6
 8007a32:	42b7      	cmp	r7, r6
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	d135      	bne.n	8007aa6 <_dtoa_r+0x6e6>
 8007a3a:	f7f8 fc47 	bl	80002cc <__adddf3>
 8007a3e:	4642      	mov	r2, r8
 8007a40:	464b      	mov	r3, r9
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	f7f9 f887 	bl	8000b58 <__aeabi_dcmpgt>
 8007a4a:	b9d0      	cbnz	r0, 8007a82 <_dtoa_r+0x6c2>
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f9 f858 	bl	8000b08 <__aeabi_dcmpeq>
 8007a58:	b110      	cbz	r0, 8007a60 <_dtoa_r+0x6a0>
 8007a5a:	f01a 0f01 	tst.w	sl, #1
 8007a5e:	d110      	bne.n	8007a82 <_dtoa_r+0x6c2>
 8007a60:	4620      	mov	r0, r4
 8007a62:	ee18 1a10 	vmov	r1, s16
 8007a66:	f000 fae9 	bl	800803c <_Bfree>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9800      	ldr	r0, [sp, #0]
 8007a6e:	702b      	strb	r3, [r5, #0]
 8007a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a72:	3001      	adds	r0, #1
 8007a74:	6018      	str	r0, [r3, #0]
 8007a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f43f acf1 	beq.w	8007460 <_dtoa_r+0xa0>
 8007a7e:	601d      	str	r5, [r3, #0]
 8007a80:	e4ee      	b.n	8007460 <_dtoa_r+0xa0>
 8007a82:	9f00      	ldr	r7, [sp, #0]
 8007a84:	462b      	mov	r3, r5
 8007a86:	461d      	mov	r5, r3
 8007a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a8c:	2a39      	cmp	r2, #57	; 0x39
 8007a8e:	d106      	bne.n	8007a9e <_dtoa_r+0x6de>
 8007a90:	9a01      	ldr	r2, [sp, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d1f7      	bne.n	8007a86 <_dtoa_r+0x6c6>
 8007a96:	9901      	ldr	r1, [sp, #4]
 8007a98:	2230      	movs	r2, #48	; 0x30
 8007a9a:	3701      	adds	r7, #1
 8007a9c:	700a      	strb	r2, [r1, #0]
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	3201      	adds	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	e790      	b.n	80079c8 <_dtoa_r+0x608>
 8007aa6:	4ba6      	ldr	r3, [pc, #664]	; (8007d40 <_dtoa_r+0x980>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f7f8 fdc5 	bl	8000638 <__aeabi_dmul>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	f7f9 f827 	bl	8000b08 <__aeabi_dcmpeq>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d09d      	beq.n	80079fa <_dtoa_r+0x63a>
 8007abe:	e7cf      	b.n	8007a60 <_dtoa_r+0x6a0>
 8007ac0:	9a08      	ldr	r2, [sp, #32]
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	f000 80d7 	beq.w	8007c76 <_dtoa_r+0x8b6>
 8007ac8:	9a06      	ldr	r2, [sp, #24]
 8007aca:	2a01      	cmp	r2, #1
 8007acc:	f300 80ba 	bgt.w	8007c44 <_dtoa_r+0x884>
 8007ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	f000 80b2 	beq.w	8007c3c <_dtoa_r+0x87c>
 8007ad8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007adc:	9e07      	ldr	r6, [sp, #28]
 8007ade:	9d04      	ldr	r5, [sp, #16]
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	441a      	add	r2, r3
 8007ae4:	9204      	str	r2, [sp, #16]
 8007ae6:	9a05      	ldr	r2, [sp, #20]
 8007ae8:	2101      	movs	r1, #1
 8007aea:	441a      	add	r2, r3
 8007aec:	4620      	mov	r0, r4
 8007aee:	9205      	str	r2, [sp, #20]
 8007af0:	f000 fb5c 	bl	80081ac <__i2b>
 8007af4:	4607      	mov	r7, r0
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	dd0c      	ble.n	8007b14 <_dtoa_r+0x754>
 8007afa:	9b05      	ldr	r3, [sp, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd09      	ble.n	8007b14 <_dtoa_r+0x754>
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	bfa8      	it	ge
 8007b06:	462b      	movge	r3, r5
 8007b08:	1ad2      	subs	r2, r2, r3
 8007b0a:	9204      	str	r2, [sp, #16]
 8007b0c:	9a05      	ldr	r2, [sp, #20]
 8007b0e:	1aed      	subs	r5, r5, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	b31b      	cbz	r3, 8007b60 <_dtoa_r+0x7a0>
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80af 	beq.w	8007c7e <_dtoa_r+0x8be>
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	dd13      	ble.n	8007b4c <_dtoa_r+0x78c>
 8007b24:	4639      	mov	r1, r7
 8007b26:	4632      	mov	r2, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fbff 	bl	800832c <__pow5mult>
 8007b2e:	ee18 2a10 	vmov	r2, s16
 8007b32:	4601      	mov	r1, r0
 8007b34:	4607      	mov	r7, r0
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 fb4e 	bl	80081d8 <__multiply>
 8007b3c:	ee18 1a10 	vmov	r1, s16
 8007b40:	4680      	mov	r8, r0
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 fa7a 	bl	800803c <_Bfree>
 8007b48:	ee08 8a10 	vmov	s16, r8
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	1b9a      	subs	r2, r3, r6
 8007b50:	d006      	beq.n	8007b60 <_dtoa_r+0x7a0>
 8007b52:	ee18 1a10 	vmov	r1, s16
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fbe8 	bl	800832c <__pow5mult>
 8007b5c:	ee08 0a10 	vmov	s16, r0
 8007b60:	2101      	movs	r1, #1
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fb22 	bl	80081ac <__i2b>
 8007b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	f340 8088 	ble.w	8007c82 <_dtoa_r+0x8c2>
 8007b72:	461a      	mov	r2, r3
 8007b74:	4601      	mov	r1, r0
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fbd8 	bl	800832c <__pow5mult>
 8007b7c:	9b06      	ldr	r3, [sp, #24]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	4606      	mov	r6, r0
 8007b82:	f340 8081 	ble.w	8007c88 <_dtoa_r+0x8c8>
 8007b86:	f04f 0800 	mov.w	r8, #0
 8007b8a:	6933      	ldr	r3, [r6, #16]
 8007b8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b90:	6918      	ldr	r0, [r3, #16]
 8007b92:	f000 fabb 	bl	800810c <__hi0bits>
 8007b96:	f1c0 0020 	rsb	r0, r0, #32
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	4418      	add	r0, r3
 8007b9e:	f010 001f 	ands.w	r0, r0, #31
 8007ba2:	f000 8092 	beq.w	8007cca <_dtoa_r+0x90a>
 8007ba6:	f1c0 0320 	rsb	r3, r0, #32
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	f340 808a 	ble.w	8007cc4 <_dtoa_r+0x904>
 8007bb0:	f1c0 001c 	rsb	r0, r0, #28
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	4403      	add	r3, r0
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	4403      	add	r3, r0
 8007bbe:	4405      	add	r5, r0
 8007bc0:	9305      	str	r3, [sp, #20]
 8007bc2:	9b04      	ldr	r3, [sp, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd07      	ble.n	8007bd8 <_dtoa_r+0x818>
 8007bc8:	ee18 1a10 	vmov	r1, s16
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fc06 	bl	80083e0 <__lshift>
 8007bd4:	ee08 0a10 	vmov	s16, r0
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dd05      	ble.n	8007bea <_dtoa_r+0x82a>
 8007bde:	4631      	mov	r1, r6
 8007be0:	461a      	mov	r2, r3
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fbfc 	bl	80083e0 <__lshift>
 8007be8:	4606      	mov	r6, r0
 8007bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d06e      	beq.n	8007cce <_dtoa_r+0x90e>
 8007bf0:	ee18 0a10 	vmov	r0, s16
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	f000 fc63 	bl	80084c0 <__mcmp>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	da67      	bge.n	8007cce <_dtoa_r+0x90e>
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	ee18 1a10 	vmov	r1, s16
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	220a      	movs	r2, #10
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fa37 	bl	8008080 <__multadd>
 8007c12:	9b08      	ldr	r3, [sp, #32]
 8007c14:	ee08 0a10 	vmov	s16, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 81b1 	beq.w	8007f80 <_dtoa_r+0xbc0>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4639      	mov	r1, r7
 8007c22:	220a      	movs	r2, #10
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fa2b 	bl	8008080 <__multadd>
 8007c2a:	9b02      	ldr	r3, [sp, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	4607      	mov	r7, r0
 8007c30:	f300 808e 	bgt.w	8007d50 <_dtoa_r+0x990>
 8007c34:	9b06      	ldr	r3, [sp, #24]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	dc51      	bgt.n	8007cde <_dtoa_r+0x91e>
 8007c3a:	e089      	b.n	8007d50 <_dtoa_r+0x990>
 8007c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c42:	e74b      	b.n	8007adc <_dtoa_r+0x71c>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	1e5e      	subs	r6, r3, #1
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	42b3      	cmp	r3, r6
 8007c4c:	bfbf      	itttt	lt
 8007c4e:	9b07      	ldrlt	r3, [sp, #28]
 8007c50:	9607      	strlt	r6, [sp, #28]
 8007c52:	1af2      	sublt	r2, r6, r3
 8007c54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c56:	bfb6      	itet	lt
 8007c58:	189b      	addlt	r3, r3, r2
 8007c5a:	1b9e      	subge	r6, r3, r6
 8007c5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	bfb8      	it	lt
 8007c62:	2600      	movlt	r6, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bfb7      	itett	lt
 8007c68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c70:	1a9d      	sublt	r5, r3, r2
 8007c72:	2300      	movlt	r3, #0
 8007c74:	e734      	b.n	8007ae0 <_dtoa_r+0x720>
 8007c76:	9e07      	ldr	r6, [sp, #28]
 8007c78:	9d04      	ldr	r5, [sp, #16]
 8007c7a:	9f08      	ldr	r7, [sp, #32]
 8007c7c:	e73b      	b.n	8007af6 <_dtoa_r+0x736>
 8007c7e:	9a07      	ldr	r2, [sp, #28]
 8007c80:	e767      	b.n	8007b52 <_dtoa_r+0x792>
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	dc18      	bgt.n	8007cba <_dtoa_r+0x8fa>
 8007c88:	f1ba 0f00 	cmp.w	sl, #0
 8007c8c:	d115      	bne.n	8007cba <_dtoa_r+0x8fa>
 8007c8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c92:	b993      	cbnz	r3, 8007cba <_dtoa_r+0x8fa>
 8007c94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c98:	0d1b      	lsrs	r3, r3, #20
 8007c9a:	051b      	lsls	r3, r3, #20
 8007c9c:	b183      	cbz	r3, 8007cc0 <_dtoa_r+0x900>
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	9b05      	ldr	r3, [sp, #20]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	9305      	str	r3, [sp, #20]
 8007caa:	f04f 0801 	mov.w	r8, #1
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f af6a 	bne.w	8007b8a <_dtoa_r+0x7ca>
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	e76f      	b.n	8007b9a <_dtoa_r+0x7da>
 8007cba:	f04f 0800 	mov.w	r8, #0
 8007cbe:	e7f6      	b.n	8007cae <_dtoa_r+0x8ee>
 8007cc0:	4698      	mov	r8, r3
 8007cc2:	e7f4      	b.n	8007cae <_dtoa_r+0x8ee>
 8007cc4:	f43f af7d 	beq.w	8007bc2 <_dtoa_r+0x802>
 8007cc8:	4618      	mov	r0, r3
 8007cca:	301c      	adds	r0, #28
 8007ccc:	e772      	b.n	8007bb4 <_dtoa_r+0x7f4>
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	dc37      	bgt.n	8007d44 <_dtoa_r+0x984>
 8007cd4:	9b06      	ldr	r3, [sp, #24]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	dd34      	ble.n	8007d44 <_dtoa_r+0x984>
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	b96b      	cbnz	r3, 8007cfe <_dtoa_r+0x93e>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 f9ca 	bl	8008080 <__multadd>
 8007cec:	4601      	mov	r1, r0
 8007cee:	4606      	mov	r6, r0
 8007cf0:	ee18 0a10 	vmov	r0, s16
 8007cf4:	f000 fbe4 	bl	80084c0 <__mcmp>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f73f adbb 	bgt.w	8007874 <_dtoa_r+0x4b4>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	9d01      	ldr	r5, [sp, #4]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 f995 	bl	800803c <_Bfree>
 8007d12:	2f00      	cmp	r7, #0
 8007d14:	f43f aea4 	beq.w	8007a60 <_dtoa_r+0x6a0>
 8007d18:	f1b8 0f00 	cmp.w	r8, #0
 8007d1c:	d005      	beq.n	8007d2a <_dtoa_r+0x96a>
 8007d1e:	45b8      	cmp	r8, r7
 8007d20:	d003      	beq.n	8007d2a <_dtoa_r+0x96a>
 8007d22:	4641      	mov	r1, r8
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 f989 	bl	800803c <_Bfree>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f985 	bl	800803c <_Bfree>
 8007d32:	e695      	b.n	8007a60 <_dtoa_r+0x6a0>
 8007d34:	2600      	movs	r6, #0
 8007d36:	4637      	mov	r7, r6
 8007d38:	e7e1      	b.n	8007cfe <_dtoa_r+0x93e>
 8007d3a:	9700      	str	r7, [sp, #0]
 8007d3c:	4637      	mov	r7, r6
 8007d3e:	e599      	b.n	8007874 <_dtoa_r+0x4b4>
 8007d40:	40240000 	.word	0x40240000
 8007d44:	9b08      	ldr	r3, [sp, #32]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80ca 	beq.w	8007ee0 <_dtoa_r+0xb20>
 8007d4c:	9b03      	ldr	r3, [sp, #12]
 8007d4e:	9302      	str	r3, [sp, #8]
 8007d50:	2d00      	cmp	r5, #0
 8007d52:	dd05      	ble.n	8007d60 <_dtoa_r+0x9a0>
 8007d54:	4639      	mov	r1, r7
 8007d56:	462a      	mov	r2, r5
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fb41 	bl	80083e0 <__lshift>
 8007d5e:	4607      	mov	r7, r0
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	d05b      	beq.n	8007e1e <_dtoa_r+0xa5e>
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 f927 	bl	8007fbc <_Balloc>
 8007d6e:	4605      	mov	r5, r0
 8007d70:	b928      	cbnz	r0, 8007d7e <_dtoa_r+0x9be>
 8007d72:	4b87      	ldr	r3, [pc, #540]	; (8007f90 <_dtoa_r+0xbd0>)
 8007d74:	4602      	mov	r2, r0
 8007d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d7a:	f7ff bb3b 	b.w	80073f4 <_dtoa_r+0x34>
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	3202      	adds	r2, #2
 8007d82:	0092      	lsls	r2, r2, #2
 8007d84:	f107 010c 	add.w	r1, r7, #12
 8007d88:	300c      	adds	r0, #12
 8007d8a:	f7fe fcc9 	bl	8006720 <memcpy>
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4629      	mov	r1, r5
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fb24 	bl	80083e0 <__lshift>
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	f103 0901 	add.w	r9, r3, #1
 8007d9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	9305      	str	r3, [sp, #20]
 8007da6:	f00a 0301 	and.w	r3, sl, #1
 8007daa:	46b8      	mov	r8, r7
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	4607      	mov	r7, r0
 8007db0:	4631      	mov	r1, r6
 8007db2:	ee18 0a10 	vmov	r0, s16
 8007db6:	f7ff fa77 	bl	80072a8 <quorem>
 8007dba:	4641      	mov	r1, r8
 8007dbc:	9002      	str	r0, [sp, #8]
 8007dbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dc2:	ee18 0a10 	vmov	r0, s16
 8007dc6:	f000 fb7b 	bl	80084c0 <__mcmp>
 8007dca:	463a      	mov	r2, r7
 8007dcc:	9003      	str	r0, [sp, #12]
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 fb91 	bl	80084f8 <__mdiff>
 8007dd6:	68c2      	ldr	r2, [r0, #12]
 8007dd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ddc:	4605      	mov	r5, r0
 8007dde:	bb02      	cbnz	r2, 8007e22 <_dtoa_r+0xa62>
 8007de0:	4601      	mov	r1, r0
 8007de2:	ee18 0a10 	vmov	r0, s16
 8007de6:	f000 fb6b 	bl	80084c0 <__mcmp>
 8007dea:	4602      	mov	r2, r0
 8007dec:	4629      	mov	r1, r5
 8007dee:	4620      	mov	r0, r4
 8007df0:	9207      	str	r2, [sp, #28]
 8007df2:	f000 f923 	bl	800803c <_Bfree>
 8007df6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007dfa:	ea43 0102 	orr.w	r1, r3, r2
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	430b      	orrs	r3, r1
 8007e02:	464d      	mov	r5, r9
 8007e04:	d10f      	bne.n	8007e26 <_dtoa_r+0xa66>
 8007e06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e0a:	d02a      	beq.n	8007e62 <_dtoa_r+0xaa2>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dd02      	ble.n	8007e18 <_dtoa_r+0xa58>
 8007e12:	9b02      	ldr	r3, [sp, #8]
 8007e14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e18:	f88b a000 	strb.w	sl, [fp]
 8007e1c:	e775      	b.n	8007d0a <_dtoa_r+0x94a>
 8007e1e:	4638      	mov	r0, r7
 8007e20:	e7ba      	b.n	8007d98 <_dtoa_r+0x9d8>
 8007e22:	2201      	movs	r2, #1
 8007e24:	e7e2      	b.n	8007dec <_dtoa_r+0xa2c>
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	db04      	blt.n	8007e36 <_dtoa_r+0xa76>
 8007e2c:	9906      	ldr	r1, [sp, #24]
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	9904      	ldr	r1, [sp, #16]
 8007e32:	430b      	orrs	r3, r1
 8007e34:	d122      	bne.n	8007e7c <_dtoa_r+0xabc>
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	ddee      	ble.n	8007e18 <_dtoa_r+0xa58>
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 facd 	bl	80083e0 <__lshift>
 8007e46:	4631      	mov	r1, r6
 8007e48:	ee08 0a10 	vmov	s16, r0
 8007e4c:	f000 fb38 	bl	80084c0 <__mcmp>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dc03      	bgt.n	8007e5c <_dtoa_r+0xa9c>
 8007e54:	d1e0      	bne.n	8007e18 <_dtoa_r+0xa58>
 8007e56:	f01a 0f01 	tst.w	sl, #1
 8007e5a:	d0dd      	beq.n	8007e18 <_dtoa_r+0xa58>
 8007e5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e60:	d1d7      	bne.n	8007e12 <_dtoa_r+0xa52>
 8007e62:	2339      	movs	r3, #57	; 0x39
 8007e64:	f88b 3000 	strb.w	r3, [fp]
 8007e68:	462b      	mov	r3, r5
 8007e6a:	461d      	mov	r5, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e72:	2a39      	cmp	r2, #57	; 0x39
 8007e74:	d071      	beq.n	8007f5a <_dtoa_r+0xb9a>
 8007e76:	3201      	adds	r2, #1
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	e746      	b.n	8007d0a <_dtoa_r+0x94a>
 8007e7c:	2a00      	cmp	r2, #0
 8007e7e:	dd07      	ble.n	8007e90 <_dtoa_r+0xad0>
 8007e80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e84:	d0ed      	beq.n	8007e62 <_dtoa_r+0xaa2>
 8007e86:	f10a 0301 	add.w	r3, sl, #1
 8007e8a:	f88b 3000 	strb.w	r3, [fp]
 8007e8e:	e73c      	b.n	8007d0a <_dtoa_r+0x94a>
 8007e90:	9b05      	ldr	r3, [sp, #20]
 8007e92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e96:	4599      	cmp	r9, r3
 8007e98:	d047      	beq.n	8007f2a <_dtoa_r+0xb6a>
 8007e9a:	ee18 1a10 	vmov	r1, s16
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 f8ec 	bl	8008080 <__multadd>
 8007ea8:	45b8      	cmp	r8, r7
 8007eaa:	ee08 0a10 	vmov	s16, r0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	f04f 020a 	mov.w	r2, #10
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4620      	mov	r0, r4
 8007eba:	d106      	bne.n	8007eca <_dtoa_r+0xb0a>
 8007ebc:	f000 f8e0 	bl	8008080 <__multadd>
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	4607      	mov	r7, r0
 8007ec4:	f109 0901 	add.w	r9, r9, #1
 8007ec8:	e772      	b.n	8007db0 <_dtoa_r+0x9f0>
 8007eca:	f000 f8d9 	bl	8008080 <__multadd>
 8007ece:	4639      	mov	r1, r7
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 f8d2 	bl	8008080 <__multadd>
 8007edc:	4607      	mov	r7, r0
 8007ede:	e7f1      	b.n	8007ec4 <_dtoa_r+0xb04>
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	9302      	str	r3, [sp, #8]
 8007ee4:	9d01      	ldr	r5, [sp, #4]
 8007ee6:	ee18 0a10 	vmov	r0, s16
 8007eea:	4631      	mov	r1, r6
 8007eec:	f7ff f9dc 	bl	80072a8 <quorem>
 8007ef0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ef4:	9b01      	ldr	r3, [sp, #4]
 8007ef6:	f805 ab01 	strb.w	sl, [r5], #1
 8007efa:	1aea      	subs	r2, r5, r3
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	4293      	cmp	r3, r2
 8007f00:	dd09      	ble.n	8007f16 <_dtoa_r+0xb56>
 8007f02:	ee18 1a10 	vmov	r1, s16
 8007f06:	2300      	movs	r3, #0
 8007f08:	220a      	movs	r2, #10
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f8b8 	bl	8008080 <__multadd>
 8007f10:	ee08 0a10 	vmov	s16, r0
 8007f14:	e7e7      	b.n	8007ee6 <_dtoa_r+0xb26>
 8007f16:	9b02      	ldr	r3, [sp, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfc8      	it	gt
 8007f1c:	461d      	movgt	r5, r3
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	bfd8      	it	le
 8007f22:	2501      	movle	r5, #1
 8007f24:	441d      	add	r5, r3
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	ee18 1a10 	vmov	r1, s16
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fa55 	bl	80083e0 <__lshift>
 8007f36:	4631      	mov	r1, r6
 8007f38:	ee08 0a10 	vmov	s16, r0
 8007f3c:	f000 fac0 	bl	80084c0 <__mcmp>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	dc91      	bgt.n	8007e68 <_dtoa_r+0xaa8>
 8007f44:	d102      	bne.n	8007f4c <_dtoa_r+0xb8c>
 8007f46:	f01a 0f01 	tst.w	sl, #1
 8007f4a:	d18d      	bne.n	8007e68 <_dtoa_r+0xaa8>
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	461d      	mov	r5, r3
 8007f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f54:	2a30      	cmp	r2, #48	; 0x30
 8007f56:	d0fa      	beq.n	8007f4e <_dtoa_r+0xb8e>
 8007f58:	e6d7      	b.n	8007d0a <_dtoa_r+0x94a>
 8007f5a:	9a01      	ldr	r2, [sp, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d184      	bne.n	8007e6a <_dtoa_r+0xaaa>
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2331      	movs	r3, #49	; 0x31
 8007f68:	7013      	strb	r3, [r2, #0]
 8007f6a:	e6ce      	b.n	8007d0a <_dtoa_r+0x94a>
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <_dtoa_r+0xbd4>)
 8007f6e:	f7ff ba95 	b.w	800749c <_dtoa_r+0xdc>
 8007f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f47f aa6e 	bne.w	8007456 <_dtoa_r+0x96>
 8007f7a:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <_dtoa_r+0xbd8>)
 8007f7c:	f7ff ba8e 	b.w	800749c <_dtoa_r+0xdc>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dcae      	bgt.n	8007ee4 <_dtoa_r+0xb24>
 8007f86:	9b06      	ldr	r3, [sp, #24]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	f73f aea8 	bgt.w	8007cde <_dtoa_r+0x91e>
 8007f8e:	e7a9      	b.n	8007ee4 <_dtoa_r+0xb24>
 8007f90:	08009883 	.word	0x08009883
 8007f94:	080097e0 	.word	0x080097e0
 8007f98:	08009804 	.word	0x08009804

08007f9c <_localeconv_r>:
 8007f9c:	4800      	ldr	r0, [pc, #0]	; (8007fa0 <_localeconv_r+0x4>)
 8007f9e:	4770      	bx	lr
 8007fa0:	2000016c 	.word	0x2000016c

08007fa4 <__malloc_lock>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__malloc_lock+0x8>)
 8007fa6:	f000 bd30 	b.w	8008a0a <__retarget_lock_acquire_recursive>
 8007faa:	bf00      	nop
 8007fac:	200003b4 	.word	0x200003b4

08007fb0 <__malloc_unlock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <__malloc_unlock+0x8>)
 8007fb2:	f000 bd2b 	b.w	8008a0c <__retarget_lock_release_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	200003b4 	.word	0x200003b4

08007fbc <_Balloc>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	b976      	cbnz	r6, 8007fe4 <_Balloc+0x28>
 8007fc6:	2010      	movs	r0, #16
 8007fc8:	f7fe fb8a 	bl	80066e0 <malloc>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6260      	str	r0, [r4, #36]	; 0x24
 8007fd0:	b920      	cbnz	r0, 8007fdc <_Balloc+0x20>
 8007fd2:	4b18      	ldr	r3, [pc, #96]	; (8008034 <_Balloc+0x78>)
 8007fd4:	4818      	ldr	r0, [pc, #96]	; (8008038 <_Balloc+0x7c>)
 8007fd6:	2166      	movs	r1, #102	; 0x66
 8007fd8:	f000 fce6 	bl	80089a8 <__assert_func>
 8007fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fe0:	6006      	str	r6, [r0, #0]
 8007fe2:	60c6      	str	r6, [r0, #12]
 8007fe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fe6:	68f3      	ldr	r3, [r6, #12]
 8007fe8:	b183      	cbz	r3, 800800c <_Balloc+0x50>
 8007fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ff2:	b9b8      	cbnz	r0, 8008024 <_Balloc+0x68>
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	fa01 f605 	lsl.w	r6, r1, r5
 8007ffa:	1d72      	adds	r2, r6, #5
 8007ffc:	0092      	lsls	r2, r2, #2
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fb60 	bl	80086c4 <_calloc_r>
 8008004:	b160      	cbz	r0, 8008020 <_Balloc+0x64>
 8008006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800800a:	e00e      	b.n	800802a <_Balloc+0x6e>
 800800c:	2221      	movs	r2, #33	; 0x21
 800800e:	2104      	movs	r1, #4
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fb57 	bl	80086c4 <_calloc_r>
 8008016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008018:	60f0      	str	r0, [r6, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e4      	bne.n	8007fea <_Balloc+0x2e>
 8008020:	2000      	movs	r0, #0
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	6802      	ldr	r2, [r0, #0]
 8008026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800802a:	2300      	movs	r3, #0
 800802c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008030:	e7f7      	b.n	8008022 <_Balloc+0x66>
 8008032:	bf00      	nop
 8008034:	08009811 	.word	0x08009811
 8008038:	08009894 	.word	0x08009894

0800803c <_Bfree>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008040:	4605      	mov	r5, r0
 8008042:	460c      	mov	r4, r1
 8008044:	b976      	cbnz	r6, 8008064 <_Bfree+0x28>
 8008046:	2010      	movs	r0, #16
 8008048:	f7fe fb4a 	bl	80066e0 <malloc>
 800804c:	4602      	mov	r2, r0
 800804e:	6268      	str	r0, [r5, #36]	; 0x24
 8008050:	b920      	cbnz	r0, 800805c <_Bfree+0x20>
 8008052:	4b09      	ldr	r3, [pc, #36]	; (8008078 <_Bfree+0x3c>)
 8008054:	4809      	ldr	r0, [pc, #36]	; (800807c <_Bfree+0x40>)
 8008056:	218a      	movs	r1, #138	; 0x8a
 8008058:	f000 fca6 	bl	80089a8 <__assert_func>
 800805c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008060:	6006      	str	r6, [r0, #0]
 8008062:	60c6      	str	r6, [r0, #12]
 8008064:	b13c      	cbz	r4, 8008076 <_Bfree+0x3a>
 8008066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008068:	6862      	ldr	r2, [r4, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008070:	6021      	str	r1, [r4, #0]
 8008072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	08009811 	.word	0x08009811
 800807c:	08009894 	.word	0x08009894

08008080 <__multadd>:
 8008080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008084:	690d      	ldr	r5, [r1, #16]
 8008086:	4607      	mov	r7, r0
 8008088:	460c      	mov	r4, r1
 800808a:	461e      	mov	r6, r3
 800808c:	f101 0c14 	add.w	ip, r1, #20
 8008090:	2000      	movs	r0, #0
 8008092:	f8dc 3000 	ldr.w	r3, [ip]
 8008096:	b299      	uxth	r1, r3
 8008098:	fb02 6101 	mla	r1, r2, r1, r6
 800809c:	0c1e      	lsrs	r6, r3, #16
 800809e:	0c0b      	lsrs	r3, r1, #16
 80080a0:	fb02 3306 	mla	r3, r2, r6, r3
 80080a4:	b289      	uxth	r1, r1
 80080a6:	3001      	adds	r0, #1
 80080a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080ac:	4285      	cmp	r5, r0
 80080ae:	f84c 1b04 	str.w	r1, [ip], #4
 80080b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080b6:	dcec      	bgt.n	8008092 <__multadd+0x12>
 80080b8:	b30e      	cbz	r6, 80080fe <__multadd+0x7e>
 80080ba:	68a3      	ldr	r3, [r4, #8]
 80080bc:	42ab      	cmp	r3, r5
 80080be:	dc19      	bgt.n	80080f4 <__multadd+0x74>
 80080c0:	6861      	ldr	r1, [r4, #4]
 80080c2:	4638      	mov	r0, r7
 80080c4:	3101      	adds	r1, #1
 80080c6:	f7ff ff79 	bl	8007fbc <_Balloc>
 80080ca:	4680      	mov	r8, r0
 80080cc:	b928      	cbnz	r0, 80080da <__multadd+0x5a>
 80080ce:	4602      	mov	r2, r0
 80080d0:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <__multadd+0x84>)
 80080d2:	480d      	ldr	r0, [pc, #52]	; (8008108 <__multadd+0x88>)
 80080d4:	21b5      	movs	r1, #181	; 0xb5
 80080d6:	f000 fc67 	bl	80089a8 <__assert_func>
 80080da:	6922      	ldr	r2, [r4, #16]
 80080dc:	3202      	adds	r2, #2
 80080de:	f104 010c 	add.w	r1, r4, #12
 80080e2:	0092      	lsls	r2, r2, #2
 80080e4:	300c      	adds	r0, #12
 80080e6:	f7fe fb1b 	bl	8006720 <memcpy>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff ffa5 	bl	800803c <_Bfree>
 80080f2:	4644      	mov	r4, r8
 80080f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080f8:	3501      	adds	r5, #1
 80080fa:	615e      	str	r6, [r3, #20]
 80080fc:	6125      	str	r5, [r4, #16]
 80080fe:	4620      	mov	r0, r4
 8008100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008104:	08009883 	.word	0x08009883
 8008108:	08009894 	.word	0x08009894

0800810c <__hi0bits>:
 800810c:	0c03      	lsrs	r3, r0, #16
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	b9d3      	cbnz	r3, 8008148 <__hi0bits+0x3c>
 8008112:	0400      	lsls	r0, r0, #16
 8008114:	2310      	movs	r3, #16
 8008116:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800811a:	bf04      	itt	eq
 800811c:	0200      	lsleq	r0, r0, #8
 800811e:	3308      	addeq	r3, #8
 8008120:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008124:	bf04      	itt	eq
 8008126:	0100      	lsleq	r0, r0, #4
 8008128:	3304      	addeq	r3, #4
 800812a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800812e:	bf04      	itt	eq
 8008130:	0080      	lsleq	r0, r0, #2
 8008132:	3302      	addeq	r3, #2
 8008134:	2800      	cmp	r0, #0
 8008136:	db05      	blt.n	8008144 <__hi0bits+0x38>
 8008138:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800813c:	f103 0301 	add.w	r3, r3, #1
 8008140:	bf08      	it	eq
 8008142:	2320      	moveq	r3, #32
 8008144:	4618      	mov	r0, r3
 8008146:	4770      	bx	lr
 8008148:	2300      	movs	r3, #0
 800814a:	e7e4      	b.n	8008116 <__hi0bits+0xa>

0800814c <__lo0bits>:
 800814c:	6803      	ldr	r3, [r0, #0]
 800814e:	f013 0207 	ands.w	r2, r3, #7
 8008152:	4601      	mov	r1, r0
 8008154:	d00b      	beq.n	800816e <__lo0bits+0x22>
 8008156:	07da      	lsls	r2, r3, #31
 8008158:	d423      	bmi.n	80081a2 <__lo0bits+0x56>
 800815a:	0798      	lsls	r0, r3, #30
 800815c:	bf49      	itett	mi
 800815e:	085b      	lsrmi	r3, r3, #1
 8008160:	089b      	lsrpl	r3, r3, #2
 8008162:	2001      	movmi	r0, #1
 8008164:	600b      	strmi	r3, [r1, #0]
 8008166:	bf5c      	itt	pl
 8008168:	600b      	strpl	r3, [r1, #0]
 800816a:	2002      	movpl	r0, #2
 800816c:	4770      	bx	lr
 800816e:	b298      	uxth	r0, r3
 8008170:	b9a8      	cbnz	r0, 800819e <__lo0bits+0x52>
 8008172:	0c1b      	lsrs	r3, r3, #16
 8008174:	2010      	movs	r0, #16
 8008176:	b2da      	uxtb	r2, r3
 8008178:	b90a      	cbnz	r2, 800817e <__lo0bits+0x32>
 800817a:	3008      	adds	r0, #8
 800817c:	0a1b      	lsrs	r3, r3, #8
 800817e:	071a      	lsls	r2, r3, #28
 8008180:	bf04      	itt	eq
 8008182:	091b      	lsreq	r3, r3, #4
 8008184:	3004      	addeq	r0, #4
 8008186:	079a      	lsls	r2, r3, #30
 8008188:	bf04      	itt	eq
 800818a:	089b      	lsreq	r3, r3, #2
 800818c:	3002      	addeq	r0, #2
 800818e:	07da      	lsls	r2, r3, #31
 8008190:	d403      	bmi.n	800819a <__lo0bits+0x4e>
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	f100 0001 	add.w	r0, r0, #1
 8008198:	d005      	beq.n	80081a6 <__lo0bits+0x5a>
 800819a:	600b      	str	r3, [r1, #0]
 800819c:	4770      	bx	lr
 800819e:	4610      	mov	r0, r2
 80081a0:	e7e9      	b.n	8008176 <__lo0bits+0x2a>
 80081a2:	2000      	movs	r0, #0
 80081a4:	4770      	bx	lr
 80081a6:	2020      	movs	r0, #32
 80081a8:	4770      	bx	lr
	...

080081ac <__i2b>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	460c      	mov	r4, r1
 80081b0:	2101      	movs	r1, #1
 80081b2:	f7ff ff03 	bl	8007fbc <_Balloc>
 80081b6:	4602      	mov	r2, r0
 80081b8:	b928      	cbnz	r0, 80081c6 <__i2b+0x1a>
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <__i2b+0x24>)
 80081bc:	4805      	ldr	r0, [pc, #20]	; (80081d4 <__i2b+0x28>)
 80081be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081c2:	f000 fbf1 	bl	80089a8 <__assert_func>
 80081c6:	2301      	movs	r3, #1
 80081c8:	6144      	str	r4, [r0, #20]
 80081ca:	6103      	str	r3, [r0, #16]
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	bf00      	nop
 80081d0:	08009883 	.word	0x08009883
 80081d4:	08009894 	.word	0x08009894

080081d8 <__multiply>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	4691      	mov	r9, r2
 80081de:	690a      	ldr	r2, [r1, #16]
 80081e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	bfb8      	it	lt
 80081e8:	460b      	movlt	r3, r1
 80081ea:	460c      	mov	r4, r1
 80081ec:	bfbc      	itt	lt
 80081ee:	464c      	movlt	r4, r9
 80081f0:	4699      	movlt	r9, r3
 80081f2:	6927      	ldr	r7, [r4, #16]
 80081f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	6861      	ldr	r1, [r4, #4]
 80081fc:	eb07 060a 	add.w	r6, r7, sl
 8008200:	42b3      	cmp	r3, r6
 8008202:	b085      	sub	sp, #20
 8008204:	bfb8      	it	lt
 8008206:	3101      	addlt	r1, #1
 8008208:	f7ff fed8 	bl	8007fbc <_Balloc>
 800820c:	b930      	cbnz	r0, 800821c <__multiply+0x44>
 800820e:	4602      	mov	r2, r0
 8008210:	4b44      	ldr	r3, [pc, #272]	; (8008324 <__multiply+0x14c>)
 8008212:	4845      	ldr	r0, [pc, #276]	; (8008328 <__multiply+0x150>)
 8008214:	f240 115d 	movw	r1, #349	; 0x15d
 8008218:	f000 fbc6 	bl	80089a8 <__assert_func>
 800821c:	f100 0514 	add.w	r5, r0, #20
 8008220:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008224:	462b      	mov	r3, r5
 8008226:	2200      	movs	r2, #0
 8008228:	4543      	cmp	r3, r8
 800822a:	d321      	bcc.n	8008270 <__multiply+0x98>
 800822c:	f104 0314 	add.w	r3, r4, #20
 8008230:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008234:	f109 0314 	add.w	r3, r9, #20
 8008238:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800823c:	9202      	str	r2, [sp, #8]
 800823e:	1b3a      	subs	r2, r7, r4
 8008240:	3a15      	subs	r2, #21
 8008242:	f022 0203 	bic.w	r2, r2, #3
 8008246:	3204      	adds	r2, #4
 8008248:	f104 0115 	add.w	r1, r4, #21
 800824c:	428f      	cmp	r7, r1
 800824e:	bf38      	it	cc
 8008250:	2204      	movcc	r2, #4
 8008252:	9201      	str	r2, [sp, #4]
 8008254:	9a02      	ldr	r2, [sp, #8]
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	429a      	cmp	r2, r3
 800825a:	d80c      	bhi.n	8008276 <__multiply+0x9e>
 800825c:	2e00      	cmp	r6, #0
 800825e:	dd03      	ble.n	8008268 <__multiply+0x90>
 8008260:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008264:	2b00      	cmp	r3, #0
 8008266:	d05a      	beq.n	800831e <__multiply+0x146>
 8008268:	6106      	str	r6, [r0, #16]
 800826a:	b005      	add	sp, #20
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	f843 2b04 	str.w	r2, [r3], #4
 8008274:	e7d8      	b.n	8008228 <__multiply+0x50>
 8008276:	f8b3 a000 	ldrh.w	sl, [r3]
 800827a:	f1ba 0f00 	cmp.w	sl, #0
 800827e:	d024      	beq.n	80082ca <__multiply+0xf2>
 8008280:	f104 0e14 	add.w	lr, r4, #20
 8008284:	46a9      	mov	r9, r5
 8008286:	f04f 0c00 	mov.w	ip, #0
 800828a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800828e:	f8d9 1000 	ldr.w	r1, [r9]
 8008292:	fa1f fb82 	uxth.w	fp, r2
 8008296:	b289      	uxth	r1, r1
 8008298:	fb0a 110b 	mla	r1, sl, fp, r1
 800829c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082a0:	f8d9 2000 	ldr.w	r2, [r9]
 80082a4:	4461      	add	r1, ip
 80082a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80082ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082b2:	b289      	uxth	r1, r1
 80082b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082b8:	4577      	cmp	r7, lr
 80082ba:	f849 1b04 	str.w	r1, [r9], #4
 80082be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082c2:	d8e2      	bhi.n	800828a <__multiply+0xb2>
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	f845 c002 	str.w	ip, [r5, r2]
 80082ca:	9a03      	ldr	r2, [sp, #12]
 80082cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082d0:	3304      	adds	r3, #4
 80082d2:	f1b9 0f00 	cmp.w	r9, #0
 80082d6:	d020      	beq.n	800831a <__multiply+0x142>
 80082d8:	6829      	ldr	r1, [r5, #0]
 80082da:	f104 0c14 	add.w	ip, r4, #20
 80082de:	46ae      	mov	lr, r5
 80082e0:	f04f 0a00 	mov.w	sl, #0
 80082e4:	f8bc b000 	ldrh.w	fp, [ip]
 80082e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082ec:	fb09 220b 	mla	r2, r9, fp, r2
 80082f0:	4492      	add	sl, r2
 80082f2:	b289      	uxth	r1, r1
 80082f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082f8:	f84e 1b04 	str.w	r1, [lr], #4
 80082fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008300:	f8be 1000 	ldrh.w	r1, [lr]
 8008304:	0c12      	lsrs	r2, r2, #16
 8008306:	fb09 1102 	mla	r1, r9, r2, r1
 800830a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800830e:	4567      	cmp	r7, ip
 8008310:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008314:	d8e6      	bhi.n	80082e4 <__multiply+0x10c>
 8008316:	9a01      	ldr	r2, [sp, #4]
 8008318:	50a9      	str	r1, [r5, r2]
 800831a:	3504      	adds	r5, #4
 800831c:	e79a      	b.n	8008254 <__multiply+0x7c>
 800831e:	3e01      	subs	r6, #1
 8008320:	e79c      	b.n	800825c <__multiply+0x84>
 8008322:	bf00      	nop
 8008324:	08009883 	.word	0x08009883
 8008328:	08009894 	.word	0x08009894

0800832c <__pow5mult>:
 800832c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008330:	4615      	mov	r5, r2
 8008332:	f012 0203 	ands.w	r2, r2, #3
 8008336:	4606      	mov	r6, r0
 8008338:	460f      	mov	r7, r1
 800833a:	d007      	beq.n	800834c <__pow5mult+0x20>
 800833c:	4c25      	ldr	r4, [pc, #148]	; (80083d4 <__pow5mult+0xa8>)
 800833e:	3a01      	subs	r2, #1
 8008340:	2300      	movs	r3, #0
 8008342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008346:	f7ff fe9b 	bl	8008080 <__multadd>
 800834a:	4607      	mov	r7, r0
 800834c:	10ad      	asrs	r5, r5, #2
 800834e:	d03d      	beq.n	80083cc <__pow5mult+0xa0>
 8008350:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008352:	b97c      	cbnz	r4, 8008374 <__pow5mult+0x48>
 8008354:	2010      	movs	r0, #16
 8008356:	f7fe f9c3 	bl	80066e0 <malloc>
 800835a:	4602      	mov	r2, r0
 800835c:	6270      	str	r0, [r6, #36]	; 0x24
 800835e:	b928      	cbnz	r0, 800836c <__pow5mult+0x40>
 8008360:	4b1d      	ldr	r3, [pc, #116]	; (80083d8 <__pow5mult+0xac>)
 8008362:	481e      	ldr	r0, [pc, #120]	; (80083dc <__pow5mult+0xb0>)
 8008364:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008368:	f000 fb1e 	bl	80089a8 <__assert_func>
 800836c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008370:	6004      	str	r4, [r0, #0]
 8008372:	60c4      	str	r4, [r0, #12]
 8008374:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800837c:	b94c      	cbnz	r4, 8008392 <__pow5mult+0x66>
 800837e:	f240 2171 	movw	r1, #625	; 0x271
 8008382:	4630      	mov	r0, r6
 8008384:	f7ff ff12 	bl	80081ac <__i2b>
 8008388:	2300      	movs	r3, #0
 800838a:	f8c8 0008 	str.w	r0, [r8, #8]
 800838e:	4604      	mov	r4, r0
 8008390:	6003      	str	r3, [r0, #0]
 8008392:	f04f 0900 	mov.w	r9, #0
 8008396:	07eb      	lsls	r3, r5, #31
 8008398:	d50a      	bpl.n	80083b0 <__pow5mult+0x84>
 800839a:	4639      	mov	r1, r7
 800839c:	4622      	mov	r2, r4
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff ff1a 	bl	80081d8 <__multiply>
 80083a4:	4639      	mov	r1, r7
 80083a6:	4680      	mov	r8, r0
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff fe47 	bl	800803c <_Bfree>
 80083ae:	4647      	mov	r7, r8
 80083b0:	106d      	asrs	r5, r5, #1
 80083b2:	d00b      	beq.n	80083cc <__pow5mult+0xa0>
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	b938      	cbnz	r0, 80083c8 <__pow5mult+0x9c>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4621      	mov	r1, r4
 80083bc:	4630      	mov	r0, r6
 80083be:	f7ff ff0b 	bl	80081d8 <__multiply>
 80083c2:	6020      	str	r0, [r4, #0]
 80083c4:	f8c0 9000 	str.w	r9, [r0]
 80083c8:	4604      	mov	r4, r0
 80083ca:	e7e4      	b.n	8008396 <__pow5mult+0x6a>
 80083cc:	4638      	mov	r0, r7
 80083ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d2:	bf00      	nop
 80083d4:	080099e0 	.word	0x080099e0
 80083d8:	08009811 	.word	0x08009811
 80083dc:	08009894 	.word	0x08009894

080083e0 <__lshift>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	460c      	mov	r4, r1
 80083e6:	6849      	ldr	r1, [r1, #4]
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	4607      	mov	r7, r0
 80083f2:	4691      	mov	r9, r2
 80083f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083f8:	f108 0601 	add.w	r6, r8, #1
 80083fc:	42b3      	cmp	r3, r6
 80083fe:	db0b      	blt.n	8008418 <__lshift+0x38>
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff fddb 	bl	8007fbc <_Balloc>
 8008406:	4605      	mov	r5, r0
 8008408:	b948      	cbnz	r0, 800841e <__lshift+0x3e>
 800840a:	4602      	mov	r2, r0
 800840c:	4b2a      	ldr	r3, [pc, #168]	; (80084b8 <__lshift+0xd8>)
 800840e:	482b      	ldr	r0, [pc, #172]	; (80084bc <__lshift+0xdc>)
 8008410:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008414:	f000 fac8 	bl	80089a8 <__assert_func>
 8008418:	3101      	adds	r1, #1
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	e7ee      	b.n	80083fc <__lshift+0x1c>
 800841e:	2300      	movs	r3, #0
 8008420:	f100 0114 	add.w	r1, r0, #20
 8008424:	f100 0210 	add.w	r2, r0, #16
 8008428:	4618      	mov	r0, r3
 800842a:	4553      	cmp	r3, sl
 800842c:	db37      	blt.n	800849e <__lshift+0xbe>
 800842e:	6920      	ldr	r0, [r4, #16]
 8008430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008434:	f104 0314 	add.w	r3, r4, #20
 8008438:	f019 091f 	ands.w	r9, r9, #31
 800843c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008440:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008444:	d02f      	beq.n	80084a6 <__lshift+0xc6>
 8008446:	f1c9 0e20 	rsb	lr, r9, #32
 800844a:	468a      	mov	sl, r1
 800844c:	f04f 0c00 	mov.w	ip, #0
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	fa02 f209 	lsl.w	r2, r2, r9
 8008456:	ea42 020c 	orr.w	r2, r2, ip
 800845a:	f84a 2b04 	str.w	r2, [sl], #4
 800845e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008462:	4298      	cmp	r0, r3
 8008464:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008468:	d8f2      	bhi.n	8008450 <__lshift+0x70>
 800846a:	1b03      	subs	r3, r0, r4
 800846c:	3b15      	subs	r3, #21
 800846e:	f023 0303 	bic.w	r3, r3, #3
 8008472:	3304      	adds	r3, #4
 8008474:	f104 0215 	add.w	r2, r4, #21
 8008478:	4290      	cmp	r0, r2
 800847a:	bf38      	it	cc
 800847c:	2304      	movcc	r3, #4
 800847e:	f841 c003 	str.w	ip, [r1, r3]
 8008482:	f1bc 0f00 	cmp.w	ip, #0
 8008486:	d001      	beq.n	800848c <__lshift+0xac>
 8008488:	f108 0602 	add.w	r6, r8, #2
 800848c:	3e01      	subs	r6, #1
 800848e:	4638      	mov	r0, r7
 8008490:	612e      	str	r6, [r5, #16]
 8008492:	4621      	mov	r1, r4
 8008494:	f7ff fdd2 	bl	800803c <_Bfree>
 8008498:	4628      	mov	r0, r5
 800849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849e:	f842 0f04 	str.w	r0, [r2, #4]!
 80084a2:	3301      	adds	r3, #1
 80084a4:	e7c1      	b.n	800842a <__lshift+0x4a>
 80084a6:	3904      	subs	r1, #4
 80084a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80084b0:	4298      	cmp	r0, r3
 80084b2:	d8f9      	bhi.n	80084a8 <__lshift+0xc8>
 80084b4:	e7ea      	b.n	800848c <__lshift+0xac>
 80084b6:	bf00      	nop
 80084b8:	08009883 	.word	0x08009883
 80084bc:	08009894 	.word	0x08009894

080084c0 <__mcmp>:
 80084c0:	b530      	push	{r4, r5, lr}
 80084c2:	6902      	ldr	r2, [r0, #16]
 80084c4:	690c      	ldr	r4, [r1, #16]
 80084c6:	1b12      	subs	r2, r2, r4
 80084c8:	d10e      	bne.n	80084e8 <__mcmp+0x28>
 80084ca:	f100 0314 	add.w	r3, r0, #20
 80084ce:	3114      	adds	r1, #20
 80084d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084e0:	42a5      	cmp	r5, r4
 80084e2:	d003      	beq.n	80084ec <__mcmp+0x2c>
 80084e4:	d305      	bcc.n	80084f2 <__mcmp+0x32>
 80084e6:	2201      	movs	r2, #1
 80084e8:	4610      	mov	r0, r2
 80084ea:	bd30      	pop	{r4, r5, pc}
 80084ec:	4283      	cmp	r3, r0
 80084ee:	d3f3      	bcc.n	80084d8 <__mcmp+0x18>
 80084f0:	e7fa      	b.n	80084e8 <__mcmp+0x28>
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	e7f7      	b.n	80084e8 <__mcmp+0x28>

080084f8 <__mdiff>:
 80084f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	460c      	mov	r4, r1
 80084fe:	4606      	mov	r6, r0
 8008500:	4611      	mov	r1, r2
 8008502:	4620      	mov	r0, r4
 8008504:	4690      	mov	r8, r2
 8008506:	f7ff ffdb 	bl	80084c0 <__mcmp>
 800850a:	1e05      	subs	r5, r0, #0
 800850c:	d110      	bne.n	8008530 <__mdiff+0x38>
 800850e:	4629      	mov	r1, r5
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff fd53 	bl	8007fbc <_Balloc>
 8008516:	b930      	cbnz	r0, 8008526 <__mdiff+0x2e>
 8008518:	4b3a      	ldr	r3, [pc, #232]	; (8008604 <__mdiff+0x10c>)
 800851a:	4602      	mov	r2, r0
 800851c:	f240 2132 	movw	r1, #562	; 0x232
 8008520:	4839      	ldr	r0, [pc, #228]	; (8008608 <__mdiff+0x110>)
 8008522:	f000 fa41 	bl	80089a8 <__assert_func>
 8008526:	2301      	movs	r3, #1
 8008528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800852c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008530:	bfa4      	itt	ge
 8008532:	4643      	movge	r3, r8
 8008534:	46a0      	movge	r8, r4
 8008536:	4630      	mov	r0, r6
 8008538:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800853c:	bfa6      	itte	ge
 800853e:	461c      	movge	r4, r3
 8008540:	2500      	movge	r5, #0
 8008542:	2501      	movlt	r5, #1
 8008544:	f7ff fd3a 	bl	8007fbc <_Balloc>
 8008548:	b920      	cbnz	r0, 8008554 <__mdiff+0x5c>
 800854a:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <__mdiff+0x10c>)
 800854c:	4602      	mov	r2, r0
 800854e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008552:	e7e5      	b.n	8008520 <__mdiff+0x28>
 8008554:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008558:	6926      	ldr	r6, [r4, #16]
 800855a:	60c5      	str	r5, [r0, #12]
 800855c:	f104 0914 	add.w	r9, r4, #20
 8008560:	f108 0514 	add.w	r5, r8, #20
 8008564:	f100 0e14 	add.w	lr, r0, #20
 8008568:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800856c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008570:	f108 0210 	add.w	r2, r8, #16
 8008574:	46f2      	mov	sl, lr
 8008576:	2100      	movs	r1, #0
 8008578:	f859 3b04 	ldr.w	r3, [r9], #4
 800857c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008580:	fa1f f883 	uxth.w	r8, r3
 8008584:	fa11 f18b 	uxtah	r1, r1, fp
 8008588:	0c1b      	lsrs	r3, r3, #16
 800858a:	eba1 0808 	sub.w	r8, r1, r8
 800858e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008592:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008596:	fa1f f888 	uxth.w	r8, r8
 800859a:	1419      	asrs	r1, r3, #16
 800859c:	454e      	cmp	r6, r9
 800859e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085a2:	f84a 3b04 	str.w	r3, [sl], #4
 80085a6:	d8e7      	bhi.n	8008578 <__mdiff+0x80>
 80085a8:	1b33      	subs	r3, r6, r4
 80085aa:	3b15      	subs	r3, #21
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	3304      	adds	r3, #4
 80085b2:	3415      	adds	r4, #21
 80085b4:	42a6      	cmp	r6, r4
 80085b6:	bf38      	it	cc
 80085b8:	2304      	movcc	r3, #4
 80085ba:	441d      	add	r5, r3
 80085bc:	4473      	add	r3, lr
 80085be:	469e      	mov	lr, r3
 80085c0:	462e      	mov	r6, r5
 80085c2:	4566      	cmp	r6, ip
 80085c4:	d30e      	bcc.n	80085e4 <__mdiff+0xec>
 80085c6:	f10c 0203 	add.w	r2, ip, #3
 80085ca:	1b52      	subs	r2, r2, r5
 80085cc:	f022 0203 	bic.w	r2, r2, #3
 80085d0:	3d03      	subs	r5, #3
 80085d2:	45ac      	cmp	ip, r5
 80085d4:	bf38      	it	cc
 80085d6:	2200      	movcc	r2, #0
 80085d8:	441a      	add	r2, r3
 80085da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085de:	b17b      	cbz	r3, 8008600 <__mdiff+0x108>
 80085e0:	6107      	str	r7, [r0, #16]
 80085e2:	e7a3      	b.n	800852c <__mdiff+0x34>
 80085e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80085e8:	fa11 f288 	uxtah	r2, r1, r8
 80085ec:	1414      	asrs	r4, r2, #16
 80085ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085f2:	b292      	uxth	r2, r2
 80085f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085f8:	f84e 2b04 	str.w	r2, [lr], #4
 80085fc:	1421      	asrs	r1, r4, #16
 80085fe:	e7e0      	b.n	80085c2 <__mdiff+0xca>
 8008600:	3f01      	subs	r7, #1
 8008602:	e7ea      	b.n	80085da <__mdiff+0xe2>
 8008604:	08009883 	.word	0x08009883
 8008608:	08009894 	.word	0x08009894

0800860c <__d2b>:
 800860c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008610:	4689      	mov	r9, r1
 8008612:	2101      	movs	r1, #1
 8008614:	ec57 6b10 	vmov	r6, r7, d0
 8008618:	4690      	mov	r8, r2
 800861a:	f7ff fccf 	bl	8007fbc <_Balloc>
 800861e:	4604      	mov	r4, r0
 8008620:	b930      	cbnz	r0, 8008630 <__d2b+0x24>
 8008622:	4602      	mov	r2, r0
 8008624:	4b25      	ldr	r3, [pc, #148]	; (80086bc <__d2b+0xb0>)
 8008626:	4826      	ldr	r0, [pc, #152]	; (80086c0 <__d2b+0xb4>)
 8008628:	f240 310a 	movw	r1, #778	; 0x30a
 800862c:	f000 f9bc 	bl	80089a8 <__assert_func>
 8008630:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008634:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008638:	bb35      	cbnz	r5, 8008688 <__d2b+0x7c>
 800863a:	2e00      	cmp	r6, #0
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	d028      	beq.n	8008692 <__d2b+0x86>
 8008640:	4668      	mov	r0, sp
 8008642:	9600      	str	r6, [sp, #0]
 8008644:	f7ff fd82 	bl	800814c <__lo0bits>
 8008648:	9900      	ldr	r1, [sp, #0]
 800864a:	b300      	cbz	r0, 800868e <__d2b+0x82>
 800864c:	9a01      	ldr	r2, [sp, #4]
 800864e:	f1c0 0320 	rsb	r3, r0, #32
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	430b      	orrs	r3, r1
 8008658:	40c2      	lsrs	r2, r0
 800865a:	6163      	str	r3, [r4, #20]
 800865c:	9201      	str	r2, [sp, #4]
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	61a3      	str	r3, [r4, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	bf14      	ite	ne
 8008666:	2202      	movne	r2, #2
 8008668:	2201      	moveq	r2, #1
 800866a:	6122      	str	r2, [r4, #16]
 800866c:	b1d5      	cbz	r5, 80086a4 <__d2b+0x98>
 800866e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008672:	4405      	add	r5, r0
 8008674:	f8c9 5000 	str.w	r5, [r9]
 8008678:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800867c:	f8c8 0000 	str.w	r0, [r8]
 8008680:	4620      	mov	r0, r4
 8008682:	b003      	add	sp, #12
 8008684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800868c:	e7d5      	b.n	800863a <__d2b+0x2e>
 800868e:	6161      	str	r1, [r4, #20]
 8008690:	e7e5      	b.n	800865e <__d2b+0x52>
 8008692:	a801      	add	r0, sp, #4
 8008694:	f7ff fd5a 	bl	800814c <__lo0bits>
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	6163      	str	r3, [r4, #20]
 800869c:	2201      	movs	r2, #1
 800869e:	6122      	str	r2, [r4, #16]
 80086a0:	3020      	adds	r0, #32
 80086a2:	e7e3      	b.n	800866c <__d2b+0x60>
 80086a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086ac:	f8c9 0000 	str.w	r0, [r9]
 80086b0:	6918      	ldr	r0, [r3, #16]
 80086b2:	f7ff fd2b 	bl	800810c <__hi0bits>
 80086b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086ba:	e7df      	b.n	800867c <__d2b+0x70>
 80086bc:	08009883 	.word	0x08009883
 80086c0:	08009894 	.word	0x08009894

080086c4 <_calloc_r>:
 80086c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086c6:	fba1 2402 	umull	r2, r4, r1, r2
 80086ca:	b94c      	cbnz	r4, 80086e0 <_calloc_r+0x1c>
 80086cc:	4611      	mov	r1, r2
 80086ce:	9201      	str	r2, [sp, #4]
 80086d0:	f7fe f8a8 	bl	8006824 <_malloc_r>
 80086d4:	9a01      	ldr	r2, [sp, #4]
 80086d6:	4605      	mov	r5, r0
 80086d8:	b930      	cbnz	r0, 80086e8 <_calloc_r+0x24>
 80086da:	4628      	mov	r0, r5
 80086dc:	b003      	add	sp, #12
 80086de:	bd30      	pop	{r4, r5, pc}
 80086e0:	220c      	movs	r2, #12
 80086e2:	6002      	str	r2, [r0, #0]
 80086e4:	2500      	movs	r5, #0
 80086e6:	e7f8      	b.n	80086da <_calloc_r+0x16>
 80086e8:	4621      	mov	r1, r4
 80086ea:	f7fe f827 	bl	800673c <memset>
 80086ee:	e7f4      	b.n	80086da <_calloc_r+0x16>

080086f0 <__ssputs_r>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	688e      	ldr	r6, [r1, #8]
 80086f6:	429e      	cmp	r6, r3
 80086f8:	4682      	mov	sl, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	4690      	mov	r8, r2
 80086fe:	461f      	mov	r7, r3
 8008700:	d838      	bhi.n	8008774 <__ssputs_r+0x84>
 8008702:	898a      	ldrh	r2, [r1, #12]
 8008704:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008708:	d032      	beq.n	8008770 <__ssputs_r+0x80>
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	6909      	ldr	r1, [r1, #16]
 800870e:	eba5 0901 	sub.w	r9, r5, r1
 8008712:	6965      	ldr	r5, [r4, #20]
 8008714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800871c:	3301      	adds	r3, #1
 800871e:	444b      	add	r3, r9
 8008720:	106d      	asrs	r5, r5, #1
 8008722:	429d      	cmp	r5, r3
 8008724:	bf38      	it	cc
 8008726:	461d      	movcc	r5, r3
 8008728:	0553      	lsls	r3, r2, #21
 800872a:	d531      	bpl.n	8008790 <__ssputs_r+0xa0>
 800872c:	4629      	mov	r1, r5
 800872e:	f7fe f879 	bl	8006824 <_malloc_r>
 8008732:	4606      	mov	r6, r0
 8008734:	b950      	cbnz	r0, 800874c <__ssputs_r+0x5c>
 8008736:	230c      	movs	r3, #12
 8008738:	f8ca 3000 	str.w	r3, [sl]
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	6921      	ldr	r1, [r4, #16]
 800874e:	464a      	mov	r2, r9
 8008750:	f7fd ffe6 	bl	8006720 <memcpy>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800875a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	6126      	str	r6, [r4, #16]
 8008762:	6165      	str	r5, [r4, #20]
 8008764:	444e      	add	r6, r9
 8008766:	eba5 0509 	sub.w	r5, r5, r9
 800876a:	6026      	str	r6, [r4, #0]
 800876c:	60a5      	str	r5, [r4, #8]
 800876e:	463e      	mov	r6, r7
 8008770:	42be      	cmp	r6, r7
 8008772:	d900      	bls.n	8008776 <__ssputs_r+0x86>
 8008774:	463e      	mov	r6, r7
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	4632      	mov	r2, r6
 800877a:	4641      	mov	r1, r8
 800877c:	f000 f959 	bl	8008a32 <memmove>
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	1b9b      	subs	r3, r3, r6
 8008784:	60a3      	str	r3, [r4, #8]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	4433      	add	r3, r6
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	2000      	movs	r0, #0
 800878e:	e7db      	b.n	8008748 <__ssputs_r+0x58>
 8008790:	462a      	mov	r2, r5
 8008792:	f000 f968 	bl	8008a66 <_realloc_r>
 8008796:	4606      	mov	r6, r0
 8008798:	2800      	cmp	r0, #0
 800879a:	d1e1      	bne.n	8008760 <__ssputs_r+0x70>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	4650      	mov	r0, sl
 80087a0:	f7fd ffd4 	bl	800674c <_free_r>
 80087a4:	e7c7      	b.n	8008736 <__ssputs_r+0x46>
	...

080087a8 <_svfiprintf_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4698      	mov	r8, r3
 80087ae:	898b      	ldrh	r3, [r1, #12]
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	b09d      	sub	sp, #116	; 0x74
 80087b4:	4607      	mov	r7, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	d50e      	bpl.n	80087da <_svfiprintf_r+0x32>
 80087bc:	690b      	ldr	r3, [r1, #16]
 80087be:	b963      	cbnz	r3, 80087da <_svfiprintf_r+0x32>
 80087c0:	2140      	movs	r1, #64	; 0x40
 80087c2:	f7fe f82f 	bl	8006824 <_malloc_r>
 80087c6:	6028      	str	r0, [r5, #0]
 80087c8:	6128      	str	r0, [r5, #16]
 80087ca:	b920      	cbnz	r0, 80087d6 <_svfiprintf_r+0x2e>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	e0d1      	b.n	800897a <_svfiprintf_r+0x1d2>
 80087d6:	2340      	movs	r3, #64	; 0x40
 80087d8:	616b      	str	r3, [r5, #20]
 80087da:	2300      	movs	r3, #0
 80087dc:	9309      	str	r3, [sp, #36]	; 0x24
 80087de:	2320      	movs	r3, #32
 80087e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e8:	2330      	movs	r3, #48	; 0x30
 80087ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008994 <_svfiprintf_r+0x1ec>
 80087ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f2:	f04f 0901 	mov.w	r9, #1
 80087f6:	4623      	mov	r3, r4
 80087f8:	469a      	mov	sl, r3
 80087fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fe:	b10a      	cbz	r2, 8008804 <_svfiprintf_r+0x5c>
 8008800:	2a25      	cmp	r2, #37	; 0x25
 8008802:	d1f9      	bne.n	80087f8 <_svfiprintf_r+0x50>
 8008804:	ebba 0b04 	subs.w	fp, sl, r4
 8008808:	d00b      	beq.n	8008822 <_svfiprintf_r+0x7a>
 800880a:	465b      	mov	r3, fp
 800880c:	4622      	mov	r2, r4
 800880e:	4629      	mov	r1, r5
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff ff6d 	bl	80086f0 <__ssputs_r>
 8008816:	3001      	adds	r0, #1
 8008818:	f000 80aa 	beq.w	8008970 <_svfiprintf_r+0x1c8>
 800881c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881e:	445a      	add	r2, fp
 8008820:	9209      	str	r2, [sp, #36]	; 0x24
 8008822:	f89a 3000 	ldrb.w	r3, [sl]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80a2 	beq.w	8008970 <_svfiprintf_r+0x1c8>
 800882c:	2300      	movs	r3, #0
 800882e:	f04f 32ff 	mov.w	r2, #4294967295
 8008832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008836:	f10a 0a01 	add.w	sl, sl, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	9307      	str	r3, [sp, #28]
 800883e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008842:	931a      	str	r3, [sp, #104]	; 0x68
 8008844:	4654      	mov	r4, sl
 8008846:	2205      	movs	r2, #5
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	4851      	ldr	r0, [pc, #324]	; (8008994 <_svfiprintf_r+0x1ec>)
 800884e:	f7f7 fce7 	bl	8000220 <memchr>
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	b9d8      	cbnz	r0, 800888e <_svfiprintf_r+0xe6>
 8008856:	06d0      	lsls	r0, r2, #27
 8008858:	bf44      	itt	mi
 800885a:	2320      	movmi	r3, #32
 800885c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008860:	0711      	lsls	r1, r2, #28
 8008862:	bf44      	itt	mi
 8008864:	232b      	movmi	r3, #43	; 0x2b
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886a:	f89a 3000 	ldrb.w	r3, [sl]
 800886e:	2b2a      	cmp	r3, #42	; 0x2a
 8008870:	d015      	beq.n	800889e <_svfiprintf_r+0xf6>
 8008872:	9a07      	ldr	r2, [sp, #28]
 8008874:	4654      	mov	r4, sl
 8008876:	2000      	movs	r0, #0
 8008878:	f04f 0c0a 	mov.w	ip, #10
 800887c:	4621      	mov	r1, r4
 800887e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008882:	3b30      	subs	r3, #48	; 0x30
 8008884:	2b09      	cmp	r3, #9
 8008886:	d94e      	bls.n	8008926 <_svfiprintf_r+0x17e>
 8008888:	b1b0      	cbz	r0, 80088b8 <_svfiprintf_r+0x110>
 800888a:	9207      	str	r2, [sp, #28]
 800888c:	e014      	b.n	80088b8 <_svfiprintf_r+0x110>
 800888e:	eba0 0308 	sub.w	r3, r0, r8
 8008892:	fa09 f303 	lsl.w	r3, r9, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	46a2      	mov	sl, r4
 800889c:	e7d2      	b.n	8008844 <_svfiprintf_r+0x9c>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d19      	adds	r1, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9103      	str	r1, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfbb      	ittet	lt
 80088aa:	425b      	neglt	r3, r3
 80088ac:	f042 0202 	orrlt.w	r2, r2, #2
 80088b0:	9307      	strge	r3, [sp, #28]
 80088b2:	9307      	strlt	r3, [sp, #28]
 80088b4:	bfb8      	it	lt
 80088b6:	9204      	strlt	r2, [sp, #16]
 80088b8:	7823      	ldrb	r3, [r4, #0]
 80088ba:	2b2e      	cmp	r3, #46	; 0x2e
 80088bc:	d10c      	bne.n	80088d8 <_svfiprintf_r+0x130>
 80088be:	7863      	ldrb	r3, [r4, #1]
 80088c0:	2b2a      	cmp	r3, #42	; 0x2a
 80088c2:	d135      	bne.n	8008930 <_svfiprintf_r+0x188>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9203      	str	r2, [sp, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bfb8      	it	lt
 80088d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088d4:	3402      	adds	r4, #2
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089a4 <_svfiprintf_r+0x1fc>
 80088dc:	7821      	ldrb	r1, [r4, #0]
 80088de:	2203      	movs	r2, #3
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7f7 fc9d 	bl	8000220 <memchr>
 80088e6:	b140      	cbz	r0, 80088fa <_svfiprintf_r+0x152>
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	eba0 000a 	sub.w	r0, r0, sl
 80088ee:	fa03 f000 	lsl.w	r0, r3, r0
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	4303      	orrs	r3, r0
 80088f6:	3401      	adds	r4, #1
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fe:	4826      	ldr	r0, [pc, #152]	; (8008998 <_svfiprintf_r+0x1f0>)
 8008900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008904:	2206      	movs	r2, #6
 8008906:	f7f7 fc8b 	bl	8000220 <memchr>
 800890a:	2800      	cmp	r0, #0
 800890c:	d038      	beq.n	8008980 <_svfiprintf_r+0x1d8>
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <_svfiprintf_r+0x1f4>)
 8008910:	bb1b      	cbnz	r3, 800895a <_svfiprintf_r+0x1b2>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	3307      	adds	r3, #7
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	3308      	adds	r3, #8
 800891c:	9303      	str	r3, [sp, #12]
 800891e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008920:	4433      	add	r3, r6
 8008922:	9309      	str	r3, [sp, #36]	; 0x24
 8008924:	e767      	b.n	80087f6 <_svfiprintf_r+0x4e>
 8008926:	fb0c 3202 	mla	r2, ip, r2, r3
 800892a:	460c      	mov	r4, r1
 800892c:	2001      	movs	r0, #1
 800892e:	e7a5      	b.n	800887c <_svfiprintf_r+0xd4>
 8008930:	2300      	movs	r3, #0
 8008932:	3401      	adds	r4, #1
 8008934:	9305      	str	r3, [sp, #20]
 8008936:	4619      	mov	r1, r3
 8008938:	f04f 0c0a 	mov.w	ip, #10
 800893c:	4620      	mov	r0, r4
 800893e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008942:	3a30      	subs	r2, #48	; 0x30
 8008944:	2a09      	cmp	r2, #9
 8008946:	d903      	bls.n	8008950 <_svfiprintf_r+0x1a8>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0c5      	beq.n	80088d8 <_svfiprintf_r+0x130>
 800894c:	9105      	str	r1, [sp, #20]
 800894e:	e7c3      	b.n	80088d8 <_svfiprintf_r+0x130>
 8008950:	fb0c 2101 	mla	r1, ip, r1, r2
 8008954:	4604      	mov	r4, r0
 8008956:	2301      	movs	r3, #1
 8008958:	e7f0      	b.n	800893c <_svfiprintf_r+0x194>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <_svfiprintf_r+0x1f8>)
 8008962:	a904      	add	r1, sp, #16
 8008964:	4638      	mov	r0, r7
 8008966:	f7fe f871 	bl	8006a4c <_printf_float>
 800896a:	1c42      	adds	r2, r0, #1
 800896c:	4606      	mov	r6, r0
 800896e:	d1d6      	bne.n	800891e <_svfiprintf_r+0x176>
 8008970:	89ab      	ldrh	r3, [r5, #12]
 8008972:	065b      	lsls	r3, r3, #25
 8008974:	f53f af2c 	bmi.w	80087d0 <_svfiprintf_r+0x28>
 8008978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800897a:	b01d      	add	sp, #116	; 0x74
 800897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008980:	ab03      	add	r3, sp, #12
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	462a      	mov	r2, r5
 8008986:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <_svfiprintf_r+0x1f8>)
 8008988:	a904      	add	r1, sp, #16
 800898a:	4638      	mov	r0, r7
 800898c:	f7fe fb02 	bl	8006f94 <_printf_i>
 8008990:	e7eb      	b.n	800896a <_svfiprintf_r+0x1c2>
 8008992:	bf00      	nop
 8008994:	080099ec 	.word	0x080099ec
 8008998:	080099f6 	.word	0x080099f6
 800899c:	08006a4d 	.word	0x08006a4d
 80089a0:	080086f1 	.word	0x080086f1
 80089a4:	080099f2 	.word	0x080099f2

080089a8 <__assert_func>:
 80089a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089aa:	4614      	mov	r4, r2
 80089ac:	461a      	mov	r2, r3
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <__assert_func+0x2c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4605      	mov	r5, r0
 80089b4:	68d8      	ldr	r0, [r3, #12]
 80089b6:	b14c      	cbz	r4, 80089cc <__assert_func+0x24>
 80089b8:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <__assert_func+0x30>)
 80089ba:	9100      	str	r1, [sp, #0]
 80089bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089c0:	4906      	ldr	r1, [pc, #24]	; (80089dc <__assert_func+0x34>)
 80089c2:	462b      	mov	r3, r5
 80089c4:	f000 f80e 	bl	80089e4 <fiprintf>
 80089c8:	f000 faa4 	bl	8008f14 <abort>
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <__assert_func+0x38>)
 80089ce:	461c      	mov	r4, r3
 80089d0:	e7f3      	b.n	80089ba <__assert_func+0x12>
 80089d2:	bf00      	nop
 80089d4:	20000018 	.word	0x20000018
 80089d8:	080099fd 	.word	0x080099fd
 80089dc:	08009a0a 	.word	0x08009a0a
 80089e0:	08009a38 	.word	0x08009a38

080089e4 <fiprintf>:
 80089e4:	b40e      	push	{r1, r2, r3}
 80089e6:	b503      	push	{r0, r1, lr}
 80089e8:	4601      	mov	r1, r0
 80089ea:	ab03      	add	r3, sp, #12
 80089ec:	4805      	ldr	r0, [pc, #20]	; (8008a04 <fiprintf+0x20>)
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	f000 f88f 	bl	8008b18 <_vfiprintf_r>
 80089fa:	b002      	add	sp, #8
 80089fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a00:	b003      	add	sp, #12
 8008a02:	4770      	bx	lr
 8008a04:	20000018 	.word	0x20000018

08008a08 <__retarget_lock_init_recursive>:
 8008a08:	4770      	bx	lr

08008a0a <__retarget_lock_acquire_recursive>:
 8008a0a:	4770      	bx	lr

08008a0c <__retarget_lock_release_recursive>:
 8008a0c:	4770      	bx	lr

08008a0e <__ascii_mbtowc>:
 8008a0e:	b082      	sub	sp, #8
 8008a10:	b901      	cbnz	r1, 8008a14 <__ascii_mbtowc+0x6>
 8008a12:	a901      	add	r1, sp, #4
 8008a14:	b142      	cbz	r2, 8008a28 <__ascii_mbtowc+0x1a>
 8008a16:	b14b      	cbz	r3, 8008a2c <__ascii_mbtowc+0x1e>
 8008a18:	7813      	ldrb	r3, [r2, #0]
 8008a1a:	600b      	str	r3, [r1, #0]
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	1e10      	subs	r0, r2, #0
 8008a20:	bf18      	it	ne
 8008a22:	2001      	movne	r0, #1
 8008a24:	b002      	add	sp, #8
 8008a26:	4770      	bx	lr
 8008a28:	4610      	mov	r0, r2
 8008a2a:	e7fb      	b.n	8008a24 <__ascii_mbtowc+0x16>
 8008a2c:	f06f 0001 	mvn.w	r0, #1
 8008a30:	e7f8      	b.n	8008a24 <__ascii_mbtowc+0x16>

08008a32 <memmove>:
 8008a32:	4288      	cmp	r0, r1
 8008a34:	b510      	push	{r4, lr}
 8008a36:	eb01 0402 	add.w	r4, r1, r2
 8008a3a:	d902      	bls.n	8008a42 <memmove+0x10>
 8008a3c:	4284      	cmp	r4, r0
 8008a3e:	4623      	mov	r3, r4
 8008a40:	d807      	bhi.n	8008a52 <memmove+0x20>
 8008a42:	1e43      	subs	r3, r0, #1
 8008a44:	42a1      	cmp	r1, r4
 8008a46:	d008      	beq.n	8008a5a <memmove+0x28>
 8008a48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a50:	e7f8      	b.n	8008a44 <memmove+0x12>
 8008a52:	4402      	add	r2, r0
 8008a54:	4601      	mov	r1, r0
 8008a56:	428a      	cmp	r2, r1
 8008a58:	d100      	bne.n	8008a5c <memmove+0x2a>
 8008a5a:	bd10      	pop	{r4, pc}
 8008a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a64:	e7f7      	b.n	8008a56 <memmove+0x24>

08008a66 <_realloc_r>:
 8008a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	460e      	mov	r6, r1
 8008a70:	b921      	cbnz	r1, 8008a7c <_realloc_r+0x16>
 8008a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a76:	4611      	mov	r1, r2
 8008a78:	f7fd bed4 	b.w	8006824 <_malloc_r>
 8008a7c:	b92a      	cbnz	r2, 8008a8a <_realloc_r+0x24>
 8008a7e:	f7fd fe65 	bl	800674c <_free_r>
 8008a82:	4625      	mov	r5, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8a:	f000 fc67 	bl	800935c <_malloc_usable_size_r>
 8008a8e:	4284      	cmp	r4, r0
 8008a90:	4607      	mov	r7, r0
 8008a92:	d802      	bhi.n	8008a9a <_realloc_r+0x34>
 8008a94:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a98:	d812      	bhi.n	8008ac0 <_realloc_r+0x5a>
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	f7fd fec1 	bl	8006824 <_malloc_r>
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d0ed      	beq.n	8008a84 <_realloc_r+0x1e>
 8008aa8:	42bc      	cmp	r4, r7
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4631      	mov	r1, r6
 8008aae:	bf28      	it	cs
 8008ab0:	463a      	movcs	r2, r7
 8008ab2:	f7fd fe35 	bl	8006720 <memcpy>
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4640      	mov	r0, r8
 8008aba:	f7fd fe47 	bl	800674c <_free_r>
 8008abe:	e7e1      	b.n	8008a84 <_realloc_r+0x1e>
 8008ac0:	4635      	mov	r5, r6
 8008ac2:	e7df      	b.n	8008a84 <_realloc_r+0x1e>

08008ac4 <__sfputc_r>:
 8008ac4:	6893      	ldr	r3, [r2, #8]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	b410      	push	{r4}
 8008acc:	6093      	str	r3, [r2, #8]
 8008ace:	da08      	bge.n	8008ae2 <__sfputc_r+0x1e>
 8008ad0:	6994      	ldr	r4, [r2, #24]
 8008ad2:	42a3      	cmp	r3, r4
 8008ad4:	db01      	blt.n	8008ada <__sfputc_r+0x16>
 8008ad6:	290a      	cmp	r1, #10
 8008ad8:	d103      	bne.n	8008ae2 <__sfputc_r+0x1e>
 8008ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ade:	f000 b94b 	b.w	8008d78 <__swbuf_r>
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	1c58      	adds	r0, r3, #1
 8008ae6:	6010      	str	r0, [r2, #0]
 8008ae8:	7019      	strb	r1, [r3, #0]
 8008aea:	4608      	mov	r0, r1
 8008aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <__sfputs_r>:
 8008af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	18d5      	adds	r5, r2, r3
 8008afc:	42ac      	cmp	r4, r5
 8008afe:	d101      	bne.n	8008b04 <__sfputs_r+0x12>
 8008b00:	2000      	movs	r0, #0
 8008b02:	e007      	b.n	8008b14 <__sfputs_r+0x22>
 8008b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b08:	463a      	mov	r2, r7
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ffda 	bl	8008ac4 <__sfputc_r>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d1f3      	bne.n	8008afc <__sfputs_r+0xa>
 8008b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b18 <_vfiprintf_r>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	b09d      	sub	sp, #116	; 0x74
 8008b20:	4614      	mov	r4, r2
 8008b22:	4698      	mov	r8, r3
 8008b24:	4606      	mov	r6, r0
 8008b26:	b118      	cbz	r0, 8008b30 <_vfiprintf_r+0x18>
 8008b28:	6983      	ldr	r3, [r0, #24]
 8008b2a:	b90b      	cbnz	r3, 8008b30 <_vfiprintf_r+0x18>
 8008b2c:	f000 fb14 	bl	8009158 <__sinit>
 8008b30:	4b89      	ldr	r3, [pc, #548]	; (8008d58 <_vfiprintf_r+0x240>)
 8008b32:	429d      	cmp	r5, r3
 8008b34:	d11b      	bne.n	8008b6e <_vfiprintf_r+0x56>
 8008b36:	6875      	ldr	r5, [r6, #4]
 8008b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b3a:	07d9      	lsls	r1, r3, #31
 8008b3c:	d405      	bmi.n	8008b4a <_vfiprintf_r+0x32>
 8008b3e:	89ab      	ldrh	r3, [r5, #12]
 8008b40:	059a      	lsls	r2, r3, #22
 8008b42:	d402      	bmi.n	8008b4a <_vfiprintf_r+0x32>
 8008b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b46:	f7ff ff60 	bl	8008a0a <__retarget_lock_acquire_recursive>
 8008b4a:	89ab      	ldrh	r3, [r5, #12]
 8008b4c:	071b      	lsls	r3, r3, #28
 8008b4e:	d501      	bpl.n	8008b54 <_vfiprintf_r+0x3c>
 8008b50:	692b      	ldr	r3, [r5, #16]
 8008b52:	b9eb      	cbnz	r3, 8008b90 <_vfiprintf_r+0x78>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4630      	mov	r0, r6
 8008b58:	f000 f96e 	bl	8008e38 <__swsetup_r>
 8008b5c:	b1c0      	cbz	r0, 8008b90 <_vfiprintf_r+0x78>
 8008b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b60:	07dc      	lsls	r4, r3, #31
 8008b62:	d50e      	bpl.n	8008b82 <_vfiprintf_r+0x6a>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	b01d      	add	sp, #116	; 0x74
 8008b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6e:	4b7b      	ldr	r3, [pc, #492]	; (8008d5c <_vfiprintf_r+0x244>)
 8008b70:	429d      	cmp	r5, r3
 8008b72:	d101      	bne.n	8008b78 <_vfiprintf_r+0x60>
 8008b74:	68b5      	ldr	r5, [r6, #8]
 8008b76:	e7df      	b.n	8008b38 <_vfiprintf_r+0x20>
 8008b78:	4b79      	ldr	r3, [pc, #484]	; (8008d60 <_vfiprintf_r+0x248>)
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	bf08      	it	eq
 8008b7e:	68f5      	ldreq	r5, [r6, #12]
 8008b80:	e7da      	b.n	8008b38 <_vfiprintf_r+0x20>
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	0598      	lsls	r0, r3, #22
 8008b86:	d4ed      	bmi.n	8008b64 <_vfiprintf_r+0x4c>
 8008b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b8a:	f7ff ff3f 	bl	8008a0c <__retarget_lock_release_recursive>
 8008b8e:	e7e9      	b.n	8008b64 <_vfiprintf_r+0x4c>
 8008b90:	2300      	movs	r3, #0
 8008b92:	9309      	str	r3, [sp, #36]	; 0x24
 8008b94:	2320      	movs	r3, #32
 8008b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b9e:	2330      	movs	r3, #48	; 0x30
 8008ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d64 <_vfiprintf_r+0x24c>
 8008ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ba8:	f04f 0901 	mov.w	r9, #1
 8008bac:	4623      	mov	r3, r4
 8008bae:	469a      	mov	sl, r3
 8008bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb4:	b10a      	cbz	r2, 8008bba <_vfiprintf_r+0xa2>
 8008bb6:	2a25      	cmp	r2, #37	; 0x25
 8008bb8:	d1f9      	bne.n	8008bae <_vfiprintf_r+0x96>
 8008bba:	ebba 0b04 	subs.w	fp, sl, r4
 8008bbe:	d00b      	beq.n	8008bd8 <_vfiprintf_r+0xc0>
 8008bc0:	465b      	mov	r3, fp
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f7ff ff93 	bl	8008af2 <__sfputs_r>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f000 80aa 	beq.w	8008d26 <_vfiprintf_r+0x20e>
 8008bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd4:	445a      	add	r2, fp
 8008bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 80a2 	beq.w	8008d26 <_vfiprintf_r+0x20e>
 8008be2:	2300      	movs	r3, #0
 8008be4:	f04f 32ff 	mov.w	r2, #4294967295
 8008be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bec:	f10a 0a01 	add.w	sl, sl, #1
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	9307      	str	r3, [sp, #28]
 8008bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bfa:	4654      	mov	r4, sl
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c02:	4858      	ldr	r0, [pc, #352]	; (8008d64 <_vfiprintf_r+0x24c>)
 8008c04:	f7f7 fb0c 	bl	8000220 <memchr>
 8008c08:	9a04      	ldr	r2, [sp, #16]
 8008c0a:	b9d8      	cbnz	r0, 8008c44 <_vfiprintf_r+0x12c>
 8008c0c:	06d1      	lsls	r1, r2, #27
 8008c0e:	bf44      	itt	mi
 8008c10:	2320      	movmi	r3, #32
 8008c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c16:	0713      	lsls	r3, r2, #28
 8008c18:	bf44      	itt	mi
 8008c1a:	232b      	movmi	r3, #43	; 0x2b
 8008c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c20:	f89a 3000 	ldrb.w	r3, [sl]
 8008c24:	2b2a      	cmp	r3, #42	; 0x2a
 8008c26:	d015      	beq.n	8008c54 <_vfiprintf_r+0x13c>
 8008c28:	9a07      	ldr	r2, [sp, #28]
 8008c2a:	4654      	mov	r4, sl
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	f04f 0c0a 	mov.w	ip, #10
 8008c32:	4621      	mov	r1, r4
 8008c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c38:	3b30      	subs	r3, #48	; 0x30
 8008c3a:	2b09      	cmp	r3, #9
 8008c3c:	d94e      	bls.n	8008cdc <_vfiprintf_r+0x1c4>
 8008c3e:	b1b0      	cbz	r0, 8008c6e <_vfiprintf_r+0x156>
 8008c40:	9207      	str	r2, [sp, #28]
 8008c42:	e014      	b.n	8008c6e <_vfiprintf_r+0x156>
 8008c44:	eba0 0308 	sub.w	r3, r0, r8
 8008c48:	fa09 f303 	lsl.w	r3, r9, r3
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	46a2      	mov	sl, r4
 8008c52:	e7d2      	b.n	8008bfa <_vfiprintf_r+0xe2>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	1d19      	adds	r1, r3, #4
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	9103      	str	r1, [sp, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bfbb      	ittet	lt
 8008c60:	425b      	neglt	r3, r3
 8008c62:	f042 0202 	orrlt.w	r2, r2, #2
 8008c66:	9307      	strge	r3, [sp, #28]
 8008c68:	9307      	strlt	r3, [sp, #28]
 8008c6a:	bfb8      	it	lt
 8008c6c:	9204      	strlt	r2, [sp, #16]
 8008c6e:	7823      	ldrb	r3, [r4, #0]
 8008c70:	2b2e      	cmp	r3, #46	; 0x2e
 8008c72:	d10c      	bne.n	8008c8e <_vfiprintf_r+0x176>
 8008c74:	7863      	ldrb	r3, [r4, #1]
 8008c76:	2b2a      	cmp	r3, #42	; 0x2a
 8008c78:	d135      	bne.n	8008ce6 <_vfiprintf_r+0x1ce>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	1d1a      	adds	r2, r3, #4
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	9203      	str	r2, [sp, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfb8      	it	lt
 8008c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c8a:	3402      	adds	r4, #2
 8008c8c:	9305      	str	r3, [sp, #20]
 8008c8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d74 <_vfiprintf_r+0x25c>
 8008c92:	7821      	ldrb	r1, [r4, #0]
 8008c94:	2203      	movs	r2, #3
 8008c96:	4650      	mov	r0, sl
 8008c98:	f7f7 fac2 	bl	8000220 <memchr>
 8008c9c:	b140      	cbz	r0, 8008cb0 <_vfiprintf_r+0x198>
 8008c9e:	2340      	movs	r3, #64	; 0x40
 8008ca0:	eba0 000a 	sub.w	r0, r0, sl
 8008ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ca8:	9b04      	ldr	r3, [sp, #16]
 8008caa:	4303      	orrs	r3, r0
 8008cac:	3401      	adds	r4, #1
 8008cae:	9304      	str	r3, [sp, #16]
 8008cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb4:	482c      	ldr	r0, [pc, #176]	; (8008d68 <_vfiprintf_r+0x250>)
 8008cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cba:	2206      	movs	r2, #6
 8008cbc:	f7f7 fab0 	bl	8000220 <memchr>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d03f      	beq.n	8008d44 <_vfiprintf_r+0x22c>
 8008cc4:	4b29      	ldr	r3, [pc, #164]	; (8008d6c <_vfiprintf_r+0x254>)
 8008cc6:	bb1b      	cbnz	r3, 8008d10 <_vfiprintf_r+0x1f8>
 8008cc8:	9b03      	ldr	r3, [sp, #12]
 8008cca:	3307      	adds	r3, #7
 8008ccc:	f023 0307 	bic.w	r3, r3, #7
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	9303      	str	r3, [sp, #12]
 8008cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd6:	443b      	add	r3, r7
 8008cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cda:	e767      	b.n	8008bac <_vfiprintf_r+0x94>
 8008cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	e7a5      	b.n	8008c32 <_vfiprintf_r+0x11a>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	3401      	adds	r4, #1
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	4619      	mov	r1, r3
 8008cee:	f04f 0c0a 	mov.w	ip, #10
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf8:	3a30      	subs	r2, #48	; 0x30
 8008cfa:	2a09      	cmp	r2, #9
 8008cfc:	d903      	bls.n	8008d06 <_vfiprintf_r+0x1ee>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0c5      	beq.n	8008c8e <_vfiprintf_r+0x176>
 8008d02:	9105      	str	r1, [sp, #20]
 8008d04:	e7c3      	b.n	8008c8e <_vfiprintf_r+0x176>
 8008d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e7f0      	b.n	8008cf2 <_vfiprintf_r+0x1da>
 8008d10:	ab03      	add	r3, sp, #12
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	462a      	mov	r2, r5
 8008d16:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <_vfiprintf_r+0x258>)
 8008d18:	a904      	add	r1, sp, #16
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7fd fe96 	bl	8006a4c <_printf_float>
 8008d20:	4607      	mov	r7, r0
 8008d22:	1c78      	adds	r0, r7, #1
 8008d24:	d1d6      	bne.n	8008cd4 <_vfiprintf_r+0x1bc>
 8008d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d28:	07d9      	lsls	r1, r3, #31
 8008d2a:	d405      	bmi.n	8008d38 <_vfiprintf_r+0x220>
 8008d2c:	89ab      	ldrh	r3, [r5, #12]
 8008d2e:	059a      	lsls	r2, r3, #22
 8008d30:	d402      	bmi.n	8008d38 <_vfiprintf_r+0x220>
 8008d32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d34:	f7ff fe6a 	bl	8008a0c <__retarget_lock_release_recursive>
 8008d38:	89ab      	ldrh	r3, [r5, #12]
 8008d3a:	065b      	lsls	r3, r3, #25
 8008d3c:	f53f af12 	bmi.w	8008b64 <_vfiprintf_r+0x4c>
 8008d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d42:	e711      	b.n	8008b68 <_vfiprintf_r+0x50>
 8008d44:	ab03      	add	r3, sp, #12
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <_vfiprintf_r+0x258>)
 8008d4c:	a904      	add	r1, sp, #16
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7fe f920 	bl	8006f94 <_printf_i>
 8008d54:	e7e4      	b.n	8008d20 <_vfiprintf_r+0x208>
 8008d56:	bf00      	nop
 8008d58:	08009b64 	.word	0x08009b64
 8008d5c:	08009b84 	.word	0x08009b84
 8008d60:	08009b44 	.word	0x08009b44
 8008d64:	080099ec 	.word	0x080099ec
 8008d68:	080099f6 	.word	0x080099f6
 8008d6c:	08006a4d 	.word	0x08006a4d
 8008d70:	08008af3 	.word	0x08008af3
 8008d74:	080099f2 	.word	0x080099f2

08008d78 <__swbuf_r>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	460e      	mov	r6, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	4605      	mov	r5, r0
 8008d80:	b118      	cbz	r0, 8008d8a <__swbuf_r+0x12>
 8008d82:	6983      	ldr	r3, [r0, #24]
 8008d84:	b90b      	cbnz	r3, 8008d8a <__swbuf_r+0x12>
 8008d86:	f000 f9e7 	bl	8009158 <__sinit>
 8008d8a:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <__swbuf_r+0x98>)
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	d12b      	bne.n	8008de8 <__swbuf_r+0x70>
 8008d90:	686c      	ldr	r4, [r5, #4]
 8008d92:	69a3      	ldr	r3, [r4, #24]
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	071a      	lsls	r2, r3, #28
 8008d9a:	d52f      	bpl.n	8008dfc <__swbuf_r+0x84>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	b36b      	cbz	r3, 8008dfc <__swbuf_r+0x84>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	6820      	ldr	r0, [r4, #0]
 8008da4:	1ac0      	subs	r0, r0, r3
 8008da6:	6963      	ldr	r3, [r4, #20]
 8008da8:	b2f6      	uxtb	r6, r6
 8008daa:	4283      	cmp	r3, r0
 8008dac:	4637      	mov	r7, r6
 8008dae:	dc04      	bgt.n	8008dba <__swbuf_r+0x42>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 f93c 	bl	8009030 <_fflush_r>
 8008db8:	bb30      	cbnz	r0, 8008e08 <__swbuf_r+0x90>
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	60a3      	str	r3, [r4, #8]
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	6022      	str	r2, [r4, #0]
 8008dc6:	701e      	strb	r6, [r3, #0]
 8008dc8:	6963      	ldr	r3, [r4, #20]
 8008dca:	3001      	adds	r0, #1
 8008dcc:	4283      	cmp	r3, r0
 8008dce:	d004      	beq.n	8008dda <__swbuf_r+0x62>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	07db      	lsls	r3, r3, #31
 8008dd4:	d506      	bpl.n	8008de4 <__swbuf_r+0x6c>
 8008dd6:	2e0a      	cmp	r6, #10
 8008dd8:	d104      	bne.n	8008de4 <__swbuf_r+0x6c>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f000 f927 	bl	8009030 <_fflush_r>
 8008de2:	b988      	cbnz	r0, 8008e08 <__swbuf_r+0x90>
 8008de4:	4638      	mov	r0, r7
 8008de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <__swbuf_r+0x9c>)
 8008dea:	429c      	cmp	r4, r3
 8008dec:	d101      	bne.n	8008df2 <__swbuf_r+0x7a>
 8008dee:	68ac      	ldr	r4, [r5, #8]
 8008df0:	e7cf      	b.n	8008d92 <__swbuf_r+0x1a>
 8008df2:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <__swbuf_r+0xa0>)
 8008df4:	429c      	cmp	r4, r3
 8008df6:	bf08      	it	eq
 8008df8:	68ec      	ldreq	r4, [r5, #12]
 8008dfa:	e7ca      	b.n	8008d92 <__swbuf_r+0x1a>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 f81a 	bl	8008e38 <__swsetup_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0cb      	beq.n	8008da0 <__swbuf_r+0x28>
 8008e08:	f04f 37ff 	mov.w	r7, #4294967295
 8008e0c:	e7ea      	b.n	8008de4 <__swbuf_r+0x6c>
 8008e0e:	bf00      	nop
 8008e10:	08009b64 	.word	0x08009b64
 8008e14:	08009b84 	.word	0x08009b84
 8008e18:	08009b44 	.word	0x08009b44

08008e1c <__ascii_wctomb>:
 8008e1c:	b149      	cbz	r1, 8008e32 <__ascii_wctomb+0x16>
 8008e1e:	2aff      	cmp	r2, #255	; 0xff
 8008e20:	bf85      	ittet	hi
 8008e22:	238a      	movhi	r3, #138	; 0x8a
 8008e24:	6003      	strhi	r3, [r0, #0]
 8008e26:	700a      	strbls	r2, [r1, #0]
 8008e28:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e2c:	bf98      	it	ls
 8008e2e:	2001      	movls	r0, #1
 8008e30:	4770      	bx	lr
 8008e32:	4608      	mov	r0, r1
 8008e34:	4770      	bx	lr
	...

08008e38 <__swsetup_r>:
 8008e38:	4b32      	ldr	r3, [pc, #200]	; (8008f04 <__swsetup_r+0xcc>)
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	681d      	ldr	r5, [r3, #0]
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	b125      	cbz	r5, 8008e4e <__swsetup_r+0x16>
 8008e44:	69ab      	ldr	r3, [r5, #24]
 8008e46:	b913      	cbnz	r3, 8008e4e <__swsetup_r+0x16>
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f000 f985 	bl	8009158 <__sinit>
 8008e4e:	4b2e      	ldr	r3, [pc, #184]	; (8008f08 <__swsetup_r+0xd0>)
 8008e50:	429c      	cmp	r4, r3
 8008e52:	d10f      	bne.n	8008e74 <__swsetup_r+0x3c>
 8008e54:	686c      	ldr	r4, [r5, #4]
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e5c:	0719      	lsls	r1, r3, #28
 8008e5e:	d42c      	bmi.n	8008eba <__swsetup_r+0x82>
 8008e60:	06dd      	lsls	r5, r3, #27
 8008e62:	d411      	bmi.n	8008e88 <__swsetup_r+0x50>
 8008e64:	2309      	movs	r3, #9
 8008e66:	6033      	str	r3, [r6, #0]
 8008e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	e03e      	b.n	8008ef2 <__swsetup_r+0xba>
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <__swsetup_r+0xd4>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <__swsetup_r+0x46>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7eb      	b.n	8008e56 <__swsetup_r+0x1e>
 8008e7e:	4b24      	ldr	r3, [pc, #144]	; (8008f10 <__swsetup_r+0xd8>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7e6      	b.n	8008e56 <__swsetup_r+0x1e>
 8008e88:	0758      	lsls	r0, r3, #29
 8008e8a:	d512      	bpl.n	8008eb2 <__swsetup_r+0x7a>
 8008e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8e:	b141      	cbz	r1, 8008ea2 <__swsetup_r+0x6a>
 8008e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e94:	4299      	cmp	r1, r3
 8008e96:	d002      	beq.n	8008e9e <__swsetup_r+0x66>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7fd fc57 	bl	800674c <_free_r>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6063      	str	r3, [r4, #4]
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f043 0308 	orr.w	r3, r3, #8
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	b94b      	cbnz	r3, 8008ed2 <__swsetup_r+0x9a>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec8:	d003      	beq.n	8008ed2 <__swsetup_r+0x9a>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 fa05 	bl	80092dc <__smakebuf_r>
 8008ed2:	89a0      	ldrh	r0, [r4, #12]
 8008ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed8:	f010 0301 	ands.w	r3, r0, #1
 8008edc:	d00a      	beq.n	8008ef4 <__swsetup_r+0xbc>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	6963      	ldr	r3, [r4, #20]
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	61a3      	str	r3, [r4, #24]
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	b943      	cbnz	r3, 8008efe <__swsetup_r+0xc6>
 8008eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ef0:	d1ba      	bne.n	8008e68 <__swsetup_r+0x30>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	0781      	lsls	r1, r0, #30
 8008ef6:	bf58      	it	pl
 8008ef8:	6963      	ldrpl	r3, [r4, #20]
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	e7f4      	b.n	8008ee8 <__swsetup_r+0xb0>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e7f7      	b.n	8008ef2 <__swsetup_r+0xba>
 8008f02:	bf00      	nop
 8008f04:	20000018 	.word	0x20000018
 8008f08:	08009b64 	.word	0x08009b64
 8008f0c:	08009b84 	.word	0x08009b84
 8008f10:	08009b44 	.word	0x08009b44

08008f14 <abort>:
 8008f14:	b508      	push	{r3, lr}
 8008f16:	2006      	movs	r0, #6
 8008f18:	f000 fa50 	bl	80093bc <raise>
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	f7f9 fb0b 	bl	8002538 <_exit>
	...

08008f24 <__sflush_r>:
 8008f24:	898a      	ldrh	r2, [r1, #12]
 8008f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	0710      	lsls	r0, r2, #28
 8008f2e:	460c      	mov	r4, r1
 8008f30:	d458      	bmi.n	8008fe4 <__sflush_r+0xc0>
 8008f32:	684b      	ldr	r3, [r1, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dc05      	bgt.n	8008f44 <__sflush_r+0x20>
 8008f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dc02      	bgt.n	8008f44 <__sflush_r+0x20>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d0f9      	beq.n	8008f3e <__sflush_r+0x1a>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f50:	682f      	ldr	r7, [r5, #0]
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	d032      	beq.n	8008fbc <__sflush_r+0x98>
 8008f56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	075a      	lsls	r2, r3, #29
 8008f5c:	d505      	bpl.n	8008f6a <__sflush_r+0x46>
 8008f5e:	6863      	ldr	r3, [r4, #4]
 8008f60:	1ac0      	subs	r0, r0, r3
 8008f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f64:	b10b      	cbz	r3, 8008f6a <__sflush_r+0x46>
 8008f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f68:	1ac0      	subs	r0, r0, r3
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b0      	blx	r6
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	d106      	bne.n	8008f8a <__sflush_r+0x66>
 8008f7c:	6829      	ldr	r1, [r5, #0]
 8008f7e:	291d      	cmp	r1, #29
 8008f80:	d82c      	bhi.n	8008fdc <__sflush_r+0xb8>
 8008f82:	4a2a      	ldr	r2, [pc, #168]	; (800902c <__sflush_r+0x108>)
 8008f84:	40ca      	lsrs	r2, r1
 8008f86:	07d6      	lsls	r6, r2, #31
 8008f88:	d528      	bpl.n	8008fdc <__sflush_r+0xb8>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	04d9      	lsls	r1, r3, #19
 8008f90:	6922      	ldr	r2, [r4, #16]
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	d504      	bpl.n	8008fa0 <__sflush_r+0x7c>
 8008f96:	1c42      	adds	r2, r0, #1
 8008f98:	d101      	bne.n	8008f9e <__sflush_r+0x7a>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b903      	cbnz	r3, 8008fa0 <__sflush_r+0x7c>
 8008f9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fa2:	602f      	str	r7, [r5, #0]
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	d0ca      	beq.n	8008f3e <__sflush_r+0x1a>
 8008fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fac:	4299      	cmp	r1, r3
 8008fae:	d002      	beq.n	8008fb6 <__sflush_r+0x92>
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f7fd fbcb 	bl	800674c <_free_r>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008fba:	e7c1      	b.n	8008f40 <__sflush_r+0x1c>
 8008fbc:	6a21      	ldr	r1, [r4, #32]
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b0      	blx	r6
 8008fc4:	1c41      	adds	r1, r0, #1
 8008fc6:	d1c7      	bne.n	8008f58 <__sflush_r+0x34>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0c4      	beq.n	8008f58 <__sflush_r+0x34>
 8008fce:	2b1d      	cmp	r3, #29
 8008fd0:	d001      	beq.n	8008fd6 <__sflush_r+0xb2>
 8008fd2:	2b16      	cmp	r3, #22
 8008fd4:	d101      	bne.n	8008fda <__sflush_r+0xb6>
 8008fd6:	602f      	str	r7, [r5, #0]
 8008fd8:	e7b1      	b.n	8008f3e <__sflush_r+0x1a>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	e7ad      	b.n	8008f40 <__sflush_r+0x1c>
 8008fe4:	690f      	ldr	r7, [r1, #16]
 8008fe6:	2f00      	cmp	r7, #0
 8008fe8:	d0a9      	beq.n	8008f3e <__sflush_r+0x1a>
 8008fea:	0793      	lsls	r3, r2, #30
 8008fec:	680e      	ldr	r6, [r1, #0]
 8008fee:	bf08      	it	eq
 8008ff0:	694b      	ldreq	r3, [r1, #20]
 8008ff2:	600f      	str	r7, [r1, #0]
 8008ff4:	bf18      	it	ne
 8008ff6:	2300      	movne	r3, #0
 8008ff8:	eba6 0807 	sub.w	r8, r6, r7
 8008ffc:	608b      	str	r3, [r1, #8]
 8008ffe:	f1b8 0f00 	cmp.w	r8, #0
 8009002:	dd9c      	ble.n	8008f3e <__sflush_r+0x1a>
 8009004:	6a21      	ldr	r1, [r4, #32]
 8009006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009008:	4643      	mov	r3, r8
 800900a:	463a      	mov	r2, r7
 800900c:	4628      	mov	r0, r5
 800900e:	47b0      	blx	r6
 8009010:	2800      	cmp	r0, #0
 8009012:	dc06      	bgt.n	8009022 <__sflush_r+0xfe>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e78e      	b.n	8008f40 <__sflush_r+0x1c>
 8009022:	4407      	add	r7, r0
 8009024:	eba8 0800 	sub.w	r8, r8, r0
 8009028:	e7e9      	b.n	8008ffe <__sflush_r+0xda>
 800902a:	bf00      	nop
 800902c:	20400001 	.word	0x20400001

08009030 <_fflush_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	690b      	ldr	r3, [r1, #16]
 8009034:	4605      	mov	r5, r0
 8009036:	460c      	mov	r4, r1
 8009038:	b913      	cbnz	r3, 8009040 <_fflush_r+0x10>
 800903a:	2500      	movs	r5, #0
 800903c:	4628      	mov	r0, r5
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	b118      	cbz	r0, 800904a <_fflush_r+0x1a>
 8009042:	6983      	ldr	r3, [r0, #24]
 8009044:	b90b      	cbnz	r3, 800904a <_fflush_r+0x1a>
 8009046:	f000 f887 	bl	8009158 <__sinit>
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <_fflush_r+0x6c>)
 800904c:	429c      	cmp	r4, r3
 800904e:	d11b      	bne.n	8009088 <_fflush_r+0x58>
 8009050:	686c      	ldr	r4, [r5, #4]
 8009052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0ef      	beq.n	800903a <_fflush_r+0xa>
 800905a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800905c:	07d0      	lsls	r0, r2, #31
 800905e:	d404      	bmi.n	800906a <_fflush_r+0x3a>
 8009060:	0599      	lsls	r1, r3, #22
 8009062:	d402      	bmi.n	800906a <_fflush_r+0x3a>
 8009064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009066:	f7ff fcd0 	bl	8008a0a <__retarget_lock_acquire_recursive>
 800906a:	4628      	mov	r0, r5
 800906c:	4621      	mov	r1, r4
 800906e:	f7ff ff59 	bl	8008f24 <__sflush_r>
 8009072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009074:	07da      	lsls	r2, r3, #31
 8009076:	4605      	mov	r5, r0
 8009078:	d4e0      	bmi.n	800903c <_fflush_r+0xc>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	059b      	lsls	r3, r3, #22
 800907e:	d4dd      	bmi.n	800903c <_fflush_r+0xc>
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f7ff fcc3 	bl	8008a0c <__retarget_lock_release_recursive>
 8009086:	e7d9      	b.n	800903c <_fflush_r+0xc>
 8009088:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <_fflush_r+0x70>)
 800908a:	429c      	cmp	r4, r3
 800908c:	d101      	bne.n	8009092 <_fflush_r+0x62>
 800908e:	68ac      	ldr	r4, [r5, #8]
 8009090:	e7df      	b.n	8009052 <_fflush_r+0x22>
 8009092:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <_fflush_r+0x74>)
 8009094:	429c      	cmp	r4, r3
 8009096:	bf08      	it	eq
 8009098:	68ec      	ldreq	r4, [r5, #12]
 800909a:	e7da      	b.n	8009052 <_fflush_r+0x22>
 800909c:	08009b64 	.word	0x08009b64
 80090a0:	08009b84 	.word	0x08009b84
 80090a4:	08009b44 	.word	0x08009b44

080090a8 <std>:
 80090a8:	2300      	movs	r3, #0
 80090aa:	b510      	push	{r4, lr}
 80090ac:	4604      	mov	r4, r0
 80090ae:	e9c0 3300 	strd	r3, r3, [r0]
 80090b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090b6:	6083      	str	r3, [r0, #8]
 80090b8:	8181      	strh	r1, [r0, #12]
 80090ba:	6643      	str	r3, [r0, #100]	; 0x64
 80090bc:	81c2      	strh	r2, [r0, #14]
 80090be:	6183      	str	r3, [r0, #24]
 80090c0:	4619      	mov	r1, r3
 80090c2:	2208      	movs	r2, #8
 80090c4:	305c      	adds	r0, #92	; 0x5c
 80090c6:	f7fd fb39 	bl	800673c <memset>
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <std+0x38>)
 80090cc:	6263      	str	r3, [r4, #36]	; 0x24
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <std+0x3c>)
 80090d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <std+0x40>)
 80090d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <std+0x44>)
 80090d8:	6224      	str	r4, [r4, #32]
 80090da:	6323      	str	r3, [r4, #48]	; 0x30
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	bf00      	nop
 80090e0:	080093f5 	.word	0x080093f5
 80090e4:	08009417 	.word	0x08009417
 80090e8:	0800944f 	.word	0x0800944f
 80090ec:	08009473 	.word	0x08009473

080090f0 <_cleanup_r>:
 80090f0:	4901      	ldr	r1, [pc, #4]	; (80090f8 <_cleanup_r+0x8>)
 80090f2:	f000 b8af 	b.w	8009254 <_fwalk_reent>
 80090f6:	bf00      	nop
 80090f8:	08009031 	.word	0x08009031

080090fc <__sfmoreglue>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	2268      	movs	r2, #104	; 0x68
 8009100:	1e4d      	subs	r5, r1, #1
 8009102:	4355      	muls	r5, r2
 8009104:	460e      	mov	r6, r1
 8009106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800910a:	f7fd fb8b 	bl	8006824 <_malloc_r>
 800910e:	4604      	mov	r4, r0
 8009110:	b140      	cbz	r0, 8009124 <__sfmoreglue+0x28>
 8009112:	2100      	movs	r1, #0
 8009114:	e9c0 1600 	strd	r1, r6, [r0]
 8009118:	300c      	adds	r0, #12
 800911a:	60a0      	str	r0, [r4, #8]
 800911c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009120:	f7fd fb0c 	bl	800673c <memset>
 8009124:	4620      	mov	r0, r4
 8009126:	bd70      	pop	{r4, r5, r6, pc}

08009128 <__sfp_lock_acquire>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__sfp_lock_acquire+0x8>)
 800912a:	f7ff bc6e 	b.w	8008a0a <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	200003b5 	.word	0x200003b5

08009134 <__sfp_lock_release>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__sfp_lock_release+0x8>)
 8009136:	f7ff bc69 	b.w	8008a0c <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	200003b5 	.word	0x200003b5

08009140 <__sinit_lock_acquire>:
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <__sinit_lock_acquire+0x8>)
 8009142:	f7ff bc62 	b.w	8008a0a <__retarget_lock_acquire_recursive>
 8009146:	bf00      	nop
 8009148:	200003b6 	.word	0x200003b6

0800914c <__sinit_lock_release>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__sinit_lock_release+0x8>)
 800914e:	f7ff bc5d 	b.w	8008a0c <__retarget_lock_release_recursive>
 8009152:	bf00      	nop
 8009154:	200003b6 	.word	0x200003b6

08009158 <__sinit>:
 8009158:	b510      	push	{r4, lr}
 800915a:	4604      	mov	r4, r0
 800915c:	f7ff fff0 	bl	8009140 <__sinit_lock_acquire>
 8009160:	69a3      	ldr	r3, [r4, #24]
 8009162:	b11b      	cbz	r3, 800916c <__sinit+0x14>
 8009164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009168:	f7ff bff0 	b.w	800914c <__sinit_lock_release>
 800916c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009170:	6523      	str	r3, [r4, #80]	; 0x50
 8009172:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <__sinit+0x68>)
 8009174:	4a13      	ldr	r2, [pc, #76]	; (80091c4 <__sinit+0x6c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	62a2      	str	r2, [r4, #40]	; 0x28
 800917a:	42a3      	cmp	r3, r4
 800917c:	bf04      	itt	eq
 800917e:	2301      	moveq	r3, #1
 8009180:	61a3      	streq	r3, [r4, #24]
 8009182:	4620      	mov	r0, r4
 8009184:	f000 f820 	bl	80091c8 <__sfp>
 8009188:	6060      	str	r0, [r4, #4]
 800918a:	4620      	mov	r0, r4
 800918c:	f000 f81c 	bl	80091c8 <__sfp>
 8009190:	60a0      	str	r0, [r4, #8]
 8009192:	4620      	mov	r0, r4
 8009194:	f000 f818 	bl	80091c8 <__sfp>
 8009198:	2200      	movs	r2, #0
 800919a:	60e0      	str	r0, [r4, #12]
 800919c:	2104      	movs	r1, #4
 800919e:	6860      	ldr	r0, [r4, #4]
 80091a0:	f7ff ff82 	bl	80090a8 <std>
 80091a4:	68a0      	ldr	r0, [r4, #8]
 80091a6:	2201      	movs	r2, #1
 80091a8:	2109      	movs	r1, #9
 80091aa:	f7ff ff7d 	bl	80090a8 <std>
 80091ae:	68e0      	ldr	r0, [r4, #12]
 80091b0:	2202      	movs	r2, #2
 80091b2:	2112      	movs	r1, #18
 80091b4:	f7ff ff78 	bl	80090a8 <std>
 80091b8:	2301      	movs	r3, #1
 80091ba:	61a3      	str	r3, [r4, #24]
 80091bc:	e7d2      	b.n	8009164 <__sinit+0xc>
 80091be:	bf00      	nop
 80091c0:	080097cc 	.word	0x080097cc
 80091c4:	080090f1 	.word	0x080090f1

080091c8 <__sfp>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	4607      	mov	r7, r0
 80091cc:	f7ff ffac 	bl	8009128 <__sfp_lock_acquire>
 80091d0:	4b1e      	ldr	r3, [pc, #120]	; (800924c <__sfp+0x84>)
 80091d2:	681e      	ldr	r6, [r3, #0]
 80091d4:	69b3      	ldr	r3, [r6, #24]
 80091d6:	b913      	cbnz	r3, 80091de <__sfp+0x16>
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff ffbd 	bl	8009158 <__sinit>
 80091de:	3648      	adds	r6, #72	; 0x48
 80091e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	d503      	bpl.n	80091f0 <__sfp+0x28>
 80091e8:	6833      	ldr	r3, [r6, #0]
 80091ea:	b30b      	cbz	r3, 8009230 <__sfp+0x68>
 80091ec:	6836      	ldr	r6, [r6, #0]
 80091ee:	e7f7      	b.n	80091e0 <__sfp+0x18>
 80091f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091f4:	b9d5      	cbnz	r5, 800922c <__sfp+0x64>
 80091f6:	4b16      	ldr	r3, [pc, #88]	; (8009250 <__sfp+0x88>)
 80091f8:	60e3      	str	r3, [r4, #12]
 80091fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009200:	f7ff fc02 	bl	8008a08 <__retarget_lock_init_recursive>
 8009204:	f7ff ff96 	bl	8009134 <__sfp_lock_release>
 8009208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800920c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009210:	6025      	str	r5, [r4, #0]
 8009212:	61a5      	str	r5, [r4, #24]
 8009214:	2208      	movs	r2, #8
 8009216:	4629      	mov	r1, r5
 8009218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800921c:	f7fd fa8e 	bl	800673c <memset>
 8009220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009228:	4620      	mov	r0, r4
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922c:	3468      	adds	r4, #104	; 0x68
 800922e:	e7d9      	b.n	80091e4 <__sfp+0x1c>
 8009230:	2104      	movs	r1, #4
 8009232:	4638      	mov	r0, r7
 8009234:	f7ff ff62 	bl	80090fc <__sfmoreglue>
 8009238:	4604      	mov	r4, r0
 800923a:	6030      	str	r0, [r6, #0]
 800923c:	2800      	cmp	r0, #0
 800923e:	d1d5      	bne.n	80091ec <__sfp+0x24>
 8009240:	f7ff ff78 	bl	8009134 <__sfp_lock_release>
 8009244:	230c      	movs	r3, #12
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	e7ee      	b.n	8009228 <__sfp+0x60>
 800924a:	bf00      	nop
 800924c:	080097cc 	.word	0x080097cc
 8009250:	ffff0001 	.word	0xffff0001

08009254 <_fwalk_reent>:
 8009254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009258:	4606      	mov	r6, r0
 800925a:	4688      	mov	r8, r1
 800925c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009260:	2700      	movs	r7, #0
 8009262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009266:	f1b9 0901 	subs.w	r9, r9, #1
 800926a:	d505      	bpl.n	8009278 <_fwalk_reent+0x24>
 800926c:	6824      	ldr	r4, [r4, #0]
 800926e:	2c00      	cmp	r4, #0
 8009270:	d1f7      	bne.n	8009262 <_fwalk_reent+0xe>
 8009272:	4638      	mov	r0, r7
 8009274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009278:	89ab      	ldrh	r3, [r5, #12]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d907      	bls.n	800928e <_fwalk_reent+0x3a>
 800927e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009282:	3301      	adds	r3, #1
 8009284:	d003      	beq.n	800928e <_fwalk_reent+0x3a>
 8009286:	4629      	mov	r1, r5
 8009288:	4630      	mov	r0, r6
 800928a:	47c0      	blx	r8
 800928c:	4307      	orrs	r7, r0
 800928e:	3568      	adds	r5, #104	; 0x68
 8009290:	e7e9      	b.n	8009266 <_fwalk_reent+0x12>

08009292 <__swhatbuf_r>:
 8009292:	b570      	push	{r4, r5, r6, lr}
 8009294:	460e      	mov	r6, r1
 8009296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929a:	2900      	cmp	r1, #0
 800929c:	b096      	sub	sp, #88	; 0x58
 800929e:	4614      	mov	r4, r2
 80092a0:	461d      	mov	r5, r3
 80092a2:	da08      	bge.n	80092b6 <__swhatbuf_r+0x24>
 80092a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	061a      	lsls	r2, r3, #24
 80092ae:	d410      	bmi.n	80092d2 <__swhatbuf_r+0x40>
 80092b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b4:	e00e      	b.n	80092d4 <__swhatbuf_r+0x42>
 80092b6:	466a      	mov	r2, sp
 80092b8:	f000 f902 	bl	80094c0 <_fstat_r>
 80092bc:	2800      	cmp	r0, #0
 80092be:	dbf1      	blt.n	80092a4 <__swhatbuf_r+0x12>
 80092c0:	9a01      	ldr	r2, [sp, #4]
 80092c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ca:	425a      	negs	r2, r3
 80092cc:	415a      	adcs	r2, r3
 80092ce:	602a      	str	r2, [r5, #0]
 80092d0:	e7ee      	b.n	80092b0 <__swhatbuf_r+0x1e>
 80092d2:	2340      	movs	r3, #64	; 0x40
 80092d4:	2000      	movs	r0, #0
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	b016      	add	sp, #88	; 0x58
 80092da:	bd70      	pop	{r4, r5, r6, pc}

080092dc <__smakebuf_r>:
 80092dc:	898b      	ldrh	r3, [r1, #12]
 80092de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e0:	079d      	lsls	r5, r3, #30
 80092e2:	4606      	mov	r6, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	d507      	bpl.n	80092f8 <__smakebuf_r+0x1c>
 80092e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	6123      	str	r3, [r4, #16]
 80092f0:	2301      	movs	r3, #1
 80092f2:	6163      	str	r3, [r4, #20]
 80092f4:	b002      	add	sp, #8
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	ab01      	add	r3, sp, #4
 80092fa:	466a      	mov	r2, sp
 80092fc:	f7ff ffc9 	bl	8009292 <__swhatbuf_r>
 8009300:	9900      	ldr	r1, [sp, #0]
 8009302:	4605      	mov	r5, r0
 8009304:	4630      	mov	r0, r6
 8009306:	f7fd fa8d 	bl	8006824 <_malloc_r>
 800930a:	b948      	cbnz	r0, 8009320 <__smakebuf_r+0x44>
 800930c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009310:	059a      	lsls	r2, r3, #22
 8009312:	d4ef      	bmi.n	80092f4 <__smakebuf_r+0x18>
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	f043 0302 	orr.w	r3, r3, #2
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e7e3      	b.n	80092e8 <__smakebuf_r+0xc>
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <__smakebuf_r+0x7c>)
 8009322:	62b3      	str	r3, [r6, #40]	; 0x28
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	6020      	str	r0, [r4, #0]
 8009328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	9b00      	ldr	r3, [sp, #0]
 8009330:	6163      	str	r3, [r4, #20]
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	6120      	str	r0, [r4, #16]
 8009336:	b15b      	cbz	r3, 8009350 <__smakebuf_r+0x74>
 8009338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800933c:	4630      	mov	r0, r6
 800933e:	f000 f8d1 	bl	80094e4 <_isatty_r>
 8009342:	b128      	cbz	r0, 8009350 <__smakebuf_r+0x74>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f023 0303 	bic.w	r3, r3, #3
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	89a0      	ldrh	r0, [r4, #12]
 8009352:	4305      	orrs	r5, r0
 8009354:	81a5      	strh	r5, [r4, #12]
 8009356:	e7cd      	b.n	80092f4 <__smakebuf_r+0x18>
 8009358:	080090f1 	.word	0x080090f1

0800935c <_malloc_usable_size_r>:
 800935c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009360:	1f18      	subs	r0, r3, #4
 8009362:	2b00      	cmp	r3, #0
 8009364:	bfbc      	itt	lt
 8009366:	580b      	ldrlt	r3, [r1, r0]
 8009368:	18c0      	addlt	r0, r0, r3
 800936a:	4770      	bx	lr

0800936c <_raise_r>:
 800936c:	291f      	cmp	r1, #31
 800936e:	b538      	push	{r3, r4, r5, lr}
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
 8009374:	d904      	bls.n	8009380 <_raise_r+0x14>
 8009376:	2316      	movs	r3, #22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	f04f 30ff 	mov.w	r0, #4294967295
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009382:	b112      	cbz	r2, 800938a <_raise_r+0x1e>
 8009384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009388:	b94b      	cbnz	r3, 800939e <_raise_r+0x32>
 800938a:	4620      	mov	r0, r4
 800938c:	f000 f830 	bl	80093f0 <_getpid_r>
 8009390:	462a      	mov	r2, r5
 8009392:	4601      	mov	r1, r0
 8009394:	4620      	mov	r0, r4
 8009396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800939a:	f000 b817 	b.w	80093cc <_kill_r>
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d00a      	beq.n	80093b8 <_raise_r+0x4c>
 80093a2:	1c59      	adds	r1, r3, #1
 80093a4:	d103      	bne.n	80093ae <_raise_r+0x42>
 80093a6:	2316      	movs	r3, #22
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	2001      	movs	r0, #1
 80093ac:	e7e7      	b.n	800937e <_raise_r+0x12>
 80093ae:	2400      	movs	r4, #0
 80093b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093b4:	4628      	mov	r0, r5
 80093b6:	4798      	blx	r3
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7e0      	b.n	800937e <_raise_r+0x12>

080093bc <raise>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <raise+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f7ff bfd3 	b.w	800936c <_raise_r>
 80093c6:	bf00      	nop
 80093c8:	20000018 	.word	0x20000018

080093cc <_kill_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d07      	ldr	r5, [pc, #28]	; (80093ec <_kill_r+0x20>)
 80093d0:	2300      	movs	r3, #0
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	4611      	mov	r1, r2
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	f7f9 f89d 	bl	8002518 <_kill>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d102      	bne.n	80093e8 <_kill_r+0x1c>
 80093e2:	682b      	ldr	r3, [r5, #0]
 80093e4:	b103      	cbz	r3, 80093e8 <_kill_r+0x1c>
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	bd38      	pop	{r3, r4, r5, pc}
 80093ea:	bf00      	nop
 80093ec:	200003b0 	.word	0x200003b0

080093f0 <_getpid_r>:
 80093f0:	f7f9 b88a 	b.w	8002508 <_getpid>

080093f4 <__sread>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	460c      	mov	r4, r1
 80093f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093fc:	f000 f894 	bl	8009528 <_read_r>
 8009400:	2800      	cmp	r0, #0
 8009402:	bfab      	itete	ge
 8009404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009406:	89a3      	ldrhlt	r3, [r4, #12]
 8009408:	181b      	addge	r3, r3, r0
 800940a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800940e:	bfac      	ite	ge
 8009410:	6563      	strge	r3, [r4, #84]	; 0x54
 8009412:	81a3      	strhlt	r3, [r4, #12]
 8009414:	bd10      	pop	{r4, pc}

08009416 <__swrite>:
 8009416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941a:	461f      	mov	r7, r3
 800941c:	898b      	ldrh	r3, [r1, #12]
 800941e:	05db      	lsls	r3, r3, #23
 8009420:	4605      	mov	r5, r0
 8009422:	460c      	mov	r4, r1
 8009424:	4616      	mov	r6, r2
 8009426:	d505      	bpl.n	8009434 <__swrite+0x1e>
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	2302      	movs	r3, #2
 800942e:	2200      	movs	r2, #0
 8009430:	f000 f868 	bl	8009504 <_lseek_r>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800943a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	4632      	mov	r2, r6
 8009442:	463b      	mov	r3, r7
 8009444:	4628      	mov	r0, r5
 8009446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800944a:	f000 b817 	b.w	800947c <_write_r>

0800944e <__sseek>:
 800944e:	b510      	push	{r4, lr}
 8009450:	460c      	mov	r4, r1
 8009452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009456:	f000 f855 	bl	8009504 <_lseek_r>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	bf15      	itete	ne
 8009460:	6560      	strne	r0, [r4, #84]	; 0x54
 8009462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800946a:	81a3      	strheq	r3, [r4, #12]
 800946c:	bf18      	it	ne
 800946e:	81a3      	strhne	r3, [r4, #12]
 8009470:	bd10      	pop	{r4, pc}

08009472 <__sclose>:
 8009472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009476:	f000 b813 	b.w	80094a0 <_close_r>
	...

0800947c <_write_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	; (800949c <_write_r+0x20>)
 8009480:	4604      	mov	r4, r0
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	2200      	movs	r2, #0
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f7f9 f87b 	bl	8002586 <_write>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_write_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_write_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	200003b0 	.word	0x200003b0

080094a0 <_close_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d06      	ldr	r5, [pc, #24]	; (80094bc <_close_r+0x1c>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f9 f887 	bl	80025be <_close>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_close_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_close_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	200003b0 	.word	0x200003b0

080094c0 <_fstat_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	; (80094e0 <_fstat_r+0x20>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	f7f9 f882 	bl	80025d6 <_fstat>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d102      	bne.n	80094dc <_fstat_r+0x1c>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b103      	cbz	r3, 80094dc <_fstat_r+0x1c>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	200003b0 	.word	0x200003b0

080094e4 <_isatty_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	; (8009500 <_isatty_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f9 f881 	bl	80025f6 <_isatty>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_isatty_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_isatty_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	200003b0 	.word	0x200003b0

08009504 <_lseek_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_lseek_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f9 f87a 	bl	800260c <_lseek>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_lseek_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_lseek_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	200003b0 	.word	0x200003b0

08009528 <_read_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	; (8009548 <_read_r+0x20>)
 800952c:	4604      	mov	r4, r0
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	2200      	movs	r2, #0
 8009534:	602a      	str	r2, [r5, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	f7f9 f808 	bl	800254c <_read>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_read_r+0x1e>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_read_r+0x1e>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	200003b0 	.word	0x200003b0

0800954c <_init>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr

08009558 <_fini>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr
